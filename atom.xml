<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱爬虫与大数据 | 张凯恒的个人博客</title>
  <icon>https://www.gravatar.com/avatar/2e41654fe4ea52b82f9e4f5f11453362</icon>
  
  <link href="https://zhangkh.top/atom.xml" rel="self"/>
  
  <link href="https://zhangkh.top/"/>
  <updated>2022-01-01T10:00:11.328Z</updated>
  <id>https://zhangkh.top/</id>
  
  <author>
    <name>Kit</name>
    <email>2514154656@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Anaconda+VScode简便舒适轻量级Python环境搭建</title>
    <link href="https://zhangkh.top/c6fb4f64.html"/>
    <id>https://zhangkh.top/c6fb4f64.html</id>
    <published>2022-01-01T04:35:19.000Z</published>
    <updated>2022-01-01T10:00:11.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Anaconda-VScode简便舒适轻量级Python环境搭建"><a href="#Anaconda-VScode简便舒适轻量级Python环境搭建" class="headerlink" title="Anaconda+VScode简便舒适轻量级Python环境搭建"></a>Anaconda+VScode简便舒适轻量级Python环境搭建</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>工欲善其事，必先利其器。正确配置Python学习和开发环境，一次完全配置，后面学习无忧，对以后高效的学习效率、更少的报错有着巨大的帮助。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li><p>Python官网安装包（不推荐，了解就行）：<a href="https://www.python.org/downloads/">Python官网</a>最新的安装包不稳定可能出现不兼容问题类似小白鼠，还有就是太精简了；若要准备计算机等级考试Python二级，可到<a href="http://ncre.neea.edu.cn/html1/report/1807/2866-1.htm">全国计算机等级考试官网</a>下载对应版本并按照给的步骤安装说明进行安装。</p></li><li><p>Anaconda（一种Python集成开发环境软件，强烈推荐）：<a href="https://www.anaconda.com/products/individual">Anaconda官网</a>由于被dns污染或者被墙的缘故下载安装包比较慢，所以推荐到<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/?C=M&O=D">清华大学开源软件镜像站-Anaconda</a>快速下载相对最新的安装包：根据电脑系统选择相应版本，如Windows10的64位系统选择第一个，32位的选择第二个。</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011254592.png" alt="1"></p></li><li><p>Visual Studio Code（强烈推荐，简称VScode轻量级代码编辑器）：<a href="https://code.visualstudio.com/Download">官网VScode</a>作为微软公司旗下的一款软件，对windows系统兼容性很好，软件打开快速高效，内存占用低，可配合丰富扩展插件，自由度高。下载安装包选择对应系统版本就行。</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011301879.png" alt="8"></p></li><li><p>Pycharm（代码编辑器，不推荐）：可能好多视频和文章教程建议小白安装使用编辑代码，但是每次打开软件右下角都要长时间加载，内存占用高，插件商店有被墙而安装增加了门槛，个人觉得减少个人学习效率以及等待加载期间浪费了时间。</p></li><li><p>Jupyter Notebook（代码编辑器，推荐除了爬虫以外的数据分析等领域用）：因为Anaconda自带jupyternotebook的缘故不必下载，优点是可以代码一步一步运行并看到结果，演示效果好，缺点也有代码提示功能比较弱。</p></li></ol><p>总的来说，您只用按照要求下载第二项和第三项，下面的安装演示以win11环境为例，其他系统环境大差不差。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Anaconda的安装"><a href="#Anaconda的安装" class="headerlink" title="Anaconda的安装"></a>Anaconda的安装</h3><p>双击下载好的Anaconda安装软件包，简单来说就是傻瓜式的Next一直按照默认安装，但是要注意以下两点：</p><ol><li><p>到下图界面要勾选上Add Anaconda3 to my Path environment variable，简单翻译就是加入环境变量</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011321489.png" alt="3xx"></p></li><li><p>最后安装好的时候，取消勾选所有选项然后点击Finish，不然会使用浏览器打开网页</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011323062.png" alt="5"></p></li></ol><h3 id="VScode的安装"><a href="#VScode的安装" class="headerlink" title="VScode的安装"></a>VScode的安装</h3><p>双击下载好的VScode安装软件包，傻瓜式的Next一直按照默认安装就行。</p><h2 id="环境配置与优化"><a href="#环境配置与优化" class="headerlink" title="环境配置与优化"></a>环境配置与优化</h2><ol><li><p>第一次打开VScode后，默认界面语言是英文，右下角有安装语言包的提示，安装重启就行，重启后界面是中文便于理解，后面用过一段时间后是建议改为英文的。</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011329255.png" alt="13"></p></li><li><p>个性化设置主题，重启后就可以按照提示自定义一些功能了，个人还是建议黑色主题，比较护眼。</p></li><li><p>创建工作文件夹并运行Python文件：在桌面或者你想要的位置创建一个以后用来存放Python的文件夹，本例新建一个test文件夹（名字自起），将文件夹拖拽到vscode界面</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011334927.png" alt="15"></p><p>然后点击信任（自己新建的文件夹还怕放病毒？）</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011335117.png" alt="16"></p><p>点击左侧第一个文件页图标可以看到资源管理器页面，在刚刚的test文件夹中新建helloworld.py文件，.py文件后缀代表了文件的类型，这里建议大家把电脑的显示文件后缀打开，可自行百度。然后打开文件用<strong>英文输入法</strong>输入print(‘hello world!’)然后Ctrl+S快捷键保存一下</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011336653.png" alt="17"></p><p>打开刚刚新建的文件后，右下角会有安装Python扩展插件的提示，安装即可，当然因为后面连接的是anaconda的python环境，还会安装其他和python有关的插件。</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011340792.png" alt="20"></p><p>安装的插件可以点击左侧工具栏第5个也就是四个方块的图标查看<img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011346518.png" alt="32"></p><p>安装完之后会发现右下角会有选择Python环境的提示，我们select一下就发现有一个星星图标的选项，这得益于刚刚安装anaconda有勾选让其他软件检测到anaconda的python环境这一选项；我们选择它，这里的意思就是将VScode与anaconda进行连接。</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011342069.png" alt="21"></p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011342855.png" alt="22"></p><p>用vscode自带的方式运行python文件：可以右键点击在终端运行Python文件，也可以点击右上角的开始按钮运行</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011351775.png" alt="34"></p><p>这样你就已经可以运行Python文件打印helloworld了，恭喜您进入到Python的世界。</p></li><li><p>一些优化：</p><p>优雅地运行：在插件商店搜索coderunner安装第一个插件，安装好后回到要运行的文件，右键就发现多了一个RunCode选项进行运行按钮；也可以利用快捷键Ctrl+Alt+N运行，要比上面的运行更快捷高效。</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011353012.png" alt="33"></p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011356661.png" alt="35"></p><p>自动保存，你会发现运行文件前要把编辑的文件保存一下才能运行编辑后的代码，否则则是运行编辑钱的代码，类似于你编辑world文档没有养成手动保存的习惯然后突然没电了。。。方便起见点击文件点击自动保存即可。</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011404411.png" alt="36"></p><p>CodeRunner插件的一些优化：</p><p>点击vscode左下角的齿轮图标点击设置即可进入设置页面，此时你可以点击右上角多出来的文件图标查看设置配置的setting.json文件（看一下就行，看完关掉）。</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011407201.png" alt="44"></p><p>依次搜索runInTerminal（翻译：是否在终端运行，在输出运行界面好看但只输出不能输入且显示不限行数，在终端运行可输入输出但界面丑显示有最大行数限制，我个人是不开启平常在输出运行想要在终端运行时右键在终端运行即可）、saveFileBeforeRun、clearPreviousOutput、fileDirectoryAsCwd、executorMap，具体功能看英文名字也好了解，想具体了解的自行百度、必应与谷歌一下。其中executorMap打开json粘贴以下代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;code-runner.executorMap&quot;: &#123;</span><br><span class="line">        &quot;python&quot;: &quot;set PYTHONIOENCODING=utf-8 &amp;&amp; python -u&quot;,</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011410177.png" alt="37"></p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011410541.png" alt="38"></p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011411951.png" alt="39"></p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011411866.png" alt="40"></p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011411500.png" alt="43"></p><p>自动编码识别：防止以后打开文件是乱码，开启自动识别编码</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011411101.png" alt="42"></p><p>Python插件设置以当前运行文件夹为运行工作位置，防止后面学习文件与文件之间相互找不到。</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011411068.png" alt="41"></p><p>最后为了验证你设置的正不正确可以重新打开设置右上角的setting.json文件，你会发现你刚刚设置的其实都是编辑这个文件，编辑后的文件应该是一下内容，可自行对照，直接复制粘贴进去也行。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;files.autoSave&quot;</span>: <span class="string">&quot;afterDelay&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code-runner.saveFileBeforeRun&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;code-runner.clearPreviousOutput&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;code-runner.fileDirectoryAsCwd&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;python.terminal.executeInFileDir&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;files.autoGuessEncoding&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;code-runner.runInTerminal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;code-runner.executorMap&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;python&quot;</span>: <span class="string">&quot;set PYTHONIOENCODING=utf-8 &amp;&amp; python -u&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>增强代码提示功能——安装aixcoder插件：经管院学子学编程不像信科院专业，vscode的代码提示功能有点差，还是推荐安装这款插件来提升你的码代码的效率。总的来说就是vscode插件商店搜索该插件安装，然后后台还会安装一个大数据+机器学习算法的软件来检测你的代码编辑习惯来精准提示你想要的代码，用得越多和你贴合度也就越多，具体安装教程可以看<a href="https://www.bilibili.com/video/BV1o44y1e77C/">miniconda+vscode+aixcoder+git配置</a>视频中的aixcode安装</p></li><li><p>Jupyter Notebook的使用，数据分析常常用到该编辑软件，你可以在开始界面的Anaconda文件下的Jupyter Notebook快捷方式打开，它会打开一个类似cmd的窗口（不能关闭，关闭意味着软件关闭），然后打开浏览器的<a href="http://localhost:8888/tree">http://localhost:8888/tree</a> 网口，其实就是用户文件目录的位置，我们找到刚刚桌面的test文件夹然后打开新建一个python文件，英文输入print(‘hello world’)点击工具栏的运行按钮即可运行。</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011536668.png" alt="48"></p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011535096.png" alt="49"></p></li><li><p>Jupyter Lab的使用，就是Jupyter Notebook升级版，可以打开anaconda里选择Jupyter Lab打开，但是anaconda打开实在太慢了，我们直接Win+R快捷键打开cmd命令行，输入Jupyter Lab即可快速打开。</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011535557.png" alt="50"></p></li></ol><h2 id="PIP换源、Python第三方扩展包和库的安装"><a href="#PIP换源、Python第三方扩展包和库的安装" class="headerlink" title="PIP换源、Python第三方扩展包和库的安装"></a>PIP换源、Python第三方扩展包和库的安装</h2><p>python之所以非常火的一个原因是它含有丰富的第三方扩展包，比如要爬虫就可以用ullib、requests包等，数据清晰与分析就有numpy、pandas，数据可视化就有matplotlib、pyecharts等，数据储存就有mysql、pymongo包等……那么，怎么安装呢？</p><p>百度一下你会发现要先安装pip（包管理器），然后命令安装pip install +包名，例如我要爬虫就要cmd输入如下命令，但是你会发现很慢因为是从国外网站下的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>解决方法：Anaconda自带pip所以我们不用额外安装，接下来就是将国外的源换成国内就行了。打开<a href="https://mirror.tuna.tsinghua.edu.cn/help/pypi/">清华大学开源软件镜像站-PYPI</a>，然后Win+R快捷键打开cmd命令行，将代码一行一行复制然后在cmd右键粘贴回车运行，最后运行安装requests的命令发现有清华的网址即证明换源完成。你会发现Requirement already satisfied意思是已经安装了要安装的包，这是因为Anaconda不但自带PIP还自带一些常用的第三方扩展包，但是安装的方法我们还是要会的，因为毕竟咱不能保证学习只用到大众用的包吧？</p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202201011506618.png" alt="47"></p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>经过以上的安装和配置，并且成功运行python文件打印hello world，配置好环境你就可以开始上手python学习了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Anaconda-VScode简便舒适轻量级Python环境搭建&quot;&gt;&lt;a href=&quot;#Anaconda-VScode简便舒适轻量级Python环境搭建&quot; class=&quot;headerlink&quot; title=&quot;Anaconda+VScode简便舒适轻量级Python</summary>
      
    
    
    
    <category term="Python" scheme="https://zhangkh.top/categories/Python/"/>
    
    
    <category term="Python" scheme="https://zhangkh.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python数据挖掘方法与应用</title>
    <link href="https://zhangkh.top/aa19c552.html"/>
    <id>https://zhangkh.top/aa19c552.html</id>
    <published>2021-12-10T06:39:34.000Z</published>
    <updated>2021-12-10T06:56:15.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python数据挖掘方法与应用"><a href="#Python数据挖掘方法与应用" class="headerlink" title="Python数据挖掘方法与应用"></a>Python数据挖掘方法与应用</h1><p><a href="http://rstat.leanote.com/cate/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%BA%94%E7%94%A8">Python数据挖掘方法与应用</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 系统初始化</span></span><br><span class="line"><span class="comment"># run PyDm_fun.py</span></span><br><span class="line"><span class="keyword">from</span> PyDm_fun <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 读数据csv（本地）</span></span><br><span class="line"><span class="comment">#BSdata=pd.read_csv(&#x27;BSdata.csv&#x27;,encoding=&#x27;utf-8&#x27;); BSdata[:6]</span></span><br><span class="line"><span class="comment">### 读数据csv（云端）</span></span><br><span class="line"><span class="comment">#url1=&#x27;http://leanote.com/api/file/getAttach?fileId=5abbb388ab6441507e002161&#x27;</span></span><br><span class="line"><span class="comment">#dat1=pd.read_csv(url1,encoding=&#x27;utf-8&#x27;); dat1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 读数据xlsx（本地）</span></span><br><span class="line">BSdata=pd.read_excel(<span class="string">&#x27;PyDm_data.xlsx&#x27;</span>,<span class="string">&#x27;BSdata&#x27;</span>); BSdata[:<span class="number">6</span>]</span><br><span class="line"><span class="comment">### 读数据csv（云端）</span></span><br><span class="line"><span class="comment">#url2=&#x27;http://leanote.com/api/file/getAttach?fileId=5abbb3aaab6441507e002167&#x27;</span></span><br><span class="line"><span class="comment">#dat2=pd.read_excel(url2,&#x27;BSdata&#x27;); dat2</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1510248008</td>      <td>女</td>      <td>167</td>      <td>71</td>      <td>46.0</td>      <td>不清楚</td>      <td>都未学过</td>      <td>No</td>    </tr>    <tr>      <th>1</th>      <td>1510229019</td>      <td>男</td>      <td>171</td>      <td>68</td>      <td>10.4</td>      <td>有必要</td>      <td>概率统计</td>      <td>Matlab</td>    </tr>    <tr>      <th>2</th>      <td>1512108019</td>      <td>女</td>      <td>175</td>      <td>73</td>      <td>21.0</td>      <td>有必要</td>      <td>统计方法</td>      <td>SPSS</td>    </tr>    <tr>      <th>3</th>      <td>1512332010</td>      <td>男</td>      <td>169</td>      <td>74</td>      <td>4.9</td>      <td>有必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>    <tr>      <th>4</th>      <td>1512331015</td>      <td>男</td>      <td>154</td>      <td>55</td>      <td>25.9</td>      <td>有必要</td>      <td>都学习过</td>      <td>Python</td>    </tr>    <tr>      <th>5</th>      <td>1516248014</td>      <td>男</td>      <td>183</td>      <td>76</td>      <td>85.6</td>      <td>不必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>  </tbody></table></div><h1 id="第1章-数据收集与软件应用"><a href="#第1章-数据收集与软件应用" class="headerlink" title="第1章 数据收集与软件应用"></a>第1章 数据收集与软件应用</h1><h2 id="1-3-Python编程基础"><a href="#1-3-Python编程基础" class="headerlink" title="1.3 Python编程基础"></a>1.3 Python编程基础</h2><h4 id="1-3-1-1-Python的工作目录"><a href="#1-3-1-1-Python的工作目录" class="headerlink" title="1.3.1.1 Python的工作目录"></a>1.3.1.1 Python的工作目录</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;获得当前目录&#x27;&#x27;&#x27;</span></span><br><span class="line">%pwd</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;改变工作目录&#x27;&#x27;&#x27;</span></span><br><span class="line">%cd <span class="string">&quot;C:\Users\kit\Desktop\PyDmDC&quot;</span></span><br><span class="line">%pwd</span><br><span class="line"></span><br><span class="line">!<span class="built_in">dir</span></span><br></pre></td></tr></table></figure><pre><code>&#39;获得当前目录&#39;&#39;C:\\Users\\kit\\Desktop\\PyDmDC&#39;&#39;改变工作目录&#39;C:\Users\kit\Desktop\PyDmDC&#39;C:\\Users\\kit\\Desktop\\PyDmDC&#39; ������ C �еľ��� win10_ltsc �������к��� DA1F-F808 C:\Users\kit\Desktop\PyDmDC ��Ŀ¼2021/12/10  11:29    &lt;DIR&gt;          .2021/12/10  11:29    &lt;DIR&gt;          ..2021/12/08  18:16    &lt;DIR&gt;          .ipynb_checkpoints2021/12/08  19:04             3,102 BSdata1.csv2021/12/10  11:29         2,244,373 code.ipynb2021/12/10  11:18             7,243 LJdata.xlsx2021/12/09  18:20            41,788 PyDm_code.py2018/06/11  19:02         1,310,252 PyDm_data.xlsx2019/02/15  10:49           788,384 PyDm_exer.xlsx2021/12/10  11:17             8,322 PyDm_fun.py2021/12/10  14:30    &lt;DIR&gt;          __pycache__               7 ���ļ�      4,403,464 �ֽ�               4 ��Ŀ¼ 28,721,434,624 �����ֽ�</code></pre><h3 id="1-3-2-Python基本数据类型"><a href="#1-3-2-Python基本数据类型" class="headerlink" title="1.3.2 Python基本数据类型"></a>1.3.2 Python基本数据类型</h3><h4 id="1-3-2-1-数据对象及类型"><a href="#1-3-2-1-数据对象及类型" class="headerlink" title="1.3.2.1 数据对象及类型"></a>1.3.2.1 数据对象及类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列举当前环境中的对象名</span></span><br><span class="line"><span class="comment"># who</span></span><br><span class="line">x=<span class="number">10</span>   <span class="comment">#创建对象x</span></span><br><span class="line"><span class="comment"># whos</span></span><br><span class="line"><span class="keyword">del</span> x   <span class="comment">#删除对象x</span></span><br><span class="line"><span class="comment"># who_ls</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2-2-数据基本类型"><a href="#1-3-2-2-数据基本类型" class="headerlink" title="1.3.2.2 数据基本类型"></a>1.3.2.2 数据基本类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数字</span></span><br><span class="line">n=<span class="number">10</span>       <span class="comment">#整数</span></span><br><span class="line">n</span><br><span class="line">print(<span class="string">&quot;n=&quot;</span>,n)</span><br></pre></td></tr></table></figure><pre><code>10n= 10</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">10.234</span>   <span class="comment">#实数</span></span><br><span class="line">x</span><br><span class="line">print(<span class="string">&quot;x=%10.5f&quot;</span>%x)</span><br></pre></td></tr></table></figure><pre><code>10.234x=  10.23400</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="literal">True</span>;a</span><br><span class="line">b=<span class="literal">False</span>;b</span><br><span class="line"><span class="number">10</span>&gt;<span class="number">3</span></span><br><span class="line"><span class="number">10</span>&lt;<span class="number">3</span></span><br></pre></td></tr></table></figure><pre><code>TrueFalseTrueFalse</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串</span></span><br><span class="line">s = <span class="string">&#x27;I love Python&#x27;</span>;s</span><br><span class="line">s[<span class="number">7</span>]</span><br><span class="line">s[<span class="number">2</span>:<span class="number">6</span>]</span><br><span class="line">s+s</span><br><span class="line">s*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">float</span>(<span class="string">&#x27;nan&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>&#39;I love Python&#39;&#39;P&#39;&#39;love&#39;&#39;I love PythonI love Python&#39;&#39;I love PythonI love Python&#39;nan</code></pre><h4 id="1-3-3-3-标准数据类型"><a href="#1-3-3-3-标准数据类型" class="headerlink" title="1.3.3.3 标准数据类型"></a>1.3.3.3 标准数据类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）List（列表）</span></span><br><span class="line">list1 =[] <span class="comment"># 空列表</span></span><br><span class="line">list1</span><br><span class="line">list1 = [<span class="string">&#x27;Python&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;R&#x27;</span>, <span class="number">70.2</span>]</span><br><span class="line">list1 <span class="comment"># 输出完整列表</span></span><br><span class="line">list1[<span class="number">0</span>] <span class="comment"># 输出列表的第一个元素</span></span><br><span class="line">list1[<span class="number">1</span>:<span class="number">3</span>] <span class="comment"># 输出第二个至第三个元素</span></span><br><span class="line">list1[<span class="number">2</span>:] <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line">list1 * <span class="number">2</span> <span class="comment"># 输出列表两次</span></span><br><span class="line">list1 + list1[<span class="number">2</span>:<span class="number">4</span>] <span class="comment"># 打印组合的列表</span></span><br><span class="line"></span><br><span class="line">X=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>]; X</span><br><span class="line">sex=[<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;男&#x27;</span>]</span><br><span class="line">sex</span><br><span class="line">weight=[<span class="number">67</span>,<span class="number">66</span>,<span class="number">83</span>,<span class="number">68</span>,<span class="number">70</span>];</span><br><span class="line">weight</span><br></pre></td></tr></table></figure><pre><code>[][&#39;Python&#39;, 786, 2.23, &#39;R&#39;, 70.2]&#39;Python&#39;[786, 2.23][2.23, &#39;R&#39;, 70.2][&#39;Python&#39;, 786, 2.23, &#39;R&#39;, 70.2, &#39;Python&#39;, 786, 2.23, &#39;R&#39;, 70.2][&#39;Python&#39;, 786, 2.23, &#39;R&#39;, 70.2, 2.23, &#39;R&#39;][1, 3, 6, 4, 9][&#39;女&#39;, &#39;男&#39;, &#39;男&#39;, &#39;女&#39;, &#39;男&#39;][67, 66, 83, 68, 70]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）Tuple（元组）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#（3）Dictionary（字典）</span></span><br><span class="line"><span class="comment">#字典</span></span><br><span class="line">&#123;&#125;            <span class="comment">#空字典</span></span><br><span class="line">dict1=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">6734</span>,<span class="string">&#x27;dept&#x27;</span>:<span class="string">&#x27;sales&#x27;</span>&#125;;dict1 <span class="comment">#定义字典</span></span><br><span class="line">dict1[<span class="string">&#x27;code&#x27;</span>]  <span class="comment"># 输出键为&#x27;code&#x27; 的值</span></span><br><span class="line">dict1.keys()   <span class="comment"># 输出所有键</span></span><br><span class="line">dict1.values() <span class="comment"># 输出所有值</span></span><br><span class="line"></span><br><span class="line">dict2=&#123;<span class="string">&#x27;sex&#x27;</span>: sex,<span class="string">&#x27;weight&#x27;</span>:weight&#125;; dict2 <span class="comment">#根据列表构成字典</span></span><br></pre></td></tr></table></figure><pre><code>&#123;&#125;&#123;&#39;name&#39;: &#39;john&#39;, &#39;code&#39;: 6734, &#39;dept&#39;: &#39;sales&#39;&#125;6734dict_keys([&#39;name&#39;, &#39;code&#39;, &#39;dept&#39;])dict_values([&#39;john&#39;, 6734, &#39;sales&#39;])&#123;&#39;sex&#39;: [&#39;女&#39;, &#39;男&#39;, &#39;男&#39;, &#39;女&#39;, &#39;男&#39;], &#39;weight&#39;: [67, 66, 83, 68, 70]&#125;</code></pre><h3 id="1-3-3-数值分析库numpy"><a href="#1-3-3-数值分析库numpy" class="headerlink" title="1.3.3 数值分析库numpy"></a>1.3.3 数值分析库numpy</h3><h4 id="1-3-3-1-一维数组"><a href="#1-3-3-1-一维数组" class="headerlink" title="1.3.3.1 一维数组"></a>1.3.3.1 一维数组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np       <span class="comment">#加载数组包</span></span><br><span class="line">np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])         <span class="comment">#一维数组</span></span><br><span class="line">np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,np.nan,<span class="number">5</span>])    <span class="comment">#包含缺失值的数组</span></span><br><span class="line"></span><br><span class="line">np.arange(<span class="number">9</span>)             <span class="comment">#数组序列</span></span><br><span class="line">np.arange(<span class="number">1</span>,<span class="number">9</span>,<span class="number">0.5</span>)       <span class="comment">#等差数列</span></span><br><span class="line">np.linspace(<span class="number">1</span>,<span class="number">9</span>,<span class="number">5</span>)       <span class="comment">#等距数列</span></span><br><span class="line"></span><br><span class="line">np.random.randint(<span class="number">1</span>,<span class="number">9</span>)   <span class="comment">#1~9随机数</span></span><br><span class="line">np.random.rand(<span class="number">10</span>)       <span class="comment">#10个均匀随机数</span></span><br><span class="line">np.random.randn(<span class="number">10</span>)      <span class="comment">#10个正态随机数</span></span><br></pre></td></tr></table></figure><pre><code>array([1, 2, 3, 4, 5])array([ 1.,  2.,  3., nan,  5.])array([0, 1, 2, 3, 4, 5, 6, 7, 8])array([1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5, 5. , 5.5, 6. , 6.5, 7. ,       7.5, 8. , 8.5])array([1., 3., 5., 7., 9.])6array([0.583 , 0.5229, 0.9432, 0.8141, 0.8852, 0.591 , 0.3953, 0.5766,       0.5802, 0.5793])array([-0.226 ,  0.3343, -0.064 , -1.2475,  0.2884,  0.6884,  1.5187,        0.2326, -0.6825,  0.0741])</code></pre><h4 id="1-3-3-2-二维数组"><a href="#1-3-3-2-二维数组" class="headerlink" title="1.3.3.2 二维数组"></a>1.3.3.2 二维数组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]])   <span class="comment">#二维数组</span></span><br></pre></td></tr></table></figure><pre><code>array([[1, 2],       [3, 4],       [5, 6]])</code></pre><h4 id="1-3-3-3-数组的基本操作"><a href="#1-3-3-3-数组的基本操作" class="headerlink" title="1.3.3.3. 数组的基本操作"></a>1.3.3.3. 数组的基本操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A=np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>);A        <span class="comment">#形成矩阵</span></span><br><span class="line">A.shape</span><br><span class="line">np.empty([<span class="number">3</span>,<span class="number">3</span>]) <span class="comment">#空数组</span></span><br><span class="line">np.zeros((<span class="number">3</span>,<span class="number">3</span>)) <span class="comment">#零矩阵</span></span><br><span class="line">np.ones((<span class="number">3</span>,<span class="number">3</span>))  <span class="comment">#1矩阵</span></span><br><span class="line">np.eye(<span class="number">3</span>) <span class="comment">#单位阵</span></span><br></pre></td></tr></table></figure><pre><code>array([[0, 1, 2],       [3, 4, 5],       [6, 7, 8]])(3, 3)array([[0.0000e+000, 0.0000e+000, 0.0000e+000],       [0.0000e+000, 0.0000e+000, 1.7391e-320],       [8.3445e-308, 2.1432e-312, 3.6248e+228]])array([[0., 0., 0.],       [0., 0., 0.],       [0., 0., 0.]])array([[1., 1., 1.],       [1., 1., 1.],       [1., 1., 1.]])array([[1., 0., 0.],       [0., 1., 0.],       [0., 0., 1.]])</code></pre><h3 id="1-3-4-数据分析库pandas"><a href="#1-3-4-数据分析库pandas" class="headerlink" title="1.3.4 数据分析库pandas"></a>1.3.4 数据分析库pandas</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd   <span class="comment">#加载数据分析包</span></span><br></pre></td></tr></table></figure><h4 id="1-3-4-1-序列-Seriers"><a href="#1-3-4-1-序列-Seriers" class="headerlink" title="1.3.4.1 序列: Seriers"></a>1.3.4.1 序列: Seriers</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）创建序列（向量、一维数组）</span></span><br><span class="line">pd.Series()           <span class="comment">#生成空序列</span></span><br><span class="line">X=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>]</span><br><span class="line">S1=pd.Series(X);S1</span><br><span class="line">S2=pd.Series(weight);S2</span><br><span class="line">S3=pd.Series(sex);S3</span><br></pre></td></tr></table></figure><pre><code>C:\Users\kit\AppData\Local\Temp/ipykernel_2184/269180152.py:2: DeprecationWarning: The default dtype for empty Series will be &#39;object&#39; instead of &#39;float64&#39; in a future version. Specify a dtype explicitly to silence this warning.  pd.Series()           #生成空序列Series([], dtype: float64)0    11    32    63    44    9dtype: int640    671    662    833    684    70dtype: int640    女1    男2    男3    女4    男dtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([S2,S3],axis=<span class="number">0</span>)    <span class="comment">#按行并序列</span></span><br><span class="line">pd.concat([S2,S3],axis=<span class="number">1</span>)    <span class="comment">#按列并序列</span></span><br></pre></td></tr></table></figure><pre><code>0    671    662    833    684    700     女1     男2     男3     女4     男dtype: object</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>67</td>      <td>女</td>    </tr>    <tr>      <th>1</th>      <td>66</td>      <td>男</td>    </tr>    <tr>      <th>2</th>      <td>83</td>      <td>男</td>    </tr>    <tr>      <th>3</th>      <td>68</td>      <td>女</td>    </tr>    <tr>      <th>4</th>      <td>70</td>      <td>男</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S1[<span class="number">2</span>]</span><br><span class="line">S3[<span class="number">1</span>:<span class="number">4</span>]</span><br></pre></td></tr></table></figure><pre><code>61    男2    男3    女dtype: object</code></pre><h4 id="1-3-4-2-数据框-DataFrame"><a href="#1-3-4-2-数据框-DataFrame" class="headerlink" title="1.3.4.2 数据框: DataFrame"></a>1.3.4.2 数据框: DataFrame</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）根据列表创建数据框</span></span><br><span class="line">pd.DataFrame()      <span class="comment">#生成空数据框</span></span><br><span class="line">pd.DataFrame(X, columns=[<span class="string">&#x27;X&#x27;</span>], index=<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line">pd.DataFrame(weight,columns=[<span class="string">&#x27;weight&#x27;</span>], index=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>])</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>    </tr>  </thead>  <tbody>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>6</td>    </tr>    <tr>      <th>3</th>      <td>4</td>    </tr>    <tr>      <th>4</th>      <td>9</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>weight</th>    </tr>  </thead>  <tbody>    <tr>      <th>A</th>      <td>67</td>    </tr>    <tr>      <th>B</th>      <td>66</td>    </tr>    <tr>      <th>C</th>      <td>83</td>    </tr>    <tr>      <th>D</th>      <td>68</td>    </tr>    <tr>      <th>E</th>      <td>70</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）根据字典创建数据框</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;通过字典列表生成数据框是Python较快捷的方式 &#x27;&#x27;&#x27;</span></span><br><span class="line">df1=pd.DataFrame(&#123;<span class="string">&#x27;S1&#x27;</span>:S1,<span class="string">&#x27;S2&#x27;</span>:S2,<span class="string">&#x27;S3&#x27;</span>:S3&#125;);df1</span><br><span class="line">df2=pd.DataFrame(&#123;<span class="string">&#x27;sex&#x27;</span>:sex,<span class="string">&#x27;weight&#x27;</span>:weight&#125;,index=X);df2</span><br></pre></td></tr></table></figure><pre><code>&#39;通过字典列表生成数据框是Python较快捷的方式 &#39;</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>S1</th>      <th>S2</th>      <th>S3</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>67</td>      <td>女</td>    </tr>    <tr>      <th>1</th>      <td>3</td>      <td>66</td>      <td>男</td>    </tr>    <tr>      <th>2</th>      <td>6</td>      <td>83</td>      <td>男</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>68</td>      <td>女</td>    </tr>    <tr>      <th>4</th>      <td>9</td>      <td>70</td>      <td>男</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>sex</th>      <th>weight</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>女</td>      <td>67</td>    </tr>    <tr>      <th>3</th>      <td>男</td>      <td>66</td>    </tr>    <tr>      <th>6</th>      <td>男</td>      <td>83</td>    </tr>    <tr>      <th>4</th>      <td>女</td>      <td>68</td>    </tr>    <tr>      <th>9</th>      <td>男</td>      <td>70</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）增加数据框列</span></span><br><span class="line">df2[<span class="string">&#x27;weight2&#x27;</span>]=df2.weight**<span class="number">2</span>; df2   <span class="comment"># 生成新列</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>sex</th>      <th>weight</th>      <th>weight2</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>女</td>      <td>67</td>      <td>4489</td>    </tr>    <tr>      <th>3</th>      <td>男</td>      <td>66</td>      <td>4356</td>    </tr>    <tr>      <th>6</th>      <td>男</td>      <td>83</td>      <td>6889</td>    </tr>    <tr>      <th>4</th>      <td>女</td>      <td>68</td>      <td>4624</td>    </tr>    <tr>      <th>9</th>      <td>男</td>      <td>70</td>      <td>4900</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）删除数据框列</span></span><br><span class="line"><span class="keyword">del</span> df2[<span class="string">&#x27;weight2&#x27;</span>]; df2   <span class="comment">#删除数据列</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>sex</th>      <th>weight</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>女</td>      <td>67</td>    </tr>    <tr>      <th>3</th>      <td>男</td>      <td>66</td>    </tr>    <tr>      <th>6</th>      <td>男</td>      <td>83</td>    </tr>    <tr>      <th>4</th>      <td>女</td>      <td>68</td>    </tr>    <tr>      <th>9</th>      <td>男</td>      <td>70</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df3=pd.DataFrame(&#123;<span class="string">&#x27;S2&#x27;</span>:S2,<span class="string">&#x27;S3&#x27;</span>:S3&#125;,index=S1);df3</span><br><span class="line"></span><br><span class="line">df3.isnull()<span class="comment">#是缺失值返回True，否则范围False</span></span><br><span class="line">df3.isnull().<span class="built_in">sum</span>()<span class="comment">#返回每列包含的缺失值的个数</span></span><br><span class="line">df3.dropna()   <span class="comment">#直接删除含有缺失值的行，多变量谨慎使用</span></span><br><span class="line"><span class="comment">#df3.dropna(how = &#x27;all&#x27;)#只删除全是缺失值的行</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>S2</th>      <th>S3</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>66.0</td>      <td>男</td>    </tr>    <tr>      <th>3</th>      <td>68.0</td>      <td>女</td>    </tr>    <tr>      <th>6</th>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>4</th>      <td>70.0</td>      <td>男</td>    </tr>    <tr>      <th>9</th>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>S2</th>      <th>S3</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>False</td>      <td>False</td>    </tr>    <tr>      <th>3</th>      <td>False</td>      <td>False</td>    </tr>    <tr>      <th>6</th>      <td>True</td>      <td>True</td>    </tr>    <tr>      <th>4</th>      <td>False</td>      <td>False</td>    </tr>    <tr>      <th>9</th>      <td>True</td>      <td>True</td>    </tr>  </tbody></table></div><pre><code>S2    2S3    2dtype: int64</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>S2</th>      <th>S3</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>66.0</td>      <td>男</td>    </tr>    <tr>      <th>3</th>      <td>68.0</td>      <td>女</td>    </tr>    <tr>      <th>4</th>      <td>70.0</td>      <td>男</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（5）数据框排序</span></span><br><span class="line">df3.sort_index()         <span class="comment">#按index排序</span></span><br><span class="line">df3.sort_values(by=<span class="string">&#x27;S3&#x27;</span>) <span class="comment">#按列值排序</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>S2</th>      <th>S3</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>66.0</td>      <td>男</td>    </tr>    <tr>      <th>3</th>      <td>68.0</td>      <td>女</td>    </tr>    <tr>      <th>4</th>      <td>70.0</td>      <td>男</td>    </tr>    <tr>      <th>6</th>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>9</th>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>S2</th>      <th>S3</th>    </tr>  </thead>  <tbody>    <tr>      <th>3</th>      <td>68.0</td>      <td>女</td>    </tr>    <tr>      <th>1</th>      <td>66.0</td>      <td>男</td>    </tr>    <tr>      <th>4</th>      <td>70.0</td>      <td>男</td>    </tr>    <tr>      <th>6</th>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>9</th>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table></div><h4 id="1-3-4-3-数据框的读和写"><a href="#1-3-4-3-数据框的读和写" class="headerlink" title="1.3.4.3 数据框的读和写"></a>1.3.4.3 数据框的读和写</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）pandas读取数据集</span></span><br><span class="line"><span class="comment">#BSdata=pd.read_clipboard();BSdata[:5]  #从剪切板上复制数据</span></span><br><span class="line"><span class="comment"># BSdata=pd.read_csv(&quot;BSdata.csv&quot;,encoding=&#x27;utf-8&#x27;);BSdata[6:9]</span></span><br><span class="line">BSdata=pd.read_excel(<span class="string">&#x27;PyDm_data.xlsx&#x27;</span>,<span class="string">&#x27;BSdata&#x27;</span>);BSdata[-<span class="number">5</span>:]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>47</th>      <td>1538319004</td>      <td>男</td>      <td>175</td>      <td>68</td>      <td>44.4</td>      <td>不清楚</td>      <td>统计方法</td>      <td>SAS</td>    </tr>    <tr>      <th>48</th>      <td>1538254010</td>      <td>女</td>      <td>166</td>      <td>65</td>      <td>5.3</td>      <td>不清楚</td>      <td>编程技术</td>      <td>Python</td>    </tr>    <tr>      <th>49</th>      <td>1540294017</td>      <td>女</td>      <td>159</td>      <td>58</td>      <td>71.4</td>      <td>不清楚</td>      <td>都学习过</td>      <td>SPSS</td>    </tr>    <tr>      <th>50</th>      <td>1540365026</td>      <td>女</td>      <td>169</td>      <td>73</td>      <td>5.5</td>      <td>有必要</td>      <td>统计方法</td>      <td>Excel</td>    </tr>    <tr>      <th>51</th>      <td>1540388036</td>      <td>女</td>      <td>165</td>      <td>67</td>      <td>56.8</td>      <td>不必要</td>      <td>概率统计</td>      <td>SAS</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）pandas数据集的保存</span></span><br><span class="line">BSdata.to_csv(<span class="string">&#x27;BSdata1.csv&#x27;</span>) <span class="comment"># 将数据框BSdata存 保存到 到BSdata.csv</span></span><br></pre></td></tr></table></figure><h4 id="1-3-4-4-数据框的操作"><a href="#1-3-4-4-数据框的操作" class="headerlink" title="1.3.4.4 数据框的操作"></a>1.3.4.4 数据框的操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）获取数据框的基本信息</span></span><br><span class="line">BSdata.info()            <span class="comment">#数据框信息</span></span><br><span class="line"></span><br><span class="line">BSdata.head()            <span class="comment">#显示前5行</span></span><br><span class="line">BSdata.tail()            <span class="comment">#显示后5行</span></span><br><span class="line">BSdata.columns           <span class="comment">#查看列名称</span></span><br><span class="line"></span><br><span class="line">BSdata.index             <span class="comment">#数据框行名</span></span><br><span class="line">BSdata.values            <span class="comment">#数据框值数组</span></span><br><span class="line">BSdata.shape             <span class="comment">#显示数据框的行数和列数</span></span><br><span class="line">BSdata.shape[<span class="number">0</span>]          <span class="comment">#数据框行数</span></span><br><span class="line">BSdata.shape[<span class="number">1</span>]          <span class="comment">#数据框列数</span></span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 52 entries, 0 to 51Data columns (total 8 columns): #   Column  Non-Null Count  Dtype  ---  ------  --------------  -----   0   学号      52 non-null     int64   1   性别      52 non-null     object  2   身高      52 non-null     int64   3   体重      52 non-null     int64   4   支出      52 non-null     float64 5   开设      52 non-null     object  6   课程      52 non-null     object  7   软件      52 non-null     object dtypes: float64(1), int64(3), object(4)memory usage: 3.4+ KB</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1510248008</td>      <td>女</td>      <td>167</td>      <td>71</td>      <td>46.0</td>      <td>不清楚</td>      <td>都未学过</td>      <td>No</td>    </tr>    <tr>      <th>1</th>      <td>1510229019</td>      <td>男</td>      <td>171</td>      <td>68</td>      <td>10.4</td>      <td>有必要</td>      <td>概率统计</td>      <td>Matlab</td>    </tr>    <tr>      <th>2</th>      <td>1512108019</td>      <td>女</td>      <td>175</td>      <td>73</td>      <td>21.0</td>      <td>有必要</td>      <td>统计方法</td>      <td>SPSS</td>    </tr>    <tr>      <th>3</th>      <td>1512332010</td>      <td>男</td>      <td>169</td>      <td>74</td>      <td>4.9</td>      <td>有必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>    <tr>      <th>4</th>      <td>1512331015</td>      <td>男</td>      <td>154</td>      <td>55</td>      <td>25.9</td>      <td>有必要</td>      <td>都学习过</td>      <td>Python</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>47</th>      <td>1538319004</td>      <td>男</td>      <td>175</td>      <td>68</td>      <td>44.4</td>      <td>不清楚</td>      <td>统计方法</td>      <td>SAS</td>    </tr>    <tr>      <th>48</th>      <td>1538254010</td>      <td>女</td>      <td>166</td>      <td>65</td>      <td>5.3</td>      <td>不清楚</td>      <td>编程技术</td>      <td>Python</td>    </tr>    <tr>      <th>49</th>      <td>1540294017</td>      <td>女</td>      <td>159</td>      <td>58</td>      <td>71.4</td>      <td>不清楚</td>      <td>都学习过</td>      <td>SPSS</td>    </tr>    <tr>      <th>50</th>      <td>1540365026</td>      <td>女</td>      <td>169</td>      <td>73</td>      <td>5.5</td>      <td>有必要</td>      <td>统计方法</td>      <td>Excel</td>    </tr>    <tr>      <th>51</th>      <td>1540388036</td>      <td>女</td>      <td>165</td>      <td>67</td>      <td>56.8</td>      <td>不必要</td>      <td>概率统计</td>      <td>SAS</td>    </tr>  </tbody></table></div><pre><code>Index([&#39;学号&#39;, &#39;性别&#39;, &#39;身高&#39;, &#39;体重&#39;, &#39;支出&#39;, &#39;开设&#39;, &#39;课程&#39;, &#39;软件&#39;], dtype=&#39;object&#39;)RangeIndex(start=0, stop=52, step=1)array([[1510248008, &#39;女&#39;, 167, 71, 46.0, &#39;不清楚&#39;, &#39;都未学过&#39;, &#39;No&#39;],       [1510229019, &#39;男&#39;, 171, 68, 10.4, &#39;有必要&#39;, &#39;概率统计&#39;, &#39;Matlab&#39;],       [1512108019, &#39;女&#39;, 175, 73, 21.0, &#39;有必要&#39;, &#39;统计方法&#39;, &#39;SPSS&#39;],       [1512332010, &#39;男&#39;, 169, 74, 4.9, &#39;有必要&#39;, &#39;编程技术&#39;, &#39;Excel&#39;],       [1512331015, &#39;男&#39;, 154, 55, 25.9, &#39;有必要&#39;, &#39;都学习过&#39;, &#39;Python&#39;],       [1516248014, &#39;男&#39;, 183, 76, 85.6, &#39;不必要&#39;, &#39;编程技术&#39;, &#39;Excel&#39;],       [1516352030, &#39;女&#39;, 169, 71, 9.1, &#39;有必要&#39;, &#39;编程技术&#39;, &#39;Excel&#39;],       [1516171019, &#39;女&#39;, 166, 66, 2.5, &#39;不必要&#39;, &#39;都未学过&#39;, &#39;Excel&#39;],       [1516391008, &#39;女&#39;, 165, 69, 35.6, &#39;不必要&#39;, &#39;都未学过&#39;, &#39;Excel&#39;],       [1520395019, &#39;男&#39;, 173, 63, 22.8, &#39;有必要&#39;, &#39;统计方法&#39;, &#39;R&#39;],       [1520100029, &#39;男&#39;, 184, 82, 10.3, &#39;有必要&#39;, &#39;都学习过&#39;, &#39;SAS&#39;],       [1520324035, &#39;男&#39;, 163, 66, 13.0, &#39;有必要&#39;, &#39;概率统计&#39;, &#39;Matlab&#39;],       [1522186005, &#39;男&#39;, 162, 63, 9.8, &#39;有必要&#39;, &#39;都学习过&#39;, &#39;SPSS&#39;],       [1522160006, &#39;女&#39;, 168, 72, 35.3, &#39;不必要&#39;, &#39;统计方法&#39;, &#39;SPSS&#39;],       [1522274026, &#39;女&#39;, 164, 66, 50.5, &#39;有必要&#39;, &#39;统计方法&#39;, &#39;SPSS&#39;],       [1523376027, &#39;男&#39;, 180, 81, 64.1, &#39;有必要&#39;, &#39;统计方法&#39;, &#39;Excel&#39;],       [1523368030, &#39;女&#39;, 158, 63, 20.6, &#39;不清楚&#39;, &#39;都学习过&#39;, &#39;Excel&#39;],       [1524225006, &#39;男&#39;, 179, 75, 5.8, &#39;有必要&#39;, &#39;编程技术&#39;, &#39;Python&#39;],       [1524105026, &#39;女&#39;, 163, 65, 69.4, &#39;有必要&#39;, &#39;编程技术&#39;, &#39;Python&#39;],       [1524286013, &#39;男&#39;, 160, 62, 4.8, &#39;有必要&#39;, &#39;都未学过&#39;, &#39;R&#39;],       [1525235027, &#39;女&#39;, 168, 70, 8.2, &#39;有必要&#39;, &#39;都学习过&#39;, &#39;R&#39;],       [1525352033, &#39;男&#39;, 185, 83, 5.1, &#39;有必要&#39;, &#39;都学习过&#39;, &#39;SPSS&#39;],       [1526177005, &#39;男&#39;, 174, 76, 15.8, &#39;有必要&#39;, &#39;概率统计&#39;, &#39;Excel&#39;],       [1526196010, &#39;男&#39;, 167, 72, 9.8, &#39;不清楚&#39;, &#39;统计方法&#39;, &#39;SPSS&#39;],       [1527173011, &#39;女&#39;, 160, 62, 11.5, &#39;不必要&#39;, &#39;都学习过&#39;, &#39;Matlab&#39;],       [1527237032, &#39;女&#39;, 163, 65, 19.4, &#39;有必要&#39;, &#39;统计方法&#39;, &#39;R&#39;],       [1527289024, &#39;男&#39;, 155, 50, 10.8, &#39;有必要&#39;, &#39;概率统计&#39;, &#39;SPSS&#39;],       [1529107020, &#39;男&#39;, 178, 78, 8.9, &#39;不清楚&#39;, &#39;概率统计&#39;, &#39;Matlab&#39;],       [1529314037, &#39;男&#39;, 170, 70, 15.1, &#39;有必要&#39;, &#39;概率统计&#39;, &#39;SAS&#39;],       [1529245023, &#39;男&#39;, 164, 58, 21.9, &#39;有必要&#39;, &#39;统计方法&#39;, &#39;Excel&#39;],       [1529365032, &#39;男&#39;, 172, 71, 10.4, &#39;有必要&#39;, &#39;都学习过&#39;, &#39;SPSS&#39;],       [1530273031, &#39;男&#39;, 178, 77, 35.6, &#39;不必要&#39;, &#39;统计方法&#39;, &#39;R&#39;],       [1530243029, &#39;男&#39;, 186, 87, 9.5, &#39;不必要&#39;, &#39;都未学过&#39;, &#39;No&#39;],       [1531364037, &#39;女&#39;, 171, 69, 7.3, &#39;有必要&#39;, &#39;都学习过&#39;, &#39;Excel&#39;],       [1531316038, &#39;女&#39;, 156, 56, 52.8, &#39;有必要&#39;, &#39;统计方法&#39;, &#39;Excel&#39;],       [1532304031, &#39;女&#39;, 166, 68, 47.9, &#39;不清楚&#39;, &#39;统计方法&#39;, &#39;SAS&#39;],       [1532208040, &#39;男&#39;, 176, 78, 75.5, &#39;不必要&#39;, &#39;概率统计&#39;, &#39;Excel&#39;],       [1532292012, &#39;男&#39;, 178, 78, 28.4, &#39;不必要&#39;, &#39;概率统计&#39;, &#39;No&#39;],       [1532185004, &#39;女&#39;, 155, 54, 13.4, &#39;不清楚&#39;, &#39;编程技术&#39;, &#39;Excel&#39;],       [1533219013, &#39;女&#39;, 163, 62, 11.1, &#39;不清楚&#39;, &#39;概率统计&#39;, &#39;Matlab&#39;],       [1533384028, &#39;男&#39;, 158, 60, 6.1, &#39;有必要&#39;, &#39;编程技术&#39;, &#39;R&#39;],       [1533172017, &#39;女&#39;, 167, 68, 27.2, &#39;不必要&#39;, &#39;都未学过&#39;, &#39;Excel&#39;],       [1537288004, &#39;女&#39;, 173, 70, 19.1, &#39;不清楚&#39;, &#39;编程技术&#39;, &#39;Python&#39;],       [1537359035, &#39;女&#39;, 174, 71, 17.6, &#39;不清楚&#39;, &#39;概率统计&#39;, &#39;No&#39;],       [1438391022, &#39;女&#39;, 164, 62, 10.3, &#39;有必要&#39;, &#39;编程技术&#39;, &#39;Python&#39;],       [1538399025, &#39;男&#39;, 169, 65, 9.5, &#39;有必要&#39;, &#39;统计方法&#39;, &#39;SAS&#39;],       [1438120022, &#39;男&#39;, 166, 70, 35.6, &#39;有必要&#39;, &#39;统计方法&#39;, &#39;R&#39;],       [1538319004, &#39;男&#39;, 175, 68, 44.4, &#39;不清楚&#39;, &#39;统计方法&#39;, &#39;SAS&#39;],       [1538254010, &#39;女&#39;, 166, 65, 5.3, &#39;不清楚&#39;, &#39;编程技术&#39;, &#39;Python&#39;],       [1540294017, &#39;女&#39;, 159, 58, 71.4, &#39;不清楚&#39;, &#39;都学习过&#39;, &#39;SPSS&#39;],       [1540365026, &#39;女&#39;, 169, 73, 5.5, &#39;有必要&#39;, &#39;统计方法&#39;, &#39;Excel&#39;],       [1540388036, &#39;女&#39;, 165, 67, 56.8, &#39;不必要&#39;, &#39;概率统计&#39;, &#39;SAS&#39;]],      dtype=object)(52, 8)528</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）选取变量</span></span><br><span class="line">BSdata.性别              <span class="comment">#取一列数据，BSdata[&#x27;性别&#x27;]</span></span><br><span class="line">BSdata[[<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>]]  <span class="comment">#取两列数据</span></span><br><span class="line">BSdata[:<span class="number">3</span>]               <span class="comment">#BSdata.head(3)</span></span><br><span class="line">BSdata.loc[:<span class="number">3</span>,[<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>]]</span><br><span class="line">BSdata.iloc[:<span class="number">3</span>,:<span class="number">5</span>]       <span class="comment">#0到2行和1:5列数据</span></span><br></pre></td></tr></table></figure><pre><code>0     女1     男2     女3     男4     男5     男6     女7     女8     女9     男10    男11    男12    男13    女14    女15    男16    女17    男18    女19    男20    女21    男22    男23    男24    女25    女26    男27    男28    男29    男30    男31    男32    男33    女34    女35    女36    男37    男38    女39    女40    男41    女42    女43    女44    女45    男46    男47    男48    女49    女50    女51    女Name: 性别, dtype: object</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>身高</th>      <th>体重</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>167</td>      <td>71</td>    </tr>    <tr>      <th>1</th>      <td>171</td>      <td>68</td>    </tr>    <tr>      <th>2</th>      <td>175</td>      <td>73</td>    </tr>    <tr>      <th>3</th>      <td>169</td>      <td>74</td>    </tr>    <tr>      <th>4</th>      <td>154</td>      <td>55</td>    </tr>    <tr>      <th>5</th>      <td>183</td>      <td>76</td>    </tr>    <tr>      <th>6</th>      <td>169</td>      <td>71</td>    </tr>    <tr>      <th>7</th>      <td>166</td>      <td>66</td>    </tr>    <tr>      <th>8</th>      <td>165</td>      <td>69</td>    </tr>    <tr>      <th>9</th>      <td>173</td>      <td>63</td>    </tr>    <tr>      <th>10</th>      <td>184</td>      <td>82</td>    </tr>    <tr>      <th>11</th>      <td>163</td>      <td>66</td>    </tr>    <tr>      <th>12</th>      <td>162</td>      <td>63</td>    </tr>    <tr>      <th>13</th>      <td>168</td>      <td>72</td>    </tr>    <tr>      <th>14</th>      <td>164</td>      <td>66</td>    </tr>    <tr>      <th>15</th>      <td>180</td>      <td>81</td>    </tr>    <tr>      <th>16</th>      <td>158</td>      <td>63</td>    </tr>    <tr>      <th>17</th>      <td>179</td>      <td>75</td>    </tr>    <tr>      <th>18</th>      <td>163</td>      <td>65</td>    </tr>    <tr>      <th>19</th>      <td>160</td>      <td>62</td>    </tr>    <tr>      <th>20</th>      <td>168</td>      <td>70</td>    </tr>    <tr>      <th>21</th>      <td>185</td>      <td>83</td>    </tr>    <tr>      <th>22</th>      <td>174</td>      <td>76</td>    </tr>    <tr>      <th>23</th>      <td>167</td>      <td>72</td>    </tr>    <tr>      <th>24</th>      <td>160</td>      <td>62</td>    </tr>    <tr>      <th>25</th>      <td>163</td>      <td>65</td>    </tr>    <tr>      <th>26</th>      <td>155</td>      <td>50</td>    </tr>    <tr>      <th>27</th>      <td>178</td>      <td>78</td>    </tr>    <tr>      <th>28</th>      <td>170</td>      <td>70</td>    </tr>    <tr>      <th>29</th>      <td>164</td>      <td>58</td>    </tr>    <tr>      <th>30</th>      <td>172</td>      <td>71</td>    </tr>    <tr>      <th>31</th>      <td>178</td>      <td>77</td>    </tr>    <tr>      <th>32</th>      <td>186</td>      <td>87</td>    </tr>    <tr>      <th>33</th>      <td>171</td>      <td>69</td>    </tr>    <tr>      <th>34</th>      <td>156</td>      <td>56</td>    </tr>    <tr>      <th>35</th>      <td>166</td>      <td>68</td>    </tr>    <tr>      <th>36</th>      <td>176</td>      <td>78</td>    </tr>    <tr>      <th>37</th>      <td>178</td>      <td>78</td>    </tr>    <tr>      <th>38</th>      <td>155</td>      <td>54</td>    </tr>    <tr>      <th>39</th>      <td>163</td>      <td>62</td>    </tr>    <tr>      <th>40</th>      <td>158</td>      <td>60</td>    </tr>    <tr>      <th>41</th>      <td>167</td>      <td>68</td>    </tr>    <tr>      <th>42</th>      <td>173</td>      <td>70</td>    </tr>    <tr>      <th>43</th>      <td>174</td>      <td>71</td>    </tr>    <tr>      <th>44</th>      <td>164</td>      <td>62</td>    </tr>    <tr>      <th>45</th>      <td>169</td>      <td>65</td>    </tr>    <tr>      <th>46</th>      <td>166</td>      <td>70</td>    </tr>    <tr>      <th>47</th>      <td>175</td>      <td>68</td>    </tr>    <tr>      <th>48</th>      <td>166</td>      <td>65</td>    </tr>    <tr>      <th>49</th>      <td>159</td>      <td>58</td>    </tr>    <tr>      <th>50</th>      <td>169</td>      <td>73</td>    </tr>    <tr>      <th>51</th>      <td>165</td>      <td>67</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1510248008</td>      <td>女</td>      <td>167</td>      <td>71</td>      <td>46.0</td>      <td>不清楚</td>      <td>都未学过</td>      <td>No</td>    </tr>    <tr>      <th>1</th>      <td>1510229019</td>      <td>男</td>      <td>171</td>      <td>68</td>      <td>10.4</td>      <td>有必要</td>      <td>概率统计</td>      <td>Matlab</td>    </tr>    <tr>      <th>2</th>      <td>1512108019</td>      <td>女</td>      <td>175</td>      <td>73</td>      <td>21.0</td>      <td>有必要</td>      <td>统计方法</td>      <td>SPSS</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>身高</th>      <th>体重</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>167</td>      <td>71</td>    </tr>    <tr>      <th>1</th>      <td>171</td>      <td>68</td>    </tr>    <tr>      <th>2</th>      <td>175</td>      <td>73</td>    </tr>    <tr>      <th>3</th>      <td>169</td>      <td>74</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1510248008</td>      <td>女</td>      <td>167</td>      <td>71</td>      <td>46.0</td>    </tr>    <tr>      <th>1</th>      <td>1510229019</td>      <td>男</td>      <td>171</td>      <td>68</td>      <td>10.4</td>    </tr>    <tr>      <th>2</th>      <td>1512108019</td>      <td>女</td>      <td>175</td>      <td>73</td>      <td>21.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）选取观测与变量</span></span><br><span class="line">BSdata.loc[:<span class="number">3</span>,[<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>]]</span><br><span class="line">BSdata.iloc[:<span class="number">3</span>,:<span class="number">5</span>]       <span class="comment">#0到2行和1:5列数据</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>身高</th>      <th>体重</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>167</td>      <td>71</td>    </tr>    <tr>      <th>1</th>      <td>171</td>      <td>68</td>    </tr>    <tr>      <th>2</th>      <td>175</td>      <td>73</td>    </tr>    <tr>      <th>3</th>      <td>169</td>      <td>74</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1510248008</td>      <td>女</td>      <td>167</td>      <td>71</td>      <td>46.0</td>    </tr>    <tr>      <th>1</th>      <td>1510229019</td>      <td>男</td>      <td>171</td>      <td>68</td>      <td>10.4</td>    </tr>    <tr>      <th>2</th>      <td>1512108019</td>      <td>女</td>      <td>175</td>      <td>73</td>      <td>21.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）根据条件选取样品与变量</span></span><br><span class="line">BSdata[BSdata[<span class="string">&#x27;身高&#x27;</span>]&gt;<span class="number">180</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>5</th>      <td>1516248014</td>      <td>男</td>      <td>183</td>      <td>76</td>      <td>85.6</td>      <td>不必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>    <tr>      <th>10</th>      <td>1520100029</td>      <td>男</td>      <td>184</td>      <td>82</td>      <td>10.3</td>      <td>有必要</td>      <td>都学习过</td>      <td>SAS</td>    </tr>    <tr>      <th>21</th>      <td>1525352033</td>      <td>男</td>      <td>185</td>      <td>83</td>      <td>5.1</td>      <td>有必要</td>      <td>都学习过</td>      <td>SPSS</td>    </tr>    <tr>      <th>32</th>      <td>1530243029</td>      <td>男</td>      <td>186</td>      <td>87</td>      <td>9.5</td>      <td>不必要</td>      <td>都未学过</td>      <td>No</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (5) query法</span></span><br><span class="line">BSdata.query(<span class="string">&#x27;身高&gt;180&#x27;</span>)</span><br><span class="line">BSdata.query(<span class="string">&#x27;身高&gt;180 and 体重&gt;80&#x27;</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>5</th>      <td>1516248014</td>      <td>男</td>      <td>183</td>      <td>76</td>      <td>85.6</td>      <td>不必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>    <tr>      <th>10</th>      <td>1520100029</td>      <td>男</td>      <td>184</td>      <td>82</td>      <td>10.3</td>      <td>有必要</td>      <td>都学习过</td>      <td>SAS</td>    </tr>    <tr>      <th>21</th>      <td>1525352033</td>      <td>男</td>      <td>185</td>      <td>83</td>      <td>5.1</td>      <td>有必要</td>      <td>都学习过</td>      <td>SPSS</td>    </tr>    <tr>      <th>32</th>      <td>1530243029</td>      <td>男</td>      <td>186</td>      <td>87</td>      <td>9.5</td>      <td>不必要</td>      <td>都未学过</td>      <td>No</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>10</th>      <td>1520100029</td>      <td>男</td>      <td>184</td>      <td>82</td>      <td>10.3</td>      <td>有必要</td>      <td>都学习过</td>      <td>SAS</td>    </tr>    <tr>      <th>21</th>      <td>1525352033</td>      <td>男</td>      <td>185</td>      <td>83</td>      <td>5.1</td>      <td>有必要</td>      <td>都学习过</td>      <td>SPSS</td>    </tr>    <tr>      <th>32</th>      <td>1530243029</td>      <td>男</td>      <td>186</td>      <td>87</td>      <td>9.5</td>      <td>不必要</td>      <td>都未学过</td>      <td>No</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（6）数据框的运算</span></span><br><span class="line">BSdata[<span class="string">&#x27;体重指数&#x27;</span>]=BSdata[<span class="string">&#x27;体重&#x27;</span>]/(BSdata[<span class="string">&#x27;身高&#x27;</span>]/<span class="number">100</span>)**<span class="number">2</span></span><br><span class="line"><span class="built_in">round</span>(BSdata[:<span class="number">5</span>],<span class="number">2</span>)</span><br><span class="line"><span class="keyword">del</span> BSdata[<span class="string">&#x27;体重指数&#x27;</span>]   <span class="comment">#删除数据列</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>      <th>体重指数</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1510248008</td>      <td>女</td>      <td>167</td>      <td>71</td>      <td>46.0</td>      <td>不清楚</td>      <td>都未学过</td>      <td>No</td>      <td>25.46</td>    </tr>    <tr>      <th>1</th>      <td>1510229019</td>      <td>男</td>      <td>171</td>      <td>68</td>      <td>10.4</td>      <td>有必要</td>      <td>概率统计</td>      <td>Matlab</td>      <td>23.26</td>    </tr>    <tr>      <th>2</th>      <td>1512108019</td>      <td>女</td>      <td>175</td>      <td>73</td>      <td>21.0</td>      <td>有必要</td>      <td>统计方法</td>      <td>SPSS</td>      <td>23.84</td>    </tr>    <tr>      <th>3</th>      <td>1512332010</td>      <td>男</td>      <td>169</td>      <td>74</td>      <td>4.9</td>      <td>有必要</td>      <td>编程技术</td>      <td>Excel</td>      <td>25.91</td>    </tr>    <tr>      <th>4</th>      <td>1512331015</td>      <td>男</td>      <td>154</td>      <td>55</td>      <td>25.9</td>      <td>有必要</td>      <td>都学习过</td>      <td>Python</td>      <td>23.19</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([BSdata.身高, BSdata.体重],axis=<span class="number">0</span>)</span><br><span class="line">pd.concat([BSdata.身高, BSdata.体重],axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>0     1671     1712     1753     1694     154     ... 47     6848     6549     5850     7351     67Length: 104, dtype: int64</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>身高</th>      <th>体重</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>167</td>      <td>71</td>    </tr>    <tr>      <th>1</th>      <td>171</td>      <td>68</td>    </tr>    <tr>      <th>2</th>      <td>175</td>      <td>73</td>    </tr>    <tr>      <th>3</th>      <td>169</td>      <td>74</td>    </tr>    <tr>      <th>4</th>      <td>154</td>      <td>55</td>    </tr>    <tr>      <th>5</th>      <td>183</td>      <td>76</td>    </tr>    <tr>      <th>6</th>      <td>169</td>      <td>71</td>    </tr>    <tr>      <th>7</th>      <td>166</td>      <td>66</td>    </tr>    <tr>      <th>8</th>      <td>165</td>      <td>69</td>    </tr>    <tr>      <th>9</th>      <td>173</td>      <td>63</td>    </tr>    <tr>      <th>10</th>      <td>184</td>      <td>82</td>    </tr>    <tr>      <th>11</th>      <td>163</td>      <td>66</td>    </tr>    <tr>      <th>12</th>      <td>162</td>      <td>63</td>    </tr>    <tr>      <th>13</th>      <td>168</td>      <td>72</td>    </tr>    <tr>      <th>14</th>      <td>164</td>      <td>66</td>    </tr>    <tr>      <th>15</th>      <td>180</td>      <td>81</td>    </tr>    <tr>      <th>16</th>      <td>158</td>      <td>63</td>    </tr>    <tr>      <th>17</th>      <td>179</td>      <td>75</td>    </tr>    <tr>      <th>18</th>      <td>163</td>      <td>65</td>    </tr>    <tr>      <th>19</th>      <td>160</td>      <td>62</td>    </tr>    <tr>      <th>20</th>      <td>168</td>      <td>70</td>    </tr>    <tr>      <th>21</th>      <td>185</td>      <td>83</td>    </tr>    <tr>      <th>22</th>      <td>174</td>      <td>76</td>    </tr>    <tr>      <th>23</th>      <td>167</td>      <td>72</td>    </tr>    <tr>      <th>24</th>      <td>160</td>      <td>62</td>    </tr>    <tr>      <th>25</th>      <td>163</td>      <td>65</td>    </tr>    <tr>      <th>26</th>      <td>155</td>      <td>50</td>    </tr>    <tr>      <th>27</th>      <td>178</td>      <td>78</td>    </tr>    <tr>      <th>28</th>      <td>170</td>      <td>70</td>    </tr>    <tr>      <th>29</th>      <td>164</td>      <td>58</td>    </tr>    <tr>      <th>30</th>      <td>172</td>      <td>71</td>    </tr>    <tr>      <th>31</th>      <td>178</td>      <td>77</td>    </tr>    <tr>      <th>32</th>      <td>186</td>      <td>87</td>    </tr>    <tr>      <th>33</th>      <td>171</td>      <td>69</td>    </tr>    <tr>      <th>34</th>      <td>156</td>      <td>56</td>    </tr>    <tr>      <th>35</th>      <td>166</td>      <td>68</td>    </tr>    <tr>      <th>36</th>      <td>176</td>      <td>78</td>    </tr>    <tr>      <th>37</th>      <td>178</td>      <td>78</td>    </tr>    <tr>      <th>38</th>      <td>155</td>      <td>54</td>    </tr>    <tr>      <th>39</th>      <td>163</td>      <td>62</td>    </tr>    <tr>      <th>40</th>      <td>158</td>      <td>60</td>    </tr>    <tr>      <th>41</th>      <td>167</td>      <td>68</td>    </tr>    <tr>      <th>42</th>      <td>173</td>      <td>70</td>    </tr>    <tr>      <th>43</th>      <td>174</td>      <td>71</td>    </tr>    <tr>      <th>44</th>      <td>164</td>      <td>62</td>    </tr>    <tr>      <th>45</th>      <td>169</td>      <td>65</td>    </tr>    <tr>      <th>46</th>      <td>166</td>      <td>70</td>    </tr>    <tr>      <th>47</th>      <td>175</td>      <td>68</td>    </tr>    <tr>      <th>48</th>      <td>166</td>      <td>65</td>    </tr>    <tr>      <th>49</th>      <td>159</td>      <td>58</td>    </tr>    <tr>      <th>50</th>      <td>169</td>      <td>73</td>    </tr>    <tr>      <th>51</th>      <td>165</td>      <td>67</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.iloc[:<span class="number">3</span>,:<span class="number">5</span>].T</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>    </tr>  </thead>  <tbody>    <tr>      <th>学号</th>      <td>1510248008</td>      <td>1510229019</td>      <td>1512108019</td>    </tr>    <tr>      <th>性别</th>      <td>女</td>      <td>男</td>      <td>女</td>    </tr>    <tr>      <th>身高</th>      <td>167</td>      <td>171</td>      <td>175</td>    </tr>    <tr>      <th>体重</th>      <td>71</td>      <td>68</td>      <td>73</td>    </tr>    <tr>      <th>支出</th>      <td>46.0</td>      <td>10.4</td>      <td>21.0</td>    </tr>  </tbody></table></div><h3 id="1-3-3-Python编程运算"><a href="#1-3-3-Python编程运算" class="headerlink" title="1.3.3 Python编程运算"></a>1.3.3 Python编程运算</h3><h4 id="1-3-3-1-基本运算"><a href="#1-3-3-1-基本运算" class="headerlink" title="1.3.3.1 基本运算"></a>1.3.3.1 基本运算</h4><h4 id="1-3-3-2-控制语句"><a href="#1-3-3-2-控制语句" class="headerlink" title="1.3.3.2 控制语句"></a>1.3.3.2 控制语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）循环语句for</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">     print(i)</span><br><span class="line"></span><br><span class="line">fruits = [<span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>,  <span class="string">&#x27;mango&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> fruits:</span><br><span class="line">   print(<span class="string">&#x27;当前水果 :&#x27;</span>, fruit)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">15</span>):</span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> BSdata.columns:</span><br><span class="line">    print(var)</span><br></pre></td></tr></table></figure><pre><code>1234当前水果 : banana当前水果 : apple当前水果 : mango1011121314学号性别身高体重支出开设课程软件</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）条件语句if/else</span></span><br><span class="line">a = -<span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> a &lt; <span class="number">100</span>:</span><br><span class="line">    print(<span class="string">&quot;数值小于100&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;数值大于100&quot;</span>)</span><br><span class="line"></span><br><span class="line">-a <span class="keyword">if</span> a&lt;<span class="number">0</span> <span class="keyword">else</span> a</span><br></pre></td></tr></table></figure><pre><code>数值小于100100</code></pre><h4 id="1-3-3-3-函数定义"><a href="#1-3-3-3-函数定义" class="headerlink" title="1.3.3.3 函数定义"></a>1.3.3.3 函数定义</h4><h4 id="1-3-3-4-面向对象"><a href="#1-3-3-4-面向对象" class="headerlink" title="1.3.3.4 面向对象"></a>1.3.3.4 面向对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">2</span>]; x</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xbar</span>(<span class="params">x</span>):</span></span><br><span class="line">    n=<span class="built_in">len</span>(x)</span><br><span class="line">    xm=<span class="built_in">sum</span>(x)/n</span><br><span class="line">    <span class="keyword">return</span>(xm)</span><br><span class="line">xbar(x)</span><br></pre></td></tr></table></figure><pre><code>[1, 3, 6, 4, 9, 7, 5, 8, 2]5.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">np.mean(x)</span><br><span class="line"></span><br><span class="line">X=np.array([<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">2</span>]);X <span class="comment"># 列表数组</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SS1</span>(<span class="params">x</span>):</span></span><br><span class="line">    n=<span class="built_in">len</span>(x)</span><br><span class="line">    ss=<span class="built_in">sum</span>(x**<span class="number">2</span>)-<span class="built_in">sum</span>(x)**<span class="number">2</span>/n</span><br><span class="line">    <span class="keyword">return</span>(ss)</span><br><span class="line">SS1(X) <span class="comment">#SS1(BSdata. 身高)</span></span><br></pre></td></tr></table></figure><pre><code>5.0array([1, 3, 6, 4, 9, 7, 5, 8, 2])60.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SS2</span>(<span class="params">x</span>):</span> <span class="comment"># 返回多个值</span></span><br><span class="line">    n=<span class="built_in">len</span>(x)</span><br><span class="line">    xm=<span class="built_in">sum</span>(x)/n</span><br><span class="line">    ss=<span class="built_in">sum</span>(x**<span class="number">2</span>)-<span class="built_in">sum</span>(x)**<span class="number">2</span>/n</span><br><span class="line">    <span class="keyword">return</span>[x**<span class="number">2</span>,n,xm,ss] <span class="comment">#return(x**2,n,xm,ss)</span></span><br><span class="line">SS2(X) <span class="comment">#SS2(BSdata. 身高)</span></span><br><span class="line">SS2(X)[<span class="number">0</span>] <span class="comment"># 取第1 个对象</span></span><br><span class="line">SS2(X)[<span class="number">1</span>] <span class="comment"># 取第2 个对象</span></span><br><span class="line">SS2(X)[<span class="number">2</span>] <span class="comment"># 取第3 个对象</span></span><br><span class="line">SS2(X)[<span class="number">3</span>] <span class="comment"># 取第4 个对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span>(SS2(X))</span><br><span class="line"><span class="built_in">type</span>(SS2(X)[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><pre><code>[array([ 1,  9, 36, 16, 81, 49, 25, 64,  4], dtype=int32), 9, 5.0, 60.0]array([ 1,  9, 36, 16, 81, 49, 25, 64,  4], dtype=int32)95.060.0listnumpy.float64</code></pre><h1 id="第2章-探索性数据分析"><a href="#第2章-探索性数据分析" class="headerlink" title="第2章 探索性数据分析"></a>第2章 探索性数据分析</h1><h2 id="2-1-数据的描述统计"><a href="#2-1-数据的描述统计" class="headerlink" title="2.1 数据的描述统计"></a>2.1 数据的描述统计</h2><h3 id="2-1-1-基本统计量"><a href="#2-1-1-基本统计量" class="headerlink" title="2.1.1 基本统计量"></a>2.1.1 基本统计量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BSdata.describe()</span><br><span class="line">BSdata[[<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;开设&#x27;</span>,<span class="string">&#x27;课程&#x27;</span>,<span class="string">&#x27;软件&#x27;</span>]].describe()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>5.2000e+01</td>      <td>52.0000</td>      <td>52.0000</td>      <td>52.0000</td>    </tr>    <tr>      <th>mean</th>      <td>1.5233e+09</td>      <td>168.5192</td>      <td>68.5000</td>      <td>24.5115</td>    </tr>    <tr>      <th>std</th>      <td>1.8995e+07</td>      <td>8.0183</td>      <td>7.7117</td>      <td>21.4321</td>    </tr>    <tr>      <th>min</th>      <td>1.4381e+09</td>      <td>154.0000</td>      <td>50.0000</td>      <td>2.5000</td>    </tr>    <tr>      <th>25%</th>      <td>1.5204e+09</td>      <td>163.0000</td>      <td>63.0000</td>      <td>9.5000</td>    </tr>    <tr>      <th>50%</th>      <td>1.5267e+09</td>      <td>167.5000</td>      <td>68.5000</td>      <td>15.4500</td>    </tr>    <tr>      <th>75%</th>      <td>1.5322e+09</td>      <td>174.0000</td>      <td>73.0000</td>      <td>35.6000</td>    </tr>    <tr>      <th>max</th>      <td>1.5404e+09</td>      <td>186.0000</td>      <td>87.0000</td>      <td>85.6000</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>性别</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>52</td>      <td>52</td>      <td>52</td>      <td>52</td>    </tr>    <tr>      <th>unique</th>      <td>2</td>      <td>3</td>      <td>5</td>      <td>7</td>    </tr>    <tr>      <th>top</th>      <td>男</td>      <td>有必要</td>      <td>统计方法</td>      <td>Excel</td>    </tr>    <tr>      <th>freq</th>      <td>27</td>      <td>29</td>      <td>15</td>      <td>15</td>    </tr>  </tbody></table></div><h4 id="2-1-1-1-计数数据的汇总分析"><a href="#2-1-1-1-计数数据的汇总分析" class="headerlink" title="2.1.1.1 计数数据的汇总分析"></a>2.1.1.1 计数数据的汇总分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）频数：绝对数</span></span><br><span class="line">T1=BSdata.性别.value_counts();T1</span><br></pre></td></tr></table></figure><pre><code>男    27女    25Name: 性别, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）频率：相对数</span></span><br><span class="line">T1/<span class="built_in">sum</span>(T1)*<span class="number">100</span></span><br></pre></td></tr></table></figure><pre><code>男    51.9231女    48.0769Name: 性别, dtype: float64</code></pre><h4 id="2-1-1-2-计量数据的汇总分析"><a href="#2-1-1-2-计量数据的汇总分析" class="headerlink" title="2.1.1.2 计量数据的汇总分析"></a>2.1.1.2 计量数据的汇总分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）均数（算术平均数）</span></span><br><span class="line">BSdata.身高.mean()</span><br><span class="line"><span class="comment">#（2）中位数</span></span><br><span class="line">BSdata.身高.median()</span><br><span class="line"><span class="comment">#（3）极差</span></span><br><span class="line">BSdata.身高.<span class="built_in">max</span>()-BSdata.身高.<span class="built_in">min</span>()</span><br><span class="line"><span class="comment">#（4）方差</span></span><br><span class="line">BSdata.身高.var()</span><br><span class="line"><span class="comment">#（5）标准差</span></span><br><span class="line">BSdata.身高.std()</span><br><span class="line"><span class="comment">#（6）四分位数间距</span></span><br><span class="line">BSdata.身高.quantile(<span class="number">0.75</span>)-BSdata.身高.quantile(<span class="number">0.25</span>)</span><br><span class="line"><span class="comment">#（7）偏度</span></span><br><span class="line">BSdata.身高.skew()</span><br><span class="line"><span class="comment">#（8）峰度</span></span><br><span class="line">BSdata.身高.kurt()</span><br></pre></td></tr></table></figure><pre><code>168.51923076923077167.53264.293740573152358.0183377687119411.00.29880755120910174-0.42072371559816935</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（9）自定义计算基本统计量函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stats</span>(<span class="params">x</span>):</span></span><br><span class="line">    stat=[x.count(),x.<span class="built_in">min</span>(),x.quantile(<span class="number">.25</span>),x.mean(),x.median(),</span><br><span class="line">         x.quantile(<span class="number">.75</span>),x.<span class="built_in">max</span>(),x.<span class="built_in">max</span>()-x.<span class="built_in">min</span>(),x.var(),x.std(),x.skew(),x.kurt()]</span><br><span class="line">    stat=pd.Series(stat,index=[<span class="string">&#x27;Count&#x27;</span>,<span class="string">&#x27;Min&#x27;</span>, <span class="string">&#x27;Q1(25%)&#x27;</span>,<span class="string">&#x27;Mean&#x27;</span>,<span class="string">&#x27;Median&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;Q3(75%)&#x27;</span>,<span class="string">&#x27;Max&#x27;</span>,<span class="string">&#x27;Range&#x27;</span>,<span class="string">&#x27;Var&#x27;</span>,<span class="string">&#x27;Std&#x27;</span>,<span class="string">&#x27;Skew&#x27;</span>,<span class="string">&#x27;Kurt&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span>(stat)</span><br><span class="line">stats(BSdata.身高)</span><br></pre></td></tr></table></figure><pre><code>Count       52.0000Min        154.0000Q1(25%)    163.0000Mean       168.5192Median     167.5000Q3(75%)    174.0000Max        186.0000Range       32.0000Var         64.2937Std          8.0183Skew         0.2988Kurt        -0.4207dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加载自定义函数库</span></span><br><span class="line"><span class="keyword">import</span> PyDm_fun <span class="keyword">as</span> da</span><br><span class="line">da.stats(BSdata.身高)</span><br><span class="line">da.stats(BSdata.支出)</span><br></pre></td></tr></table></figure><pre><code>Count       52.0000Min        154.0000Q1(25%)    163.0000Mean       168.5192Median     167.5000Q3(75%)    174.0000Max        186.0000Range       32.0000Var         64.2937Std          8.0183Skew         0.2988Kurt        -0.4207dtype: float64Count       52.0000Min          2.5000Q1(25%)      9.5000Mean        24.5115Median      15.4500Q3(75%)     35.6000Max         85.6000Range       83.1000Var        459.3332Std         21.4321Skew         1.2684Kurt         0.6731dtype: float64</code></pre><h3 id="2-1-2-基本统计图"><a href="#2-1-2-基本统计图" class="headerlink" title="2.1.2 基本统计图"></a>2.1.2 基本统计图</h3><h4 id="2-1-2-1-matlibplot绘图函数"><a href="#2-1-2-1-matlibplot绘图函数" class="headerlink" title="2.1.2.1 matlibplot绘图函数"></a>2.1.2.1 matlibplot绘图函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt              <span class="comment">#基本绘图包</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;KaiTi&#x27;</span>];   <span class="comment">#SimHei黑体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span>;    <span class="comment">#正常显示图中负号</span></span><br><span class="line">plt.figure(figsize=(<span class="number">5</span>,<span class="number">4</span>));                   <span class="comment">#图形大小</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;本地直接显示图形&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># %matplotlib inline</span></span><br><span class="line"><span class="comment"># plt.render_notebook()</span></span><br></pre></td></tr></table></figure><pre><code>&lt;Figure size 360x288 with 0 Axes&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）常用的统计图函数</span></span><br><span class="line"><span class="comment">#（2）图形参数设置</span></span><br><span class="line"><span class="comment">####二、计数数据的基本统计图</span></span><br><span class="line">X=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>]</span><br><span class="line">Y=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">plt.bar(X,Y); <span class="comment"># 条图</span></span><br><span class="line">plt.pie(Y,labels=X);  <span class="comment"># 饼图</span></span><br></pre></td></tr></table></figure><pre><code>C:\Users\kit\AppData\Local\Temp/ipykernel_2184/3246744030.py:7: MatplotlibDeprecationWarning: Support for passing numbers through unit converters is deprecated since 3.5 and support will be removed two minor releases later; use Axis.convert_units instead.  plt.pie(Y,labels=X);  # 饼图</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101454277.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####三、计量数据的基本统计图</span></span><br><span class="line">plt.plot(X,Y);  <span class="comment">#线图 plot</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441373.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.hist(BSdata.身高)  <span class="comment"># 频数直方图</span></span><br></pre></td></tr></table></figure><pre><code>(array([4., 5., 5., 9., 9., 6., 5., 4., 1., 4.]), array([154. , 157.2, 160.4, 163.6, 166.8, 170. , 173.2, 176.4, 179.6,        182.8, 186. ]), &lt;BarContainer object of 10 artists&gt;)</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441377.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.hist(BSdata.身高,density=<span class="literal">True</span>) <span class="comment"># 频率直方图</span></span><br></pre></td></tr></table></figure><pre><code>(array([0.024 , 0.03  , 0.03  , 0.0541, 0.0541, 0.0361, 0.03  , 0.024 ,        0.006 , 0.024 ]), array([154. , 157.2, 160.4, 163.6, 166.8, 170. , 173.2, 176.4, 179.6,        182.8, 186. ]), &lt;BarContainer object of 10 artists&gt;)</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101454403.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(BSdata.身高, BSdata.体重);  <span class="comment"># 散点图</span></span><br><span class="line">plt.xlabel(<span class="string">u&#x27;身高&#x27;</span>);plt.ylabel(<span class="string">u&#x27;体重&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101454827.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）图形参数设置</span></span><br><span class="line">plt.plot(X,Y,c=<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">plt.ylim(<span class="number">0</span>,<span class="number">8</span>);</span><br><span class="line">plt.xlabel(<span class="string">&#x27;names&#x27;</span>);plt.ylabel(<span class="string">&#x27;values&#x27;</span>);</span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="built_in">len</span>(X)), X);</span><br><span class="line">plt.plot(X,Y,linestyle=<span class="string">&#x27;--&#x27;</span>,marker=<span class="string">&#x27;o&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101453371.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(X,Y,<span class="string">&#x27;o--&#x27;</span>); plt.axvline(x=<span class="number">1</span>);plt.axhline(y=<span class="number">4</span>);</span><br><span class="line"><span class="comment">#plt.vlines(1,0,6,colors=&#x27;r&#x27;);plt.hlines(4,0,6);</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101453620.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(X,Y,label=<span class="string">u&#x27;折线&#x27;</span>);</span><br><span class="line">plt.legend();</span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101453541.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#误差条图</span></span><br><span class="line">s=[<span class="number">0.1</span>,<span class="number">0.4</span>,<span class="number">0.7</span>,<span class="number">0.3</span>,<span class="number">0.2</span>,<span class="number">0.5</span>,<span class="number">0.6</span>]</span><br><span class="line">plt.bar(X,Y,yerr=s,error_kw=&#123;<span class="string">&#x27;capsize&#x27;</span>:<span class="number">5</span>&#125;)</span><br></pre></td></tr></table></figure><pre><code>&lt;BarContainer object of 7 artists&gt;</code></pre><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441254.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）多图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">5</span>,<span class="number">4</span>));</span><br><span class="line">plt.subplot(<span class="number">121</span>); plt.bar(X,Y);</span><br><span class="line">plt.subplot(<span class="number">122</span>); plt.plot(Y);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101453767.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.subplot(<span class="number">211</span>); plt.bar(X,Y);</span><br><span class="line">plt.subplot(<span class="number">212</span>); plt.plot(Y);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441345.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fig,ax = plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">6</span>))</span><br><span class="line">ax[<span class="number">0</span>].bar(X,Y)</span><br><span class="line">ax[<span class="number">1</span>].plot(X,Y)</span><br></pre></td></tr></table></figure><pre><code>&lt;BarContainer object of 7 artists&gt;[&lt;matplotlib.lines.Line2D at 0xd0cd430&gt;]</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441654.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fig,ax=plt.subplots(<span class="number">2</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">12</span>))</span><br><span class="line">ax[<span class="number">0</span>,<span class="number">0</span>].bar(X,Y); ax[<span class="number">0</span>,<span class="number">1</span>].pie(Y,labels=X)</span><br><span class="line">ax[<span class="number">1</span>,<span class="number">0</span>].plot(Y); ax[<span class="number">1</span>,<span class="number">1</span>].plot(Y,<span class="string">&#x27;.-&#x27;</span>,linewidth=<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101453509.png" alt="png"></p><h4 id="2-1-2-2-pandas绘图函数"><a href="#2-1-2-2-pandas绘图函数" class="headerlink" title="2.1.2.2 pandas绘图函数"></a>2.1.2.2 pandas绘图函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[<span class="string">&#x27;体重&#x27;</span>].plot(kind=<span class="string">&#x27;line&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441120.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[<span class="string">&#x27;体重&#x27;</span>].plot(kind=<span class="string">&#x27;hist&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441183.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[<span class="string">&#x27;体重&#x27;</span>].plot(kind=<span class="string">&#x27;box&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101452338.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[<span class="string">&#x27;体重&#x27;</span>].plot(kind=<span class="string">&#x27;density&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441207.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[[<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>,<span class="string">&#x27;支出&#x27;</span>]].plot(subplots=<span class="literal">True</span>,layout=(<span class="number">1</span>,<span class="number">3</span>),kind=<span class="string">&#x27;box&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>身高       AxesSubplot(0.125,0.125;0.227941x0.755)体重    AxesSubplot(0.398529,0.125;0.227941x0.755)支出    AxesSubplot(0.672059,0.125;0.227941x0.755)dtype: object</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441619.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[[<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>,<span class="string">&#x27;支出&#x27;</span>]].plot(subplots=<span class="literal">True</span>,layout=(<span class="number">1</span>,<span class="number">3</span>),kind=<span class="string">&#x27;density&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[&lt;AxesSubplot:ylabel=&#39;Density&#39;&gt;, &lt;AxesSubplot:ylabel=&#39;Density&#39;&gt;,        &lt;AxesSubplot:ylabel=&#39;Density&#39;&gt;]], dtype=object)</code></pre><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101452048.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[[<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>,<span class="string">&#x27;支出&#x27;</span>]].plot(subplots=<span class="literal">True</span>,layout=(<span class="number">3</span>,<span class="number">1</span>),kind=<span class="string">&#x27;density&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[&lt;AxesSubplot:ylabel=&#39;Density&#39;&gt;],       [&lt;AxesSubplot:ylabel=&#39;Density&#39;&gt;],       [&lt;AxesSubplot:ylabel=&#39;Density&#39;&gt;]], dtype=object)</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101452488.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.xlabel(<span class="string">u&#x27;身高&#x27;</span>);plt.ylabel(<span class="string">u&#x27;体重&#x27;</span>);</span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441079.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">T1=BSdata[<span class="string">&#x27;开设&#x27;</span>].value_counts();T1</span><br><span class="line">pd.DataFrame(&#123;<span class="string">&#x27;频数&#x27;</span>:T1,<span class="string">&#x27;频率&#x27;</span>:T1/T1.<span class="built_in">sum</span>()*<span class="number">100</span>&#125;)</span><br><span class="line">T1.plot(kind=<span class="string">&#x27;bar&#x27;</span>); <span class="comment">#T1.sort_values().plot(kind=&#x27;bar&#x27;);</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101452014.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T1.plot(kind=<span class="string">&#x27;pie&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101452471.png" alt="png"></p><h2 id="2-2-数据的分组分析"><a href="#2-2-数据的分组分析" class="headerlink" title="2.2 数据的分组分析"></a>2.2 数据的分组分析</h2><h3 id="2-2-1-频数分析"><a href="#2-2-1-频数分析" class="headerlink" title="2.2.1 频数分析"></a>2.2.1 频数分析</h3><h4 id="2-2-1-1-计数数据的频数分析"><a href="#2-2-1-1-计数数据的频数分析" class="headerlink" title="2.2.1.1 计数数据的频数分析"></a>2.2.1.1 计数数据的频数分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）pivot_table</span></span><br><span class="line">BSdata[<span class="string">&#x27;开设&#x27;</span>].value_counts()</span><br><span class="line">BSdata[<span class="string">&#x27;开设&#x27;</span>].value_counts().plot(kind=<span class="string">&#x27;bar&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>有必要    29不清楚    12不必要    11Name: 开设, dtype: int64&lt;AxesSubplot:&gt;</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441319.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BSdata.pivot_table(values=<span class="string">&#x27;学号&#x27;</span>,index=<span class="string">&#x27;开设&#x27;</span>,aggfunc=<span class="built_in">len</span>)</span><br><span class="line">T1=BSdata[<span class="string">&#x27;开设&#x27;</span>].value_counts();T1</span><br><span class="line">pd.DataFrame(&#123;<span class="string">&#x27;频数&#x27;</span>:T1,<span class="string">&#x27;频率&#x27;</span>:T1/T1.<span class="built_in">sum</span>()*<span class="number">100</span>&#125;)</span><br><span class="line">T1.plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line">T1.plot(kind=<span class="string">&#x27;pie&#x27;</span>);</span><br><span class="line">pd.pivot_table(BSdata,values=<span class="string">&#x27;学号&#x27;</span>,index=<span class="string">&#x27;开设&#x27;</span>,aggfunc=<span class="built_in">len</span>)</span><br><span class="line"><span class="comment">#BSdata.pivot_table(values=&#x27;学号&#x27;,index=&#x27;开设&#x27;,aggfunc=len)</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>    </tr>    <tr>      <th>开设</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>11</td>    </tr>    <tr>      <th>不清楚</th>      <td>12</td>    </tr>    <tr>      <th>有必要</th>      <td>29</td>    </tr>  </tbody></table></div><pre><code>有必要    29不清楚    12不必要    11Name: 开设, dtype: int64</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>频数</th>      <th>频率</th>    </tr>  </thead>  <tbody>    <tr>      <th>有必要</th>      <td>29</td>      <td>55.7692</td>    </tr>    <tr>      <th>不清楚</th>      <td>12</td>      <td>23.0769</td>    </tr>    <tr>      <th>不必要</th>      <td>11</td>      <td>21.1538</td>    </tr>  </tbody></table></div><pre><code>&lt;AxesSubplot:&gt;&lt;AxesSubplot:ylabel=&#39;开设&#39;&gt;</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>    </tr>    <tr>      <th>开设</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>11</td>    </tr>    <tr>      <th>不清楚</th>      <td>12</td>    </tr>    <tr>      <th>有必要</th>      <td>29</td>    </tr>  </tbody></table></div><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101452872.png" alt="png"></p><h4 id="2-2-1-2-计量数据的频数分析"><a href="#2-2-1-2-计量数据的频数分析" class="headerlink" title="2.2.1.2 计量数据的频数分析"></a>2.2.1.2 计量数据的频数分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）身高频数表</span></span><br><span class="line">pd.cut(BSdata.身高,bins=<span class="number">10</span>).value_counts()</span><br><span class="line">pd.cut(BSdata.身高,bins=<span class="number">10</span>).value_counts().plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101451739.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）支出频数表</span></span><br><span class="line">pd.cut(BSdata.支出,bins=[<span class="number">0</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">100</span>]).value_counts()</span><br><span class="line">pd.cut(BSdata.支出,bins=[<span class="number">0</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">100</span>]).value_counts().plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101451636.png" alt="png"></p><h3 id="2-2-2-列联表分析"><a href="#2-2-2-列联表分析" class="headerlink" title="2.2.2 列联表分析"></a>2.2.2 列联表分析</h3><h4 id="2-2-2-1-计数数据的列联表"><a href="#2-2-2-1-计数数据的列联表" class="headerlink" title="2.2.2.1 计数数据的列联表"></a>2.2.2.1 计数数据的列联表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）二维列联表</span></span><br><span class="line">pd.crosstab(BSdata.开设,BSdata.课程)</span><br><span class="line">pd.crosstab(BSdata.开设,BSdata.课程,margins=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>课程</th>      <th>概率统计</th>      <th>统计方法</th>      <th>编程技术</th>      <th>都学习过</th>      <th>都未学过</th>    </tr>    <tr>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>3</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>4</td>    </tr>    <tr>      <th>不清楚</th>      <td>3</td>      <td>3</td>      <td>3</td>      <td>2</td>      <td>1</td>    </tr>    <tr>      <th>有必要</th>      <td>5</td>      <td>10</td>      <td>6</td>      <td>7</td>      <td>1</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>课程</th>      <th>概率统计</th>      <th>统计方法</th>      <th>编程技术</th>      <th>都学习过</th>      <th>都未学过</th>      <th>All</th>    </tr>    <tr>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>3</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>4</td>      <td>11</td>    </tr>    <tr>      <th>不清楚</th>      <td>3</td>      <td>3</td>      <td>3</td>      <td>2</td>      <td>1</td>      <td>12</td>    </tr>    <tr>      <th>有必要</th>      <td>5</td>      <td>10</td>      <td>6</td>      <td>7</td>      <td>1</td>      <td>29</td>    </tr>    <tr>      <th>All</th>      <td>11</td>      <td>15</td>      <td>10</td>      <td>10</td>      <td>6</td>      <td>52</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pd.crosstab(BSdata.开设,BSdata.课程,margins=<span class="literal">True</span>,normalize=<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">pd.crosstab(BSdata.开设,BSdata.课程,margins=<span class="literal">True</span>,normalize=<span class="string">&#x27;columns&#x27;</span>)</span><br><span class="line">pd.crosstab(BSdata.开设,BSdata.课程,margins=<span class="literal">True</span>,normalize=<span class="string">&#x27;all&#x27;</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>课程</th>      <th>概率统计</th>      <th>统计方法</th>      <th>编程技术</th>      <th>都学习过</th>      <th>都未学过</th>    </tr>    <tr>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>0.2727</td>      <td>0.1818</td>      <td>0.0909</td>      <td>0.0909</td>      <td>0.3636</td>    </tr>    <tr>      <th>不清楚</th>      <td>0.2500</td>      <td>0.2500</td>      <td>0.2500</td>      <td>0.1667</td>      <td>0.0833</td>    </tr>    <tr>      <th>有必要</th>      <td>0.1724</td>      <td>0.3448</td>      <td>0.2069</td>      <td>0.2414</td>      <td>0.0345</td>    </tr>    <tr>      <th>All</th>      <td>0.2115</td>      <td>0.2885</td>      <td>0.1923</td>      <td>0.1923</td>      <td>0.1154</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>课程</th>      <th>概率统计</th>      <th>统计方法</th>      <th>编程技术</th>      <th>都学习过</th>      <th>都未学过</th>      <th>All</th>    </tr>    <tr>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>0.2727</td>      <td>0.1333</td>      <td>0.1</td>      <td>0.1</td>      <td>0.6667</td>      <td>0.2115</td>    </tr>    <tr>      <th>不清楚</th>      <td>0.2727</td>      <td>0.2000</td>      <td>0.3</td>      <td>0.2</td>      <td>0.1667</td>      <td>0.2308</td>    </tr>    <tr>      <th>有必要</th>      <td>0.4545</td>      <td>0.6667</td>      <td>0.6</td>      <td>0.7</td>      <td>0.1667</td>      <td>0.5577</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>课程</th>      <th>概率统计</th>      <th>统计方法</th>      <th>编程技术</th>      <th>都学习过</th>      <th>都未学过</th>      <th>All</th>    </tr>    <tr>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>0.0577</td>      <td>0.0385</td>      <td>0.0192</td>      <td>0.0192</td>      <td>0.0769</td>      <td>0.2115</td>    </tr>    <tr>      <th>不清楚</th>      <td>0.0577</td>      <td>0.0577</td>      <td>0.0577</td>      <td>0.0385</td>      <td>0.0192</td>      <td>0.2308</td>    </tr>    <tr>      <th>有必要</th>      <td>0.0962</td>      <td>0.1923</td>      <td>0.1154</td>      <td>0.1346</td>      <td>0.0192</td>      <td>0.5577</td>    </tr>    <tr>      <th>All</th>      <td>0.2115</td>      <td>0.2885</td>      <td>0.1923</td>      <td>0.1923</td>      <td>0.1154</td>      <td>1.0000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BSdata.pivot_table(<span class="string">&#x27;学号&#x27;</span>,<span class="string">&#x27;开设&#x27;</span>,<span class="string">&#x27;课程&#x27;</span>,aggfunc=<span class="built_in">len</span>)</span><br><span class="line">BSdata.pivot_table(<span class="string">&#x27;学号&#x27;</span>,index=<span class="string">&#x27;开设&#x27;</span>,columns=<span class="string">&#x27;课程&#x27;</span>,aggfunc=<span class="built_in">len</span>)</span><br><span class="line">pd.pivot_table(BSdata,values=<span class="string">&#x27;学号&#x27;</span>,index=<span class="string">&#x27;开设&#x27;</span>,columns=<span class="string">&#x27;课程&#x27;</span>,aggfunc=<span class="built_in">len</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>课程</th>      <th>概率统计</th>      <th>统计方法</th>      <th>编程技术</th>      <th>都学习过</th>      <th>都未学过</th>    </tr>    <tr>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>3</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>4</td>    </tr>    <tr>      <th>不清楚</th>      <td>3</td>      <td>3</td>      <td>3</td>      <td>2</td>      <td>1</td>    </tr>    <tr>      <th>有必要</th>      <td>5</td>      <td>10</td>      <td>6</td>      <td>7</td>      <td>1</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>课程</th>      <th>概率统计</th>      <th>统计方法</th>      <th>编程技术</th>      <th>都学习过</th>      <th>都未学过</th>    </tr>    <tr>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>3</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>4</td>    </tr>    <tr>      <th>不清楚</th>      <td>3</td>      <td>3</td>      <td>3</td>      <td>2</td>      <td>1</td>    </tr>    <tr>      <th>有必要</th>      <td>5</td>      <td>10</td>      <td>6</td>      <td>7</td>      <td>1</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>课程</th>      <th>概率统计</th>      <th>统计方法</th>      <th>编程技术</th>      <th>都学习过</th>      <th>都未学过</th>    </tr>    <tr>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>3</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>4</td>    </tr>    <tr>      <th>不清楚</th>      <td>3</td>      <td>3</td>      <td>3</td>      <td>2</td>      <td>1</td>    </tr>    <tr>      <th>有必要</th>      <td>5</td>      <td>10</td>      <td>6</td>      <td>7</td>      <td>1</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）复式条图</span></span><br><span class="line">T2=pd.crosstab(BSdata.开设,BSdata.课程);T2</span><br><span class="line">T2.plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line">T2.plot(kind=<span class="string">&#x27;barh&#x27;</span>);</span><br><span class="line">T2.plot(kind=<span class="string">&#x27;bar&#x27;</span>,stacked=<span class="literal">True</span>);</span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441124.png" alt="png"><br>​    </p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101451639.png" alt="png"></p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441168.png" alt="png"></p><h4 id="2-2-2-2-计量数据的列联表"><a href="#2-2-2-2-计量数据的列联表" class="headerlink" title="2.2.2.2 计量数据的列联表"></a>2.2.2.2 计量数据的列联表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）groupby函数</span></span><br><span class="line">BSdata1=BSdata.iloc[:,<span class="number">2</span>:<span class="number">5</span>];BSdata1.head()</span><br><span class="line">BSdata1.mean()             <span class="comment">#对计量数据求均值</span></span><br><span class="line">BSdata.groupby([<span class="string">&#x27;性别&#x27;</span>])</span><br><span class="line"><span class="built_in">type</span>(BSdata.groupby([<span class="string">&#x27;性别&#x27;</span>]))</span><br><span class="line">BSdata.groupby([<span class="string">&#x27;性别&#x27;</span>])[<span class="string">&#x27;身高&#x27;</span>].mean()</span><br><span class="line">BSdata.groupby([<span class="string">&#x27;性别&#x27;</span>])[<span class="string">&#x27;身高&#x27;</span>].size()</span><br><span class="line">BSdata.groupby([<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;开设&#x27;</span>])[<span class="string">&#x27;身高&#x27;</span>].mean()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>身高</th>      <th>体重</th>      <th>支出</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>167</td>      <td>71</td>      <td>46.0</td>    </tr>    <tr>      <th>1</th>      <td>171</td>      <td>68</td>      <td>10.4</td>    </tr>    <tr>      <th>2</th>      <td>175</td>      <td>73</td>      <td>21.0</td>    </tr>    <tr>      <th>3</th>      <td>169</td>      <td>74</td>      <td>4.9</td>    </tr>    <tr>      <th>4</th>      <td>154</td>      <td>55</td>      <td>25.9</td>    </tr>  </tbody></table></div><pre><code>身高    168.5192体重     68.5000支出     24.5115dtype: float64&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x000000000D894790&gt;pandas.core.groupby.generic.DataFrameGroupBy性别女    165.3600男    171.4444Name: 身高, dtype: float64性别女    25男    27Name: 身高, dtype: int64性别  开设 女   不必要    165.1667    不清楚    164.5556    有必要    166.2000男   不必要    180.2000    不清楚    173.3333    有必要    168.8421Name: 身高, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）agg函数</span></span><br><span class="line">BSdata.groupby([<span class="string">&#x27;性别&#x27;</span>])[<span class="string">&#x27;身高&#x27;</span>].agg([np.mean, np.std])</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>mean</th>      <th>std</th>    </tr>    <tr>      <th>性别</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>女</th>      <td>165.3600</td>      <td>5.1791</td>    </tr>    <tr>      <th>男</th>      <td>171.4444</td>      <td>9.1034</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）应用apply()</span></span><br><span class="line">BSdata.groupby([<span class="string">&#x27;性别&#x27;</span>])[<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>].apply(np.mean)</span><br><span class="line">BSdata.groupby([<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;开设&#x27;</span>])[<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>].apply(np.mean)</span><br></pre></td></tr></table></figure><pre><code>C:\Users\kit\AppData\Local\Temp/ipykernel_2184/1879082383.py:2: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.  BSdata.groupby([&#39;性别&#39;])[&#39;身高&#39;,&#39;体重&#39;].apply(np.mean)</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>身高</th>      <th>体重</th>    </tr>    <tr>      <th>性别</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>女</th>      <td>165.3600</td>      <td>66.2400</td>    </tr>    <tr>      <th>男</th>      <td>171.4444</td>      <td>70.5926</td>    </tr>  </tbody></table></div><pre><code>C:\Users\kit\AppData\Local\Temp/ipykernel_2184/1879082383.py:3: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.  BSdata.groupby([&#39;性别&#39;,&#39;开设&#39;])[&#39;身高&#39;,&#39;体重&#39;].apply(np.mean)</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>身高</th>      <th>体重</th>    </tr>    <tr>      <th>性别</th>      <th>开设</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="3" valign="top">女</th>      <th>不必要</th>      <td>165.1667</td>      <td>67.3333</td>    </tr>    <tr>      <th>不清楚</th>      <td>164.5556</td>      <td>64.6667</td>    </tr>    <tr>      <th>有必要</th>      <td>166.2000</td>      <td>67.0000</td>    </tr>    <tr>      <th rowspan="3" valign="top">男</th>      <th>不必要</th>      <td>180.2000</td>      <td>79.2000</td>    </tr>    <tr>      <th>不清楚</th>      <td>173.3333</td>      <td>72.6667</td>    </tr>    <tr>      <th>有必要</th>      <td>168.8421</td>      <td>68.0000</td>    </tr>  </tbody></table></div><h3 id="2-2-3-透视表分析"><a href="#2-2-3-透视表分析" class="headerlink" title="2.2.3 透视表分析"></a>2.2.3 透视表分析</h3><h4 id="2-2-3-1-计数数据的透视分析"><a href="#2-2-3-1-计数数据的透视分析" class="headerlink" title="2.2.3.1 计数数据的透视分析"></a>2.2.3.1 计数数据的透视分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）pivot_table</span></span><br><span class="line">BSdata.pivot_table(index=[<span class="string">&#x27;性别&#x27;</span>],values=[<span class="string">&#x27;学号&#x27;</span>],aggfunc=<span class="built_in">len</span>)</span><br><span class="line">BSdata.pivot_table(values=[<span class="string">&#x27;学号&#x27;</span>],index=[<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;开设&#x27;</span>],aggfunc=<span class="built_in">len</span>)</span><br><span class="line">BSdata.pivot_table(values=[<span class="string">&#x27;学号&#x27;</span>],index=[<span class="string">&#x27;开设&#x27;</span>],columns=[<span class="string">&#x27;性别&#x27;</span>],aggfunc=<span class="built_in">len</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>    </tr>    <tr>      <th>性别</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>女</th>      <td>25</td>    </tr>    <tr>      <th>男</th>      <td>27</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>学号</th>    </tr>    <tr>      <th>性别</th>      <th>开设</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="3" valign="top">女</th>      <th>不必要</th>      <td>6</td>    </tr>    <tr>      <th>不清楚</th>      <td>9</td>    </tr>    <tr>      <th>有必要</th>      <td>10</td>    </tr>    <tr>      <th rowspan="3" valign="top">男</th>      <th>不必要</th>      <td>5</td>    </tr>    <tr>      <th>不清楚</th>      <td>3</td>    </tr>    <tr>      <th>有必要</th>      <td>19</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th colspan="2" halign="left">学号</th>    </tr>    <tr>      <th>性别</th>      <th>女</th>      <th>男</th>    </tr>    <tr>      <th>开设</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>6</td>      <td>5</td>    </tr>    <tr>      <th>不清楚</th>      <td>9</td>      <td>3</td>    </tr>    <tr>      <th>有必要</th>      <td>10</td>      <td>19</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####2.2.3.2 计量数据的透视分析</span></span><br><span class="line"><span class="comment">#pd.pivot_table(BSdata,index=[&quot;性别&quot;],aggfunc=len)</span></span><br><span class="line">BSdata.pivot_table(index=[<span class="string">&#x27;性别&#x27;</span>],values=[<span class="string">&quot;身高&quot;</span>],aggfunc=np.mean)</span><br><span class="line">BSdata.pivot_table(index=[<span class="string">&#x27;性别&#x27;</span>],values=[<span class="string">&quot;身高&quot;</span>],aggfunc=[np.mean,np.std])</span><br><span class="line">BSdata.pivot_table(index=[<span class="string">&quot;性别&quot;</span>],values=[<span class="string">&quot;身高&quot;</span>,<span class="string">&quot;体重&quot;</span>])</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>身高</th>    </tr>    <tr>      <th>性别</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>女</th>      <td>165.3600</td>    </tr>    <tr>      <th>男</th>      <td>171.4444</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th>mean</th>      <th>std</th>    </tr>    <tr>      <th></th>      <th>身高</th>      <th>身高</th>    </tr>    <tr>      <th>性别</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>女</th>      <td>165.3600</td>      <td>5.1791</td>    </tr>    <tr>      <th>男</th>      <td>171.4444</td>      <td>9.1034</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>体重</th>      <th>身高</th>    </tr>    <tr>      <th>性别</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>女</th>      <td>66.2400</td>      <td>165.3600</td>    </tr>    <tr>      <th>男</th>      <td>70.5926</td>      <td>171.4444</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.2.3.3 复合数据的透视分析</span></span><br><span class="line"><span class="comment">#pd.pivot_table(BSdata,index=[&quot;性别&quot;,&quot;开设&quot;],aggfunc=len,margins=True)</span></span><br><span class="line"><span class="comment">#pd.pivot_table(BSdata,index=[&quot;性别&quot;],aggfunc=np.mean)</span></span><br><span class="line">BSdata.pivot_table(<span class="string">&#x27;学号&#x27;</span>,[<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;开设&#x27;</span>],<span class="string">&#x27;课程&#x27;</span>,aggfunc=<span class="built_in">len</span>,margins=<span class="literal">True</span>,margins_name=<span class="string">&#x27;合计&#x27;</span>)</span><br><span class="line">BSdata.pivot_table([<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>],[<span class="string">&#x27;性别&#x27;</span>,<span class="string">&quot;开设&quot;</span>],aggfunc=[<span class="built_in">len</span>,np.mean,np.std] )</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>课程</th>      <th>概率统计</th>      <th>统计方法</th>      <th>编程技术</th>      <th>都学习过</th>      <th>都未学过</th>      <th>合计</th>    </tr>    <tr>      <th>性别</th>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="3" valign="top">女</th>      <th>不必要</th>      <td>1.0</td>      <td>1.0</td>      <td>NaN</td>      <td>1.0</td>      <td>3.0</td>      <td>6</td>    </tr>    <tr>      <th>不清楚</th>      <td>2.0</td>      <td>1.0</td>      <td>3.0</td>      <td>2.0</td>      <td>1.0</td>      <td>9</td>    </tr>    <tr>      <th>有必要</th>      <td>NaN</td>      <td>5.0</td>      <td>3.0</td>      <td>2.0</td>      <td>NaN</td>      <td>10</td>    </tr>    <tr>      <th rowspan="3" valign="top">男</th>      <th>不必要</th>      <td>2.0</td>      <td>1.0</td>      <td>1.0</td>      <td>NaN</td>      <td>1.0</td>      <td>5</td>    </tr>    <tr>      <th>不清楚</th>      <td>1.0</td>      <td>2.0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>3</td>    </tr>    <tr>      <th>有必要</th>      <td>5.0</td>      <td>5.0</td>      <td>3.0</td>      <td>5.0</td>      <td>1.0</td>      <td>19</td>    </tr>    <tr>      <th>合计</th>      <th></th>      <td>11.0</td>      <td>15.0</td>      <td>10.0</td>      <td>10.0</td>      <td>6.0</td>      <td>52</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th></th>      <th colspan="2" halign="left">len</th>      <th colspan="2" halign="left">mean</th>      <th colspan="2" halign="left">std</th>    </tr>    <tr>      <th></th>      <th></th>      <th>体重</th>      <th>身高</th>      <th>体重</th>      <th>身高</th>      <th>体重</th>      <th>身高</th>    </tr>    <tr>      <th>性别</th>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="3" valign="top">女</th>      <th>不必要</th>      <td>6</td>      <td>6</td>      <td>67.3333</td>      <td>165.1667</td>      <td>3.3267</td>      <td>2.7869</td>    </tr>    <tr>      <th>不清楚</th>      <td>9</td>      <td>9</td>      <td>64.6667</td>      <td>164.5556</td>      <td>6.0000</td>      <td>6.5021</td>    </tr>    <tr>      <th>有必要</th>      <td>10</td>      <td>10</td>      <td>67.0000</td>      <td>166.2000</td>      <td>5.3333</td>      <td>5.3083</td>    </tr>    <tr>      <th rowspan="3" valign="top">男</th>      <th>不必要</th>      <td>5</td>      <td>5</td>      <td>79.2000</td>      <td>180.2000</td>      <td>4.4385</td>      <td>4.1473</td>    </tr>    <tr>      <th>不清楚</th>      <td>3</td>      <td>3</td>      <td>72.6667</td>      <td>173.3333</td>      <td>5.0332</td>      <td>5.6862</td>    </tr>    <tr>      <th>有必要</th>      <td>19</td>      <td>19</td>      <td>68.0000</td>      <td>168.8421</td>      <td>9.1652</td>      <td>9.1242</td>    </tr>  </tbody></table></div><h1 id="第3章-简单数据的统计分析"><a href="#第3章-简单数据的统计分析" class="headerlink" title="第3章 简单数据的统计分析"></a>第3章 简单数据的统计分析</h1><h2 id="3-1-随机变量及其分布"><a href="#3-1-随机变量及其分布" class="headerlink" title="3.1 随机变量及其分布"></a>3.1 随机变量及其分布</h2><h3 id="3-1-1-随机变量及其分布"><a href="#3-1-1-随机变量及其分布" class="headerlink" title="3.1.1 随机变量及其分布"></a>3.1.1 随机变量及其分布</h3><h4 id="3-1-1-1-均匀分布"><a href="#3-1-1-1-均匀分布" class="headerlink" title="3.1.1.1 均匀分布"></a>3.1.1.1 均匀分布</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">0</span>;b=<span class="number">1</span>;y=<span class="number">1</span>/(b-a)</span><br><span class="line">plt.plot(a,y); <span class="comment">#plt.axhlines(y=0,a,b);</span></span><br><span class="line">plt.vlines(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);plt.vlines(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101451844.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####（1）整数随机数</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.randint(<span class="number">10</span>,<span class="number">20</span>)  <span class="comment">#[10,20]上的随机整数</span></span><br></pre></td></tr></table></figure><pre><code>17</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####（2）实数随机数</span></span><br><span class="line">random.uniform(<span class="number">0</span>,<span class="number">1</span>)    <span class="comment">#[0,1]上的随机实数</span></span><br></pre></td></tr></table></figure><pre><code>0.24207888908268027</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####（3）整数随机数列</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.randint(<span class="number">10</span>,<span class="number">21</span>,<span class="number">9</span>)  <span class="comment">#[10,20]上的随机整数</span></span><br></pre></td></tr></table></figure><pre><code>array([10, 16, 11, 17, 13, 20, 17, 14, 18])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####（4）实数随机数列</span></span><br><span class="line">np.random.uniform(<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>)   <span class="comment">#[0,1]上的10个随机实数=np.random.rand(10)</span></span><br></pre></td></tr></table></figure><pre><code>array([0.0165, 0.446 , 0.3757, 0.0783, 0.6474, 0.1734, 0.7809, 0.3352,       0.1861, 0.6524])</code></pre><h4 id="3-1-1-2-正态分布"><a href="#3-1-1-2-正态分布" class="headerlink" title="3.1.1.2 正态分布"></a>3.1.1.2 正态分布</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####（2）标准正态分布</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt,pi   <span class="comment">#调用数学函数，import math as *</span></span><br><span class="line">x=np.linspace(-<span class="number">4</span>,<span class="number">4</span>,<span class="number">50</span>);</span><br><span class="line">y=<span class="number">1</span>/sqrt(<span class="number">2</span>*pi)*np.exp(-x**<span class="number">2</span>/<span class="number">2</span>);</span><br><span class="line">plt.plot(x,y);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441953.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> st  <span class="comment">#加载统计方法包</span></span><br><span class="line">P=st.norm.cdf(<span class="number">2</span>);P</span><br></pre></td></tr></table></figure><pre><code>0.9772498680518208</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;加载自定义库,在当前目录下建立PyDm1func.py函数库即可&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> PyDm_fun <span class="keyword">as</span> da</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;标准正态曲线面积（概率） &#x27;&#x27;&#x27;</span></span><br><span class="line">da.norm_p(-<span class="number">1</span>,<span class="number">1</span>)         <span class="comment">#68.27%</span></span><br><span class="line">da.norm_p(-<span class="number">2</span>,<span class="number">2</span>)         <span class="comment">#94.45%</span></span><br><span class="line">da.norm_p(-<span class="number">1.96</span>,<span class="number">1.96</span>)   <span class="comment">#95%</span></span><br><span class="line">da.norm_p(-<span class="number">3</span>,<span class="number">3</span>)         <span class="comment">#99.73%</span></span><br><span class="line">da.norm_p(-<span class="number">2.58</span>,<span class="number">2.58</span>)   <span class="comment">#99%</span></span><br></pre></td></tr></table></figure><pre><code>&#39;加载自定义库,在当前目录下建立PyDm1func.py函数库即可&#39;&#39;标准正态曲线面积（概率） &#39;</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101449160.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">za=st.norm.ppf(<span class="number">0.95</span>);za   <span class="comment">#单侧</span></span><br><span class="line">[st.norm.ppf(<span class="number">0.025</span>),st.norm.ppf(<span class="number">0.975</span>)]  <span class="comment">#双侧</span></span><br></pre></td></tr></table></figure><pre><code>1.6448536269514722[-1.9599639845400545, 1.959963984540054]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####（3）正态随机数</span></span><br><span class="line">np.random.normal(<span class="number">10</span>,<span class="number">4</span>,<span class="number">5</span>)  <span class="comment">#产生5个均值为10标准差为4的正态随机数</span></span><br><span class="line">np.random.normal(<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>)   <span class="comment">#生成5个标准正态分布随机数</span></span><br></pre></td></tr></table></figure><pre><code>array([ 6.7104, 12.4924,  9.1123, 12.172 ,  6.8497])array([ 0.1288, -0.3154,  0.2946,  0.5009,  0.279 ])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;一页绘制四个正态随机图 &#x27;&#x27;&#x27;</span></span><br><span class="line">fig,ax = plt.subplots(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        ax[i,j].hist(np.random.normal(<span class="number">0</span>,<span class="number">1</span>,<span class="number">500</span>),bins = <span class="number">50</span>)</span><br><span class="line">plt.subplots_adjust(wspace = <span class="number">0</span>,hspace=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>&#39;一页绘制四个正态随机图 &#39;(array([ 1.,  0.,  0.,  0.,  1.,  0.,  0.,  2.,  2.,  2.,  2.,  6.,  5.,         3.,  3.,  6., 11., 14.,  9.,  8., 12., 10., 28., 19., 14., 20.,        22., 32., 30., 18., 27., 31., 13., 21., 21., 22., 14., 13., 11.,         9.,  7.,  9.,  8.,  5.,  4.,  0.,  2.,  1.,  1.,  1.]), array([-3.406 , -3.2871, -3.1683, -3.0494, -2.9305, -2.8117, -2.6928,        -2.5739, -2.4551, -2.3362, -2.2173, -2.0984, -1.9796, -1.8607,        -1.7418, -1.623 , -1.5041, -1.3852, -1.2664, -1.1475, -1.0286,        -0.9098, -0.7909, -0.672 , -0.5532, -0.4343, -0.3154, -0.1966,        -0.0777,  0.0412,  0.16  ,  0.2789,  0.3978,  0.5166,  0.6355,         0.7544,  0.8732,  0.9921,  1.111 ,  1.2298,  1.3487,  1.4676,         1.5864,  1.7053,  1.8242,  1.943 ,  2.0619,  2.1808,  2.2997,         2.4185,  2.5374]), &lt;BarContainer object of 50 artists&gt;)(array([ 1.,  2.,  1.,  2.,  0.,  2.,  2.,  4.,  1.,  3.,  8.,  7.,  7.,        10., 15.,  6., 10., 15., 13., 18., 24., 23., 22., 20., 13., 17.,        19., 23., 15., 15., 23., 24., 20., 14., 15., 22., 12.,  7.,  7.,        10.,  6.,  4.,  7.,  2.,  0.,  1.,  4.,  1.,  1.,  2.]), array([-2.8522, -2.7429, -2.6336, -2.5244, -2.4151, -2.3058, -2.1965,        -2.0872, -1.9779, -1.8687, -1.7594, -1.6501, -1.5408, -1.4315,        -1.3222, -1.213 , -1.1037, -0.9944, -0.8851, -0.7758, -0.6665,        -0.5573, -0.448 , -0.3387, -0.2294, -0.1201, -0.0108,  0.0985,         0.2077,  0.317 ,  0.4263,  0.5356,  0.6449,  0.7542,  0.8634,         0.9727,  1.082 ,  1.1913,  1.3006,  1.4099,  1.5191,  1.6284,         1.7377,  1.847 ,  1.9563,  2.0656,  2.1748,  2.2841,  2.3934,         2.5027,  2.612 ]), &lt;BarContainer object of 50 artists&gt;)(array([ 1.,  0.,  0.,  1.,  1.,  1.,  0.,  1.,  1.,  3.,  4.,  6.,  1.,         6.,  8., 12., 12.,  9., 14., 12., 16., 26., 24., 23., 19., 25.,        24., 20., 31., 29., 36., 24., 21., 17., 17.,  9., 10.,  5., 10.,         6.,  2.,  3.,  4.,  2.,  1.,  1.,  1.,  0.,  0.,  1.]), array([-3.4763, -3.3441, -3.212 , -3.0798, -2.9477, -2.8155, -2.6834,        -2.5513, -2.4191, -2.287 , -2.1548, -2.0227, -1.8905, -1.7584,        -1.6262, -1.4941, -1.3619, -1.2298, -1.0976, -0.9655, -0.8333,        -0.7012, -0.569 , -0.4369, -0.3047, -0.1726, -0.0404,  0.0917,         0.2239,  0.356 ,  0.4882,  0.6203,  0.7525,  0.8846,  1.0168,         1.1489,  1.281 ,  1.4132,  1.5453,  1.6775,  1.8096,  1.9418,         2.0739,  2.2061,  2.3382,  2.4704,  2.6025,  2.7347,  2.8668,         2.999 ,  3.1311]), &lt;BarContainer object of 50 artists&gt;)(array([ 1.,  1.,  0.,  0.,  3.,  3.,  3.,  4.,  2.,  4.,  5.,  2.,  4.,        13.,  9., 11., 25.,  7., 14., 15., 13., 21., 11., 27., 22., 26.,        25., 25., 28., 20., 23., 19., 13., 15., 19., 15., 12.,  5.,  7.,         8.,  9.,  3.,  2.,  2.,  1.,  1.,  1.,  0.,  0.,  1.]), array([-2.8851, -2.7704, -2.6556, -2.5408, -2.426 , -2.3113, -2.1965,        -2.0817, -1.9669, -1.8522, -1.7374, -1.6226, -1.5078, -1.3931,        -1.2783, -1.1635, -1.0488, -0.934 , -0.8192, -0.7044, -0.5897,        -0.4749, -0.3601, -0.2453, -0.1306, -0.0158,  0.099 ,  0.2138,         0.3285,  0.4433,  0.5581,  0.6729,  0.7876,  0.9024,  1.0172,         1.1319,  1.2467,  1.3615,  1.4763,  1.591 ,  1.7058,  1.8206,         1.9354,  2.0501,  2.1649,  2.2797,  2.3945,  2.5092,  2.624 ,         2.7388,  2.8536]), &lt;BarContainer object of 50 artists&gt;)</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441972.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">z=np.random.normal(<span class="number">0</span>,<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">plt.hist(z)</span><br></pre></td></tr></table></figure><pre><code>(array([ 4.,  8., 13., 19., 18., 17., 12.,  5.,  3.,  1.]), array([-2.068 , -1.5828, -1.0977, -0.6125, -0.1274,  0.3577,  0.8429,         1.328 ,  1.8132,  2.2983,  2.7835]), &lt;BarContainer object of 10 artists&gt;)</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101449002.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">st.probplot(BSdata.身高, dist=<span class="string">&quot;norm&quot;</span>, plot=plt); <span class="comment">#正态概率图</span></span><br><span class="line">st.probplot(BSdata[<span class="string">&#x27;支出&#x27;</span>], dist=<span class="string">&quot;norm&quot;</span>, plot=plt);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441052.png" alt="png"></p><h3 id="3-1-2-正态分布"><a href="#3-1-2-正态分布" class="headerlink" title="3.1.2 正态分布"></a>3.1.2 正态分布</h3><h4 id="3-1-2-1-基本概念"><a href="#3-1-2-1-基本概念" class="headerlink" title="3.1.2.1 基本概念"></a>3.1.2.1 基本概念</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####（1）简单随机抽样</span></span><br><span class="line">np.random.randint(<span class="number">0</span>,<span class="number">2</span>,<span class="number">10</span>)  <span class="comment">#[0,2)上的10个随机整数</span></span><br><span class="line">i=np.random.randint(<span class="number">1</span>,<span class="number">53</span>,<span class="number">6</span>);i <span class="comment">#抽取10个学生，[1,52]上的6个整数</span></span><br><span class="line">BSdata.iloc[i]       <span class="comment">#随机抽取的6个学生信息</span></span><br><span class="line">BSdata.sample(<span class="number">6</span>)    <span class="comment">#直接抽取6个学生的信息</span></span><br></pre></td></tr></table></figure><pre><code>array([0, 0, 0, 1, 0, 1, 1, 0, 0, 0])array([30,  4, 23, 48,  3,  6])</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>30</th>      <td>1529365032</td>      <td>男</td>      <td>172</td>      <td>71</td>      <td>10.4</td>      <td>有必要</td>      <td>都学习过</td>      <td>SPSS</td>    </tr>    <tr>      <th>4</th>      <td>1512331015</td>      <td>男</td>      <td>154</td>      <td>55</td>      <td>25.9</td>      <td>有必要</td>      <td>都学习过</td>      <td>Python</td>    </tr>    <tr>      <th>23</th>      <td>1526196010</td>      <td>男</td>      <td>167</td>      <td>72</td>      <td>9.8</td>      <td>不清楚</td>      <td>统计方法</td>      <td>SPSS</td>    </tr>    <tr>      <th>48</th>      <td>1538254010</td>      <td>女</td>      <td>166</td>      <td>65</td>      <td>5.3</td>      <td>不清楚</td>      <td>编程技术</td>      <td>Python</td>    </tr>    <tr>      <th>3</th>      <td>1512332010</td>      <td>男</td>      <td>169</td>      <td>74</td>      <td>4.9</td>      <td>有必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>    <tr>      <th>6</th>      <td>1516352030</td>      <td>女</td>      <td>169</td>      <td>71</td>      <td>9.1</td>      <td>有必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>14</th>      <td>1522274026</td>      <td>女</td>      <td>164</td>      <td>66</td>      <td>50.5</td>      <td>有必要</td>      <td>统计方法</td>      <td>SPSS</td>    </tr>    <tr>      <th>51</th>      <td>1540388036</td>      <td>女</td>      <td>165</td>      <td>67</td>      <td>56.8</td>      <td>不必要</td>      <td>概率统计</td>      <td>SAS</td>    </tr>    <tr>      <th>19</th>      <td>1524286013</td>      <td>男</td>      <td>160</td>      <td>62</td>      <td>4.8</td>      <td>有必要</td>      <td>都未学过</td>      <td>R</td>    </tr>    <tr>      <th>29</th>      <td>1529245023</td>      <td>男</td>      <td>164</td>      <td>58</td>      <td>21.9</td>      <td>有必要</td>      <td>统计方法</td>      <td>Excel</td>    </tr>    <tr>      <th>12</th>      <td>1522186005</td>      <td>男</td>      <td>162</td>      <td>63</td>      <td>9.8</td>      <td>有必要</td>      <td>都学习过</td>      <td>SPSS</td>    </tr>    <tr>      <th>24</th>      <td>1527173011</td>      <td>女</td>      <td>160</td>      <td>62</td>      <td>11.5</td>      <td>不必要</td>      <td>都学习过</td>      <td>Matlab</td>    </tr>  </tbody></table></div><h4 id="3-1-2-2-统计量及其分布"><a href="#3-1-2-2-统计量及其分布" class="headerlink" title="3.1.2.2 统计量及其分布"></a>3.1.2.2 统计量及其分布</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####（1）正态分布模拟</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">norm_sim1</span>(<span class="params">N=<span class="number">1000</span>,n=<span class="number">10</span></span>):</span>    <span class="comment"># n样本个数, N模拟次数（即抽样次数）</span></span><br><span class="line">    xbar=np.zeros(N)            <span class="comment">#模拟样本均值</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):          <span class="comment">#[0,1]上的标准正态随机数及均值</span></span><br><span class="line">       xbar[i]=np.random.normal(<span class="number">0</span>,<span class="number">1</span>,n).mean()</span><br><span class="line">    sns.distplot(xbar,bins=<span class="number">50</span>)  <span class="comment">#plt.hist(xbar,bins=50)</span></span><br><span class="line">    print(pd.DataFrame(xbar).describe().T)</span><br><span class="line">norm_sim1()</span><br><span class="line">norm_sim1(<span class="number">10000</span>,<span class="number">30</span>)</span><br><span class="line"><span class="comment">#sns.distplot(norm_sim1())  #plt.hist(norm_sim1())</span></span><br><span class="line"><span class="comment">#sns.distplot(norm_sim1(n=30,N=10000)) #plt.hist(norm_sim1(n=30,N=10000))</span></span><br></pre></td></tr></table></figure><pre><code>C:\Users\kit\miniconda3\lib\site-packages\seaborn\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).  warnings.warn(msg, FutureWarning)    count    mean     std     min     25%     50%     75%     max0  1000.0  0.0085  0.3239 -0.9102 -0.2089  0.0061  0.2184  1.0639C:\Users\kit\miniconda3\lib\site-packages\seaborn\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).  warnings.warn(msg, FutureWarning)     count    mean     std     min     25%     50%    75%     max0  10000.0 -0.0032  0.1807 -0.6541 -0.1249 -0.0013  0.118  0.6659</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101449349.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">norm_sim2</span>(<span class="params">N=<span class="number">1000</span>,n=<span class="number">10</span></span>):</span></span><br><span class="line">    xbar=np.zeros(N)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">       xbar[i]=np.random.uniform(<span class="number">0</span>,<span class="number">1</span>,n).mean()  <span class="comment">#[0,1]上的均匀随机数及均值</span></span><br><span class="line">    sns.distplot(xbar,bins=<span class="number">50</span>)</span><br><span class="line">    print(pd.DataFrame(xbar).describe().T)</span><br><span class="line">norm_sim2()</span><br><span class="line">norm_sim2(<span class="number">10000</span>,<span class="number">30</span>)</span><br></pre></td></tr></table></figure><pre><code>C:\Users\kit\miniconda3\lib\site-packages\seaborn\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).  warnings.warn(msg, FutureWarning)    count    mean     std     min     25%     50%     75%     max0  1000.0  0.5019  0.0912  0.2292  0.4364  0.4976  0.5667  0.7753C:\Users\kit\miniconda3\lib\site-packages\seaborn\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).  warnings.warn(msg, FutureWarning)     count    mean     std     min     25%     50%     75%     max0  10000.0  0.4998  0.0521  0.3241  0.4638  0.4995  0.5353  0.7193</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441860.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sns.distplot(norm_sim2())             #plt.hist(norm_sim2())</span></span><br><span class="line"><span class="comment">#sns.distplot(norm_sim1(n=30,N=10000)) #plt.hist(norm_sim2(n=30,N=10000))</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####（3）t分布曲线</span></span><br><span class="line">x=np.linspace(-<span class="number">4</span>,<span class="number">4</span>,<span class="number">50</span>);x</span><br><span class="line">yn=st.norm.pdf(x,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">yt2=st.t.pdf(x,<span class="number">2</span>)</span><br><span class="line">yt10=st.t.pdf(x,<span class="number">10</span>)</span><br><span class="line">plt.plot(x,yn,<span class="string">&#x27;r-&#x27;</span>,x,yt2,<span class="string">&#x27;b.&#x27;</span>,x,yt10,<span class="string">&#x27;g-.&#x27;</span>);</span><br><span class="line">plt.legend([<span class="string">&quot;N(0,1)&quot;</span>,<span class="string">&quot;t(2)&quot;</span>,<span class="string">&quot;t(10)&quot;</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101449318.png" alt="png"></p><h3 id="3-1-3-随机模拟及其应用"><a href="#3-1-3-随机模拟及其应用" class="headerlink" title="3.1.3 随机模拟及其应用"></a>3.1.3 随机模拟及其应用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3.1.3.1 模拟大数定律</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Bernoulli</span>(<span class="params">N=<span class="number">100</span></span>):</span></span><br><span class="line">    p=np.zeros(N)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,N):</span><br><span class="line">       f=np.random.randint(<span class="number">0</span>,<span class="number">2</span>,n)  <span class="comment">#[0,1]</span></span><br><span class="line">       m=<span class="built_in">sum</span>(f)</span><br><span class="line">       p[n]=m/n</span><br><span class="line">    plt.plot(p);plt.hlines(<span class="number">0.5</span>,<span class="number">1</span>,N)</span><br><span class="line">Bernoulli()</span><br><span class="line">Bernoulli(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101449976.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3.1.3.2 模拟方法求积分</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt,pi,exp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>/sqrt(<span class="number">2</span>*pi))*exp(-x**<span class="number">2</span>/<span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">I</span>(<span class="params">n,a,b,g</span>):</span></span><br><span class="line">    x=np.random.uniform(<span class="number">0</span>,<span class="number">1</span>,n)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([(b-a)*g(a+(b-a)*y) <span class="keyword">for</span> y <span class="keyword">in</span> x])/n</span><br><span class="line">I(<span class="number">10000</span>,-<span class="number">1</span>,<span class="number">1</span>,g)</span><br></pre></td></tr></table></figure><pre><code>0.6827788509034309</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.integrate <span class="keyword">import</span> quad</span><br><span class="line">quad(g,-<span class="number">1</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>(0.682689492137086, 7.579375928402476e-15)</code></pre><h2 id="3-2-随机模拟及其应用"><a href="#3-2-随机模拟及其应用" class="headerlink" title="3.2 随机模拟及其应用"></a>3.2 随机模拟及其应用</h2><h3 id="3-2-1-随机模拟方法"><a href="#3-2-1-随机模拟方法" class="headerlink" title="3.2.1 随机模拟方法"></a>3.2.1 随机模拟方法</h3><h3 id="3-2-2-模拟大数定律"><a href="#3-2-2-模拟大数定律" class="headerlink" title="3.2.2 模拟大数定律"></a>3.2.2 模拟大数定律</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Bernoulli</span>(<span class="params">N=<span class="number">100</span></span>):</span></span><br><span class="line">    p=np.zeros(N)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,N):</span><br><span class="line">        f=np.random.randint(<span class="number">0</span>,<span class="number">2</span>,n) <span class="comment">#[0,1]</span></span><br><span class="line">        m=<span class="built_in">sum</span>(f)</span><br><span class="line">        p[n]=m/n</span><br><span class="line">    plt.plot(p);plt.hlines(<span class="number">0.5</span>,<span class="number">1</span>,N)</span><br><span class="line">Bernoulli()</span><br><span class="line">Bernoulli(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101448195.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###3.2.3 模拟方法求积分</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt,pi,exp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>/sqrt(<span class="number">2</span>*pi))*exp(-x**<span class="number">2</span>/<span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">I</span>(<span class="params">n,a,b,g</span>):</span></span><br><span class="line">    x=np.random.uniform(<span class="number">0</span>,<span class="number">1</span>,n)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([(b-a)*g(a+(b-a)*y) <span class="keyword">for</span> y <span class="keyword">in</span> x])/n</span><br><span class="line">I(<span class="number">10000</span>,-<span class="number">1</span>,<span class="number">1</span>,g)</span><br></pre></td></tr></table></figure><pre><code>0.6830694013847906</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.integrate <span class="keyword">import</span> quad</span><br><span class="line">quad(g,-<span class="number">1</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>(0.682689492137086, 7.579375928402476e-15)</code></pre><h2 id="3-3-单变量统计分析模型"><a href="#3-3-单变量统计分析模型" class="headerlink" title="3.3 单变量统计分析模型"></a>3.3 单变量统计分析模型</h2><h3 id="3-3-1-简单线性相关分析"><a href="#3-3-1-简单线性相关分析" class="headerlink" title="3.3.1 简单线性相关分析"></a>3.3.1 简单线性相关分析</h3><h4 id="3-3-1-1-线性相关的概念"><a href="#3-3-1-1-线性相关的概念" class="headerlink" title="3.3.1.1 线性相关的概念"></a>3.3.1.1 线性相关的概念</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x=np.linspace(-<span class="number">4</span>,<span class="number">4</span>,<span class="number">20</span>); e=np.random.randn(<span class="number">20</span>) <span class="comment">#随机误差</span></span><br><span class="line">fig,ax=plt.subplots(<span class="number">2</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">12</span>))</span><br><span class="line">ax[<span class="number">0</span>,<span class="number">0</span>].plot(x,x,<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">ax[<span class="number">0</span>,<span class="number">1</span>].plot(x,-x,<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">ax[<span class="number">1</span>,<span class="number">0</span>].plot(x,x+e,<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">ax[<span class="number">1</span>,<span class="number">1</span>].plot(x,-x+e,<span class="string">&#x27;o&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441497.png" alt="png"></p><h4 id="3-3-1-2-相关系数的计算"><a href="#3-3-1-2-相关系数的计算" class="headerlink" title="3.3.1.2 相关系数的计算"></a>3.3.1.2 相关系数的计算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####（1）散点图</span></span><br><span class="line">x=BSdata.身高;y=BSdata.体重</span><br><span class="line">plt.plot(x, y,<span class="string">&#x27;o&#x27;</span>); <span class="comment">#plt.scatter(x,y);</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101448605.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####（2）相关系数</span></span><br><span class="line">x.cov(y)</span><br><span class="line"></span><br><span class="line">x.corr(y)</span><br><span class="line">y.corr(x)</span><br></pre></td></tr></table></figure><pre><code>56.382352941176450.91181709870105210.9118170987010521</code></pre><h4 id="3-3-1-3-相关系数的检验"><a href="#3-3-1-3-相关系数的检验" class="headerlink" title="3.3.1.3 相关系数的检验"></a>3.3.1.3 相关系数的检验</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####(3) 计算值和值，作结论。</span></span><br><span class="line">st.pearsonr(x,y)  <span class="comment">#pearson相关及检验</span></span><br></pre></td></tr></table></figure><pre><code>(0.9118170987010525, 5.7473293164451325e-21)</code></pre><h3 id="3-3-2-简单线性回归分析"><a href="#3-3-2-简单线性回归分析" class="headerlink" title="3.3.2 简单线性回归分析"></a>3.3.2 简单线性回归分析</h3><h4 id="3-3-2-1一元线性回归模型的估计"><a href="#3-3-2-1一元线性回归模型的估计" class="headerlink" title="3.3.2.1一元线性回归模型的估计"></a>3.3.2.1一元线性回归模型的估计</h4><h5 id="（1）模拟直线回归模型"><a href="#（1）模拟直线回归模型" class="headerlink" title="（1）模拟直线回归模型"></a>（1）模拟直线回归模型</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">da.reglinedemo()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101448904.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm             <span class="comment">#简单线性回归模型</span></span><br><span class="line">fm1=sm.OLS(y,sm.add_constant(x)).fit()   <span class="comment">#普通最小二乘，家常数项</span></span><br><span class="line">fm1.params                               <span class="comment">#系数估计</span></span><br><span class="line">yfit=fm1.fittedvalues;</span><br><span class="line">plt.plot(x, y,<span class="string">&#x27;.&#x27;</span>,x,yfit, <span class="string">&#x27;r-&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441511.png" alt="png"></p><h4 id="3-3-2-2-一元线性回归模型的检验"><a href="#3-3-2-2-一元线性回归模型的检验" class="headerlink" title="3.3.2.2 一元线性回归模型的检验"></a>3.3.2.2 一元线性回归模型的检验</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fm1.tvalues                            <span class="comment">#系数t检验值</span></span><br><span class="line">fm1.pvalues                            <span class="comment">#系数t检验概率</span></span><br><span class="line">pd.DataFrame(&#123;<span class="string">&#x27;b估计值&#x27;</span>:fm1.params,<span class="string">&#x27;t值&#x27;</span>:fm1.tvalues,<span class="string">&#x27;概率p&#x27;</span>:fm1.pvalues&#125;)</span><br></pre></td></tr></table></figure><pre><code>const    -8.4149身高       15.7028dtype: float64const    3.8207e-11身高       5.7473e-21dtype: float64</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>b估计值</th>      <th>t值</th>      <th>概率p</th>    </tr>  </thead>  <tbody>    <tr>      <th>const</th>      <td>-79.2828</td>      <td>-8.4149</td>      <td>3.8207e-11</td>    </tr>    <tr>      <th>身高</th>      <td>0.8769</td>      <td>15.7028</td>      <td>5.7473e-21</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> statsmodels.formula.api <span class="keyword">as</span> smf  <span class="comment">#根据公式建回归模型</span></span><br><span class="line">fm2=smf.ols(<span class="string">&#x27;体重~身高&#x27;</span>, BSdata).fit()</span><br><span class="line">pd.DataFrame(&#123;<span class="string">&#x27;b估计值&#x27;</span>:fm2.params,<span class="string">&#x27;t值&#x27;</span>:fm2.tvalues,<span class="string">&#x27;概率p&#x27;</span>:fm2.pvalues&#125;)</span><br><span class="line">fm2.summary2().tables[<span class="number">1</span>]           <span class="comment">#回归系数检验表</span></span><br><span class="line">plt.plot(BSdata.身高,BSdata.体重,<span class="string">&#x27;.&#x27;</span>,BSdata.身高,fm2.fittedvalues,<span class="string">&#x27;r-&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101448315.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####3.3.2.3 一元线性回归模型的预测</span></span><br><span class="line">fm2.predict(pd.DataFrame(&#123;<span class="string">&#x27;身高&#x27;</span>: [<span class="number">178</span>,<span class="number">188</span>,<span class="number">190</span>]&#125;))   <span class="comment">#预测</span></span><br></pre></td></tr></table></figure><pre><code>0    76.81421    85.58362    87.3375dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####3.3.2.4 分组拟合一元线性模型</span></span><br><span class="line">smf.ols(<span class="string">&#x27;体重~身高&#x27;</span>,BSdata[BSdata.性别==<span class="string">&#x27;男&#x27;</span>]).fit().summary2().tables[<span class="number">1</span>]</span><br><span class="line">smf.ols(<span class="string">&#x27;体重~身高&#x27;</span>,BSdata[BSdata.性别==<span class="string">&#x27;女&#x27;</span>]).fit().summary2().tables[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Coef.</th>      <th>Std.Err.</th>      <th>t</th>      <th>P&gt;|t|</th>      <th>[0.025</th>      <th>0.975]</th>    </tr>  </thead>  <tbody>    <tr>      <th>Intercept</th>      <td>-85.4332</td>      <td>14.1894</td>      <td>-6.0209</td>      <td>2.7373e-06</td>      <td>-114.6568</td>      <td>-56.2095</td>    </tr>    <tr>      <th>身高</th>      <td>0.9101</td>      <td>0.0827</td>      <td>11.0108</td>      <td>4.4366e-11</td>      <td>0.7398</td>      <td>1.0803</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Coef.</th>      <th>Std.Err.</th>      <th>t</th>      <th>P&gt;|t|</th>      <th>[0.025</th>      <th>0.975]</th>    </tr>  </thead>  <tbody>    <tr>      <th>Intercept</th>      <td>-80.3893</td>      <td>15.4049</td>      <td>-5.2184</td>      <td>2.7178e-05</td>      <td>-112.2567</td>      <td>-48.5219</td>    </tr>    <tr>      <th>身高</th>      <td>0.8867</td>      <td>0.0931</td>      <td>9.5229</td>      <td>1.9073e-09</td>      <td>0.6941</td>      <td>1.0794</td>    </tr>  </tbody></table></div><h1 id="第4章-复杂数据的综合分析"><a href="#第4章-复杂数据的综合分析" class="headerlink" title="第4章 复杂数据的综合分析"></a>第4章 复杂数据的综合分析</h1><h2 id="4-1-多变量线性相关与回归"><a href="#4-1-多变量线性相关与回归" class="headerlink" title="4.1 多变量线性相关与回归"></a>4.1 多变量线性相关与回归</h2><h3 id="4-1-1-多变量间线性相关"><a href="#4-1-1-多变量间线性相关" class="headerlink" title="4.1.1 多变量间线性相关"></a>4.1.1 多变量间线性相关</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####4.1.1.1 相关系数阵</span></span><br><span class="line"><span class="comment">#####（1）读取无标签数据</span></span><br><span class="line">pd.read_excel(<span class="string">&#x27;PyDm_data.xlsx&#x27;</span>,<span class="string">&#x27;MVdata&#x27;</span>)[:<span class="number">5</span>]</span><br><span class="line">MVdata=pd.read_excel(<span class="string">&#x27;PyDm_data.xlsx&#x27;</span>,<span class="string">&#x27;MVdata&#x27;</span>,index_col=<span class="number">0</span>);<span class="built_in">round</span>(MVdata,<span class="number">3</span>)</span><br><span class="line">YXdata=pd.read_excel(<span class="string">&#x27;PyDm_data.xlsx&#x27;</span>,<span class="string">&#x27;MVdata&#x27;</span>,index_col=<span class="number">0</span>);</span><br><span class="line">YXdata.columns=[<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;X1&#x27;</span>,<span class="string">&#x27;X2&#x27;</span>,<span class="string">&#x27;X3&#x27;</span>,<span class="string">&#x27;X4&#x27;</span>,<span class="string">&#x27;X5&#x27;</span>,<span class="string">&#x27;X6&#x27;</span>,<span class="string">&#x27;X7&#x27;</span>];<span class="built_in">round</span>(YXdata,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">round</span>(YXdata.cov(),<span class="number">2</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>地区</th>      <th>生产总值</th>      <th>从业人员</th>      <th>固定资产</th>      <th>利用外资</th>      <th>进出口额</th>      <th>新品出口</th>      <th>市场占有</th>      <th>对外依存</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>北京</td>      <td>162.5193</td>      <td>1069.70</td>      <td>55.7893</td>      <td>196.906</td>      <td>3894.9</td>      <td>6470.514</td>      <td>2.6347</td>      <td>1.5479</td>    </tr>    <tr>      <th>1</th>      <td>天津</td>      <td>113.0728</td>      <td>763.16</td>      <td>70.6767</td>      <td>61.947</td>      <td>1033.9</td>      <td>7490.317</td>      <td>1.9862</td>      <td>0.5906</td>    </tr>    <tr>      <th>2</th>      <td>河北</td>      <td>245.1576</td>      <td>3962.42</td>      <td>163.8933</td>      <td>178.782</td>      <td>536.0</td>      <td>2288.188</td>      <td>1.2756</td>      <td>0.1412</td>    </tr>    <tr>      <th>3</th>      <td>山西</td>      <td>112.3755</td>      <td>1738.90</td>      <td>70.7306</td>      <td>104.945</td>      <td>147.6</td>      <td>1522.788</td>      <td>0.2424</td>      <td>0.0848</td>    </tr>    <tr>      <th>4</th>      <td>内蒙古</td>      <td>143.5988</td>      <td>1249.30</td>      <td>103.6517</td>      <td>54.426</td>      <td>119.4</td>      <td>342.358</td>      <td>0.2093</td>      <td>0.0537</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>生产总值</th>      <th>从业人员</th>      <th>固定资产</th>      <th>利用外资</th>      <th>进出口额</th>      <th>新品出口</th>      <th>市场占有</th>      <th>对外依存</th>    </tr>    <tr>      <th>地区</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>北京</th>      <td>162.519</td>      <td>1069.700</td>      <td>55.789</td>      <td>196.906</td>      <td>3894.9</td>      <td>6470.514</td>      <td>2.635</td>      <td>1.548</td>    </tr>    <tr>      <th>天津</th>      <td>113.073</td>      <td>763.160</td>      <td>70.677</td>      <td>61.947</td>      <td>1033.9</td>      <td>7490.317</td>      <td>1.986</td>      <td>0.591</td>    </tr>    <tr>      <th>河北</th>      <td>245.158</td>      <td>3962.420</td>      <td>163.893</td>      <td>178.782</td>      <td>536.0</td>      <td>2288.188</td>      <td>1.276</td>      <td>0.141</td>    </tr>    <tr>      <th>山西</th>      <td>112.376</td>      <td>1738.900</td>      <td>70.731</td>      <td>104.945</td>      <td>147.6</td>      <td>1522.788</td>      <td>0.242</td>      <td>0.085</td>    </tr>    <tr>      <th>内蒙古</th>      <td>143.599</td>      <td>1249.300</td>      <td>103.652</td>      <td>54.426</td>      <td>119.4</td>      <td>342.358</td>      <td>0.209</td>      <td>0.054</td>    </tr>    <tr>      <th>辽宁</th>      <td>222.267</td>      <td>2364.900</td>      <td>177.263</td>      <td>155.296</td>      <td>959.6</td>      <td>4150.239</td>      <td>2.278</td>      <td>0.279</td>    </tr>    <tr>      <th>吉林</th>      <td>105.688</td>      <td>1337.800</td>      <td>74.417</td>      <td>58.843</td>      <td>220.5</td>      <td>746.941</td>      <td>0.223</td>      <td>0.135</td>    </tr>    <tr>      <th>黑龙江</th>      <td>125.820</td>      <td>1977.800</td>      <td>74.754</td>      <td>81.979</td>      <td>385.1</td>      <td>318.892</td>      <td>0.789</td>      <td>0.198</td>    </tr>    <tr>      <th>上海</th>      <td>191.957</td>      <td>1104.330</td>      <td>49.621</td>      <td>179.582</td>      <td>4373.1</td>      <td>10326.436</td>      <td>9.359</td>      <td>1.471</td>    </tr>    <tr>      <th>江苏</th>      <td>491.103</td>      <td>4758.230</td>      <td>266.926</td>      <td>261.118</td>      <td>5397.6</td>      <td>43928.942</td>      <td>13.953</td>      <td>0.710</td>    </tr>    <tr>      <th>浙江</th>      <td>323.188</td>      <td>3680.000</td>      <td>141.853</td>      <td>239.452</td>      <td>3094.0</td>      <td>25355.077</td>      <td>9.657</td>      <td>0.618</td>    </tr>    <tr>      <th>安徽</th>      <td>153.006</td>      <td>4120.900</td>      <td>124.557</td>      <td>92.613</td>      <td>313.4</td>      <td>2344.049</td>      <td>0.762</td>      <td>0.132</td>    </tr>    <tr>      <th>福建</th>      <td>175.602</td>      <td>2459.990</td>      <td>99.109</td>      <td>92.158</td>      <td>1435.6</td>      <td>7957.495</td>      <td>4.144</td>      <td>0.528</td>    </tr>    <tr>      <th>江西</th>      <td>117.028</td>      <td>2532.600</td>      <td>90.876</td>      <td>71.531</td>      <td>315.6</td>      <td>1301.037</td>      <td>0.977</td>      <td>0.174</td>    </tr>    <tr>      <th>山东</th>      <td>453.618</td>      <td>6485.600</td>      <td>267.497</td>      <td>223.057</td>      <td>2359.9</td>      <td>17688.021</td>      <td>5.614</td>      <td>0.336</td>    </tr>    <tr>      <th>河南</th>      <td>269.310</td>      <td>6198.000</td>      <td>177.690</td>      <td>147.022</td>      <td>326.4</td>      <td>2176.170</td>      <td>0.859</td>      <td>0.078</td>    </tr>    <tr>      <th>湖北</th>      <td>196.323</td>      <td>3672.000</td>      <td>125.573</td>      <td>113.434</td>      <td>335.2</td>      <td>1614.369</td>      <td>0.872</td>      <td>0.110</td>    </tr>    <tr>      <th>湖南</th>      <td>196.696</td>      <td>4005.030</td>      <td>118.809</td>      <td>106.234</td>      <td>190.0</td>      <td>1814.498</td>      <td>0.442</td>      <td>0.062</td>    </tr>    <tr>      <th>广东</th>      <td>532.103</td>      <td>5960.743</td>      <td>170.692</td>      <td>410.616</td>      <td>9134.8</td>      <td>56849.072</td>      <td>23.742</td>      <td>1.109</td>    </tr>    <tr>      <th>广西</th>      <td>117.209</td>      <td>2936.000</td>      <td>79.907</td>      <td>66.822</td>      <td>233.5</td>      <td>641.547</td>      <td>0.556</td>      <td>0.129</td>    </tr>    <tr>      <th>海南</th>      <td>25.227</td>      <td>459.222</td>      <td>16.572</td>      <td>18.885</td>      <td>127.6</td>      <td>185.490</td>      <td>0.113</td>      <td>0.327</td>    </tr>    <tr>      <th>重庆</th>      <td>100.114</td>      <td>1590.160</td>      <td>74.734</td>      <td>70.117</td>      <td>292.2</td>      <td>3928.448</td>      <td>0.886</td>      <td>0.188</td>    </tr>    <tr>      <th>四川</th>      <td>210.267</td>      <td>4785.500</td>      <td>142.222</td>      <td>162.007</td>      <td>477.8</td>      <td>1233.514</td>      <td>1.297</td>      <td>0.147</td>    </tr>    <tr>      <th>贵州</th>      <td>57.018</td>      <td>1792.800</td>      <td>42.359</td>      <td>39.441</td>      <td>48.8</td>      <td>308.647</td>      <td>0.134</td>      <td>0.055</td>    </tr>    <tr>      <th>云南</th>      <td>88.931</td>      <td>2857.240</td>      <td>61.910</td>      <td>66.849</td>      <td>160.5</td>      <td>257.761</td>      <td>0.423</td>      <td>0.117</td>    </tr>    <tr>      <th>陕西</th>      <td>125.123</td>      <td>2059.020</td>      <td>94.311</td>      <td>92.209</td>      <td>146.2</td>      <td>408.447</td>      <td>0.313</td>      <td>0.076</td>    </tr>    <tr>      <th>甘肃</th>      <td>50.204</td>      <td>1500.300</td>      <td>39.658</td>      <td>42.500</td>      <td>87.4</td>      <td>300.885</td>      <td>0.096</td>      <td>0.112</td>    </tr>    <tr>      <th>青海</th>      <td>16.704</td>      <td>309.180</td>      <td>14.356</td>      <td>10.488</td>      <td>9.2</td>      <td>0.296</td>      <td>0.030</td>      <td>0.036</td>    </tr>    <tr>      <th>宁夏</th>      <td>21.022</td>      <td>339.600</td>      <td>16.447</td>      <td>13.563</td>      <td>22.9</td>      <td>196.998</td>      <td>0.071</td>      <td>0.070</td>    </tr>    <tr>      <th>新疆</th>      <td>66.100</td>      <td>953.340</td>      <td>46.321</td>      <td>44.409</td>      <td>228.2</td>      <td>83.385</td>      <td>0.751</td>      <td>0.223</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Y</th>      <th>X1</th>      <th>X2</th>      <th>X3</th>      <th>X4</th>      <th>X5</th>      <th>X6</th>      <th>X7</th>    </tr>    <tr>      <th>地区</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>北京</th>      <td>162.519</td>      <td>1069.700</td>      <td>55.789</td>      <td>196.906</td>      <td>3894.9</td>      <td>6470.514</td>      <td>2.635</td>      <td>1.548</td>    </tr>    <tr>      <th>天津</th>      <td>113.073</td>      <td>763.160</td>      <td>70.677</td>      <td>61.947</td>      <td>1033.9</td>      <td>7490.317</td>      <td>1.986</td>      <td>0.591</td>    </tr>    <tr>      <th>河北</th>      <td>245.158</td>      <td>3962.420</td>      <td>163.893</td>      <td>178.782</td>      <td>536.0</td>      <td>2288.188</td>      <td>1.276</td>      <td>0.141</td>    </tr>    <tr>      <th>山西</th>      <td>112.376</td>      <td>1738.900</td>      <td>70.731</td>      <td>104.945</td>      <td>147.6</td>      <td>1522.788</td>      <td>0.242</td>      <td>0.085</td>    </tr>    <tr>      <th>内蒙古</th>      <td>143.599</td>      <td>1249.300</td>      <td>103.652</td>      <td>54.426</td>      <td>119.4</td>      <td>342.358</td>      <td>0.209</td>      <td>0.054</td>    </tr>    <tr>      <th>辽宁</th>      <td>222.267</td>      <td>2364.900</td>      <td>177.263</td>      <td>155.296</td>      <td>959.6</td>      <td>4150.239</td>      <td>2.278</td>      <td>0.279</td>    </tr>    <tr>      <th>吉林</th>      <td>105.688</td>      <td>1337.800</td>      <td>74.417</td>      <td>58.843</td>      <td>220.5</td>      <td>746.941</td>      <td>0.223</td>      <td>0.135</td>    </tr>    <tr>      <th>黑龙江</th>      <td>125.820</td>      <td>1977.800</td>      <td>74.754</td>      <td>81.979</td>      <td>385.1</td>      <td>318.892</td>      <td>0.789</td>      <td>0.198</td>    </tr>    <tr>      <th>上海</th>      <td>191.957</td>      <td>1104.330</td>      <td>49.621</td>      <td>179.582</td>      <td>4373.1</td>      <td>10326.436</td>      <td>9.359</td>      <td>1.471</td>    </tr>    <tr>      <th>江苏</th>      <td>491.103</td>      <td>4758.230</td>      <td>266.926</td>      <td>261.118</td>      <td>5397.6</td>      <td>43928.942</td>      <td>13.953</td>      <td>0.710</td>    </tr>    <tr>      <th>浙江</th>      <td>323.188</td>      <td>3680.000</td>      <td>141.853</td>      <td>239.452</td>      <td>3094.0</td>      <td>25355.077</td>      <td>9.657</td>      <td>0.618</td>    </tr>    <tr>      <th>安徽</th>      <td>153.006</td>      <td>4120.900</td>      <td>124.557</td>      <td>92.613</td>      <td>313.4</td>      <td>2344.049</td>      <td>0.762</td>      <td>0.132</td>    </tr>    <tr>      <th>福建</th>      <td>175.602</td>      <td>2459.990</td>      <td>99.109</td>      <td>92.158</td>      <td>1435.6</td>      <td>7957.495</td>      <td>4.144</td>      <td>0.528</td>    </tr>    <tr>      <th>江西</th>      <td>117.028</td>      <td>2532.600</td>      <td>90.876</td>      <td>71.531</td>      <td>315.6</td>      <td>1301.037</td>      <td>0.977</td>      <td>0.174</td>    </tr>    <tr>      <th>山东</th>      <td>453.618</td>      <td>6485.600</td>      <td>267.497</td>      <td>223.057</td>      <td>2359.9</td>      <td>17688.021</td>      <td>5.614</td>      <td>0.336</td>    </tr>    <tr>      <th>河南</th>      <td>269.310</td>      <td>6198.000</td>      <td>177.690</td>      <td>147.022</td>      <td>326.4</td>      <td>2176.170</td>      <td>0.859</td>      <td>0.078</td>    </tr>    <tr>      <th>湖北</th>      <td>196.323</td>      <td>3672.000</td>      <td>125.573</td>      <td>113.434</td>      <td>335.2</td>      <td>1614.369</td>      <td>0.872</td>      <td>0.110</td>    </tr>    <tr>      <th>湖南</th>      <td>196.696</td>      <td>4005.030</td>      <td>118.809</td>      <td>106.234</td>      <td>190.0</td>      <td>1814.498</td>      <td>0.442</td>      <td>0.062</td>    </tr>    <tr>      <th>广东</th>      <td>532.103</td>      <td>5960.743</td>      <td>170.692</td>      <td>410.616</td>      <td>9134.8</td>      <td>56849.072</td>      <td>23.742</td>      <td>1.109</td>    </tr>    <tr>      <th>广西</th>      <td>117.209</td>      <td>2936.000</td>      <td>79.907</td>      <td>66.822</td>      <td>233.5</td>      <td>641.547</td>      <td>0.556</td>      <td>0.129</td>    </tr>    <tr>      <th>海南</th>      <td>25.227</td>      <td>459.222</td>      <td>16.572</td>      <td>18.885</td>      <td>127.6</td>      <td>185.490</td>      <td>0.113</td>      <td>0.327</td>    </tr>    <tr>      <th>重庆</th>      <td>100.114</td>      <td>1590.160</td>      <td>74.734</td>      <td>70.117</td>      <td>292.2</td>      <td>3928.448</td>      <td>0.886</td>      <td>0.188</td>    </tr>    <tr>      <th>四川</th>      <td>210.267</td>      <td>4785.500</td>      <td>142.222</td>      <td>162.007</td>      <td>477.8</td>      <td>1233.514</td>      <td>1.297</td>      <td>0.147</td>    </tr>    <tr>      <th>贵州</th>      <td>57.018</td>      <td>1792.800</td>      <td>42.359</td>      <td>39.441</td>      <td>48.8</td>      <td>308.647</td>      <td>0.134</td>      <td>0.055</td>    </tr>    <tr>      <th>云南</th>      <td>88.931</td>      <td>2857.240</td>      <td>61.910</td>      <td>66.849</td>      <td>160.5</td>      <td>257.761</td>      <td>0.423</td>      <td>0.117</td>    </tr>    <tr>      <th>陕西</th>      <td>125.123</td>      <td>2059.020</td>      <td>94.311</td>      <td>92.209</td>      <td>146.2</td>      <td>408.447</td>      <td>0.313</td>      <td>0.076</td>    </tr>    <tr>      <th>甘肃</th>      <td>50.204</td>      <td>1500.300</td>      <td>39.658</td>      <td>42.500</td>      <td>87.4</td>      <td>300.885</td>      <td>0.096</td>      <td>0.112</td>    </tr>    <tr>      <th>青海</th>      <td>16.704</td>      <td>309.180</td>      <td>14.356</td>      <td>10.488</td>      <td>9.2</td>      <td>0.296</td>      <td>0.030</td>      <td>0.036</td>    </tr>    <tr>      <th>宁夏</th>      <td>21.022</td>      <td>339.600</td>      <td>16.447</td>      <td>13.563</td>      <td>22.9</td>      <td>196.998</td>      <td>0.071</td>      <td>0.070</td>    </tr>    <tr>      <th>新疆</th>      <td>66.100</td>      <td>953.340</td>      <td>46.321</td>      <td>44.409</td>      <td>228.2</td>      <td>83.385</td>      <td>0.751</td>      <td>0.223</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Y</th>      <th>X1</th>      <th>X2</th>      <th>X3</th>      <th>X4</th>      <th>X5</th>      <th>X6</th>      <th>X7</th>    </tr>  </thead>  <tbody>    <tr>      <th>Y</th>      <td>1.7132e+04</td>      <td>1.8886e+05</td>      <td>7613.87</td>      <td>10661.58</td>      <td>2.0843e+05</td>      <td>1.4708e+06</td>      <td>548.87</td>      <td>22.18</td>    </tr>    <tr>      <th>X1</th>      <td>1.8886e+05</td>      <td>3.1303e+06</td>      <td>98854.82</td>      <td>108077.77</td>      <td>1.4105e+06</td>      <td>1.1962e+07</td>      <td>4235.21</td>      <td>7.60</td>    </tr>    <tr>      <th>X2</th>      <td>7.6139e+03</td>      <td>9.8855e+04</td>      <td>4251.74</td>      <td>4102.12</td>      <td>5.7994e+04</td>      <td>5.0090e+05</td>      <td>166.08</td>      <td>2.37</td>    </tr>    <tr>      <th>X3</th>      <td>1.0662e+04</td>      <td>1.0808e+05</td>      <td>4102.12</td>      <td>7693.16</td>      <td>1.5883e+05</td>      <td>9.9197e+05</td>      <td>393.91</td>      <td>21.68</td>    </tr>    <tr>      <th>X4</th>      <td>2.0843e+05</td>      <td>1.4105e+06</td>      <td>57993.81</td>      <td>158830.29</td>      <td>4.2535e+06</td>      <td>2.5217e+07</td>      <td>10260.32</td>      <td>672.04</td>    </tr>    <tr>      <th>X5</th>      <td>1.4708e+06</td>      <td>1.1962e+07</td>      <td>500896.61</td>      <td>991970.35</td>      <td>2.5217e+07</td>      <td>1.7528e+08</td>      <td>66333.86</td>      <td>3012.05</td>    </tr>    <tr>      <th>X6</th>      <td>5.4887e+02</td>      <td>4.2352e+03</td>      <td>166.08</td>      <td>393.91</td>      <td>1.0260e+04</td>      <td>6.6334e+04</td>      <td>26.70</td>      <td>1.37</td>    </tr>    <tr>      <th>X7</th>      <td>2.2180e+01</td>      <td>7.6000e+00</td>      <td>2.37</td>      <td>21.68</td>      <td>6.7204e+02</td>      <td>3.0121e+03</td>      <td>1.37</td>      <td>0.16</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">round</span>(YXdata.corr(),<span class="number">4</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Y</th>      <th>X1</th>      <th>X2</th>      <th>X3</th>      <th>X4</th>      <th>X5</th>      <th>X6</th>      <th>X7</th>    </tr>  </thead>  <tbody>    <tr>      <th>Y</th>      <td>1.0000</td>      <td>0.8155</td>      <td>0.8921</td>      <td>0.9287</td>      <td>0.7721</td>      <td>0.8487</td>      <td>0.8116</td>      <td>0.4211</td>    </tr>    <tr>      <th>X1</th>      <td>0.8155</td>      <td>1.0000</td>      <td>0.8569</td>      <td>0.6965</td>      <td>0.3865</td>      <td>0.5107</td>      <td>0.4633</td>      <td>0.0107</td>    </tr>    <tr>      <th>X2</th>      <td>0.8921</td>      <td>0.8569</td>      <td>1.0000</td>      <td>0.7173</td>      <td>0.4312</td>      <td>0.5802</td>      <td>0.4929</td>      <td>0.0902</td>    </tr>    <tr>      <th>X3</th>      <td>0.9287</td>      <td>0.6965</td>      <td>0.7173</td>      <td>1.0000</td>      <td>0.8780</td>      <td>0.8542</td>      <td>0.8692</td>      <td>0.6141</td>    </tr>    <tr>      <th>X4</th>      <td>0.7721</td>      <td>0.3865</td>      <td>0.4312</td>      <td>0.8780</td>      <td>1.0000</td>      <td>0.9235</td>      <td>0.9628</td>      <td>0.8097</td>    </tr>    <tr>      <th>X5</th>      <td>0.8487</td>      <td>0.5107</td>      <td>0.5802</td>      <td>0.8542</td>      <td>0.9235</td>      <td>1.0000</td>      <td>0.9697</td>      <td>0.5653</td>    </tr>    <tr>      <th>X6</th>      <td>0.8116</td>      <td>0.4633</td>      <td>0.4929</td>      <td>0.8692</td>      <td>0.9628</td>      <td>0.9697</td>      <td>1.0000</td>      <td>0.6592</td>    </tr>    <tr>      <th>X7</th>      <td>0.4211</td>      <td>0.0107</td>      <td>0.0902</td>      <td>0.6141</td>      <td>0.8097</td>      <td>0.5653</td>      <td>0.6592</td>      <td>1.0000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#4.1.1.2 矩阵散点图</span></span><br><span class="line">pd.plotting.scatter_matrix(YXdata);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101441556.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#4.1.1.3 相关检验矩阵</span></span><br><span class="line">da.mcor_test(YXdata)</span><br></pre></td></tr></table></figure><pre><code>         Y      X1      X2      X3      X4      X5      X6      X7Y   1.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0205X1  0.8155  1.0000  0.0000  0.0000  0.0349  0.0039  0.0099  0.9554X2  0.8921  0.8569  1.0000  0.0000  0.0173  0.0008  0.0056  0.6353X3  0.9287  0.6965  0.7173  1.0000  0.0000  0.0000  0.0000  0.0003X4  0.7721  0.3865  0.4312  0.8780  1.0000  0.0000  0.0000  0.0000X5  0.8487  0.5107  0.5802  0.8542  0.9235  1.0000  0.0000  0.0011X6  0.8116  0.4633  0.4929  0.8692  0.9628  0.9697  1.0000  0.0001X7  0.4211  0.0107  0.0902  0.6141  0.8097  0.5653  0.6592  1.0000下三角为相关系数，上三角为概率</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#4.1.2 多变量线性回归模型</span></span><br><span class="line"><span class="comment">#4.1.2.2 多元线性回归参数估计</span></span><br><span class="line"><span class="keyword">import</span> statsmodels.formula.api <span class="keyword">as</span> smf  <span class="comment">#根据公式建回归模型</span></span><br><span class="line">M1=smf.ols(<span class="string">&#x27;Y~X1&#x27;</span>,YXdata).fit(); M1.params</span><br><span class="line">M2=smf.ols(<span class="string">&#x27;Y~X1+X2&#x27;</span>,YXdata).fit(); M2.params</span><br><span class="line">M3=smf.ols(<span class="string">&#x27;Y~X1+X2+X3&#x27;</span>,YXdata).fit(); M3.params</span><br><span class="line">Ms=smf.ols(<span class="string">&#x27;Y~X1+X2+X3+X4+X5+X6+X7&#x27;</span>,YXdata).fit(); Ms.params</span><br></pre></td></tr></table></figure><pre><code>Intercept    14.6842X1            0.0603dtype: float64Intercept   -12.4511X1            0.0142X2            1.4599dtype: float64Intercept   -23.9232X1            0.0007X2            0.9201X3            0.8852dtype: float64Intercept    -7.1381X1            0.0085X2            0.9983X3            0.2384X4            0.0069X5            0.0009X6            4.0465X7           10.2607dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3.1.2.3 多元线性回归模型检验</span></span><br><span class="line">M1.summary()</span><br><span class="line">M2.summary()</span><br><span class="line">M3.summary()</span><br><span class="line">Ms.summary()</span><br></pre></td></tr></table></figure><table class="simpletable"><caption>OLS Regression Results</caption><tr>  <th>Dep. Variable:</th>            <td>Y</td>        <th>  R-squared:         </th> <td>   0.665</td></tr><tr>  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.653</td></tr><tr>  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   55.61</td></tr><tr>  <th>Date:</th>             <td>Fri, 10 Dec 2021</td> <th>  Prob (F-statistic):</th> <td>4.02e-08</td></tr><tr>  <th>Time:</th>                 <td>14:34:00</td>     <th>  Log-Likelihood:    </th> <td> -171.88</td></tr><tr>  <th>No. Observations:</th>      <td>    30</td>      <th>  AIC:               </th> <td>   347.8</td></tr><tr>  <th>Df Residuals:</th>          <td>    28</td>      <th>  BIC:               </th> <td>   350.6</td></tr><tr>  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   </tr><tr>  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   </tr></table><table class="simpletable"><tr>      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  </tr><tr>  <th>Intercept</th> <td>   14.6842</td> <td>   25.540</td> <td>    0.575</td> <td> 0.570</td> <td>  -37.632</td> <td>   67.000</td></tr><tr>  <th>X1</th>        <td>    0.0603</td> <td>    0.008</td> <td>    7.457</td> <td> 0.000</td> <td>    0.044</td> <td>    0.077</td></tr></table><table class="simpletable"><tr>  <th>Omnibus:</th>       <td> 2.833</td> <th>  Durbin-Watson:     </th> <td>   1.612</td></tr><tr>  <th>Prob(Omnibus):</th> <td> 0.243</td> <th>  Jarque-Bera (JB):  </th> <td>   2.029</td></tr><tr>  <th>Skew:</th>          <td> 0.637</td> <th>  Prob(JB):          </th> <td>   0.363</td></tr><tr>  <th>Kurtosis:</th>      <td> 3.031</td> <th>  Cond. No.          </th> <td>5.73e+03</td></tr></table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 5.73e+03. This might indicate that there are<br/>strong multicollinearity or other numerical problems.<table class="simpletable"><caption>OLS Regression Results</caption><tr>  <th>Dep. Variable:</th>            <td>Y</td>        <th>  R-squared:         </th> <td>   0.806</td></tr><tr>  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.791</td></tr><tr>  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   55.97</td></tr><tr>  <th>Date:</th>             <td>Fri, 10 Dec 2021</td> <th>  Prob (F-statistic):</th> <td>2.48e-10</td></tr><tr>  <th>Time:</th>                 <td>14:34:00</td>     <th>  Log-Likelihood:    </th> <td> -163.72</td></tr><tr>  <th>No. Observations:</th>      <td>    30</td>      <th>  AIC:               </th> <td>   333.4</td></tr><tr>  <th>Df Residuals:</th>          <td>    27</td>      <th>  BIC:               </th> <td>   337.6</td></tr><tr>  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   </tr><tr>  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   </tr></table><table class="simpletable"><tr>      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  </tr><tr>  <th>Intercept</th> <td>  -12.4511</td> <td>   20.742</td> <td>   -0.600</td> <td> 0.553</td> <td>  -55.010</td> <td>   30.108</td></tr><tr>  <th>X1</th>        <td>    0.0142</td> <td>    0.012</td> <td>    1.169</td> <td> 0.253</td> <td>   -0.011</td> <td>    0.039</td></tr><tr>  <th>X2</th>        <td>    1.4599</td> <td>    0.330</td> <td>    4.419</td> <td> 0.000</td> <td>    0.782</td> <td>    2.138</td></tr></table><table class="simpletable"><tr>  <th>Omnibus:</th>       <td>25.116</td> <th>  Durbin-Watson:     </th> <td>   1.910</td></tr><tr>  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  43.075</td></tr><tr>  <th>Skew:</th>          <td> 1.941</td> <th>  Prob(JB):          </th> <td>4.43e-10</td></tr><tr>  <th>Kurtosis:</th>      <td> 7.403</td> <th>  Cond. No.          </th> <td>6.00e+03</td></tr></table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large,  6e+03. This might indicate that there are<br/>strong multicollinearity or other numerical problems.<table class="simpletable"><caption>OLS Regression Results</caption><tr>  <th>Dep. Variable:</th>            <td>Y</td>        <th>  R-squared:         </th> <td>   0.968</td></tr><tr>  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.964</td></tr><tr>  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   259.2</td></tr><tr>  <th>Date:</th>             <td>Fri, 10 Dec 2021</td> <th>  Prob (F-statistic):</th> <td>1.76e-19</td></tr><tr>  <th>Time:</th>                 <td>14:34:00</td>     <th>  Log-Likelihood:    </th> <td> -136.83</td></tr><tr>  <th>No. Observations:</th>      <td>    30</td>      <th>  AIC:               </th> <td>   281.7</td></tr><tr>  <th>Df Residuals:</th>          <td>    26</td>      <th>  BIC:               </th> <td>   287.3</td></tr><tr>  <th>Df Model:</th>              <td>     3</td>      <th>                     </th>     <td> </td>   </tr><tr>  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   </tr></table><table class="simpletable"><tr>      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  </tr><tr>  <th>Intercept</th> <td>  -23.9232</td> <td>    8.684</td> <td>   -2.755</td> <td> 0.011</td> <td>  -41.772</td> <td>   -6.074</td></tr><tr>  <th>X1</th>        <td>    0.0007</td> <td>    0.005</td> <td>    0.138</td> <td> 0.892</td> <td>   -0.010</td> <td>    0.011</td></tr><tr>  <th>X2</th>        <td>    0.9201</td> <td>    0.145</td> <td>    6.333</td> <td> 0.000</td> <td>    0.621</td> <td>    1.219</td></tr><tr>  <th>X3</th>        <td>    0.8852</td> <td>    0.078</td> <td>   11.408</td> <td> 0.000</td> <td>    0.726</td> <td>    1.045</td></tr></table><table class="simpletable"><tr>  <th>Omnibus:</th>       <td> 3.524</td> <th>  Durbin-Watson:     </th> <td>   2.149</td></tr><tr>  <th>Prob(Omnibus):</th> <td> 0.172</td> <th>  Jarque-Bera (JB):  </th> <td>   2.910</td></tr><tr>  <th>Skew:</th>          <td>-0.758</td> <th>  Prob(JB):          </th> <td>   0.233</td></tr><tr>  <th>Kurtosis:</th>      <td> 2.829</td> <th>  Cond. No.          </th> <td>6.05e+03</td></tr></table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 6.05e+03. This might indicate that there are<br/>strong multicollinearity or other numerical problems.<table class="simpletable"><caption>OLS Regression Results</caption><tr>  <th>Dep. Variable:</th>            <td>Y</td>        <th>  R-squared:         </th> <td>   0.991</td></tr><tr>  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.988</td></tr><tr>  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   329.6</td></tr><tr>  <th>Date:</th>             <td>Fri, 10 Dec 2021</td> <th>  Prob (F-statistic):</th> <td>9.08e-21</td></tr><tr>  <th>Time:</th>                 <td>14:34:01</td>     <th>  Log-Likelihood:    </th> <td> -118.36</td></tr><tr>  <th>No. Observations:</th>      <td>    30</td>      <th>  AIC:               </th> <td>   252.7</td></tr><tr>  <th>Df Residuals:</th>          <td>    22</td>      <th>  BIC:               </th> <td>   263.9</td></tr><tr>  <th>Df Model:</th>              <td>     7</td>      <th>                     </th>     <td> </td>   </tr><tr>  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   </tr></table><table class="simpletable"><tr>      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  </tr><tr>  <th>Intercept</th> <td>   -7.1381</td> <td>    7.243</td> <td>   -0.985</td> <td> 0.335</td> <td>  -22.159</td> <td>    7.883</td></tr><tr>  <th>X1</th>        <td>    0.0085</td> <td>    0.004</td> <td>    2.277</td> <td> 0.033</td> <td>    0.001</td> <td>    0.016</td></tr><tr>  <th>X2</th>        <td>    0.9983</td> <td>    0.107</td> <td>    9.354</td> <td> 0.000</td> <td>    0.777</td> <td>    1.220</td></tr><tr>  <th>X3</th>        <td>    0.2384</td> <td>    0.127</td> <td>    1.879</td> <td> 0.074</td> <td>   -0.025</td> <td>    0.502</td></tr><tr>  <th>X4</th>        <td>    0.0069</td> <td>    0.012</td> <td>    0.566</td> <td> 0.577</td> <td>   -0.018</td> <td>    0.032</td></tr><tr>  <th>X5</th>        <td>    0.0009</td> <td>    0.001</td> <td>    0.748</td> <td> 0.462</td> <td>   -0.002</td> <td>    0.003</td></tr><tr>  <th>X6</th>        <td>    4.0465</td> <td>    3.436</td> <td>    1.178</td> <td> 0.251</td> <td>   -3.079</td> <td>   11.172</td></tr><tr>  <th>X7</th>        <td>   10.2607</td> <td>   23.487</td> <td>    0.437</td> <td> 0.666</td> <td>  -38.449</td> <td>   58.970</td></tr></table><table class="simpletable"><tr>  <th>Omnibus:</th>       <td> 1.261</td> <th>  Durbin-Watson:     </th> <td>   2.370</td></tr><tr>  <th>Prob(Omnibus):</th> <td> 0.532</td> <th>  Jarque-Bera (JB):  </th> <td>   0.425</td></tr><tr>  <th>Skew:</th>          <td>-0.231</td> <th>  Prob(JB):          </th> <td>   0.809</td></tr><tr>  <th>Kurtosis:</th>      <td> 3.355</td> <th>  Cond. No.          </th> <td>1.34e+05</td></tr></table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 1.34e+05. This might indicate that there are<br/>strong multicollinearity or other numerical problems.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt          <span class="comment">#加载基本绘图包</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>];   <span class="comment">#KaiTi SimHei黑体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span>;<span class="comment">#正常显示图中负号</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#4.1.2.4 多元线性回归模型评判</span></span><br><span class="line">et=Ms.resid                    <span class="comment">#模型Ms的残差et</span></span><br><span class="line">plt.plot(et.values,<span class="string">&#x27;.&#x27;</span>);              <span class="comment">#残差图</span></span><br><span class="line">ro=et.corr(et.shift(<span class="number">1</span>));ro <span class="comment">#et.shift(1) =et-1</span></span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x132aa1c0&gt;]-0.18553688673391783</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442240.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DW=<span class="number">2</span>*(<span class="number">1</span>-ro);DW</span><br></pre></td></tr></table></figure><pre><code>2.3710737734678355</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Ms.summary()                        <span class="comment">#回归模型简表</span></span><br><span class="line">Ms.summary2().tables[<span class="number">0</span>]             <span class="comment">#回归模型统计量</span></span><br><span class="line">Ms.summary2().tables[<span class="number">1</span>]             <span class="comment">#回归系数检验表</span></span><br><span class="line">Ms.summary2().tables[<span class="number">2</span>]             <span class="comment">#模型残差分析表</span></span><br><span class="line">Ms.summary2().tables[<span class="number">2</span>][<span class="number">3</span>][<span class="number">0</span>]       <span class="comment">#DW值</span></span><br><span class="line">Ms.summary2().tables[<span class="number">2</span>][<span class="number">3</span>][<span class="number">1</span>]       <span class="comment">#JB值</span></span><br><span class="line">Ms.summary2().tables[<span class="number">2</span>][<span class="number">3</span>][<span class="number">2</span>]       <span class="comment">#JB概率</span></span><br><span class="line">R2=Ms.summary2().tables[<span class="number">0</span>][<span class="number">1</span>][<span class="number">6</span>];R2 <span class="comment">#模型的决定系数R2</span></span><br><span class="line">Ms.summary2().tables[<span class="number">0</span>][<span class="number">3</span>][<span class="number">0</span>]       <span class="comment">#adj.R2</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line">R=sqrt(<span class="built_in">float</span>(R2));R</span><br><span class="line"><span class="keyword">from</span> statsmodels.iolib.summary2 <span class="keyword">import</span> summary_col</span><br><span class="line">summary_col([M1,M2,M3,Ms])        <span class="comment">#模型结果比较</span></span><br></pre></td></tr></table></figure><table class="simpletable"><caption>OLS Regression Results</caption><tr>  <th>Dep. Variable:</th>            <td>Y</td>        <th>  R-squared:         </th> <td>   0.991</td></tr><tr>  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.988</td></tr><tr>  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   329.6</td></tr><tr>  <th>Date:</th>             <td>Fri, 10 Dec 2021</td> <th>  Prob (F-statistic):</th> <td>9.08e-21</td></tr><tr>  <th>Time:</th>                 <td>14:34:01</td>     <th>  Log-Likelihood:    </th> <td> -118.36</td></tr><tr>  <th>No. Observations:</th>      <td>    30</td>      <th>  AIC:               </th> <td>   252.7</td></tr><tr>  <th>Df Residuals:</th>          <td>    22</td>      <th>  BIC:               </th> <td>   263.9</td></tr><tr>  <th>Df Model:</th>              <td>     7</td>      <th>                     </th>     <td> </td>   </tr><tr>  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   </tr></table><table class="simpletable"><tr>      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  </tr><tr>  <th>Intercept</th> <td>   -7.1381</td> <td>    7.243</td> <td>   -0.985</td> <td> 0.335</td> <td>  -22.159</td> <td>    7.883</td></tr><tr>  <th>X1</th>        <td>    0.0085</td> <td>    0.004</td> <td>    2.277</td> <td> 0.033</td> <td>    0.001</td> <td>    0.016</td></tr><tr>  <th>X2</th>        <td>    0.9983</td> <td>    0.107</td> <td>    9.354</td> <td> 0.000</td> <td>    0.777</td> <td>    1.220</td></tr><tr>  <th>X3</th>        <td>    0.2384</td> <td>    0.127</td> <td>    1.879</td> <td> 0.074</td> <td>   -0.025</td> <td>    0.502</td></tr><tr>  <th>X4</th>        <td>    0.0069</td> <td>    0.012</td> <td>    0.566</td> <td> 0.577</td> <td>   -0.018</td> <td>    0.032</td></tr><tr>  <th>X5</th>        <td>    0.0009</td> <td>    0.001</td> <td>    0.748</td> <td> 0.462</td> <td>   -0.002</td> <td>    0.003</td></tr><tr>  <th>X6</th>        <td>    4.0465</td> <td>    3.436</td> <td>    1.178</td> <td> 0.251</td> <td>   -3.079</td> <td>   11.172</td></tr><tr>  <th>X7</th>        <td>   10.2607</td> <td>   23.487</td> <td>    0.437</td> <td> 0.666</td> <td>  -38.449</td> <td>   58.970</td></tr></table><table class="simpletable"><tr>  <th>Omnibus:</th>       <td> 1.261</td> <th>  Durbin-Watson:     </th> <td>   2.370</td></tr><tr>  <th>Prob(Omnibus):</th> <td> 0.532</td> <th>  Jarque-Bera (JB):  </th> <td>   0.425</td></tr><tr>  <th>Skew:</th>          <td>-0.231</td> <th>  Prob(JB):          </th> <td>   0.809</td></tr><tr>  <th>Kurtosis:</th>      <td> 3.355</td> <th>  Cond. No.          </th> <td>1.34e+05</td></tr></table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 1.34e+05. This might indicate that there are<br/>strong multicollinearity or other numerical problems.<div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Model:</td>      <td>OLS</td>      <td>Adj. R-squared:</td>      <td>0.988</td>    </tr>    <tr>      <th>1</th>      <td>Dependent Variable:</td>      <td>Y</td>      <td>AIC:</td>      <td>252.7118</td>    </tr>    <tr>      <th>2</th>      <td>Date:</td>      <td>2021-12-10 14:34</td>      <td>BIC:</td>      <td>263.9214</td>    </tr>    <tr>      <th>3</th>      <td>No. Observations:</td>      <td>30</td>      <td>Log-Likelihood:</td>      <td>-118.36</td>    </tr>    <tr>      <th>4</th>      <td>Df Model:</td>      <td>7</td>      <td>F-statistic:</td>      <td>329.6</td>    </tr>    <tr>      <th>5</th>      <td>Df Residuals:</td>      <td>22</td>      <td>Prob (F-statistic):</td>      <td>9.08e-21</td>    </tr>    <tr>      <th>6</th>      <td>R-squared:</td>      <td>0.991</td>      <td>Scale:</td>      <td>213.29</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Coef.</th>      <th>Std.Err.</th>      <th>t</th>      <th>P&gt;|t|</th>      <th>[0.025</th>      <th>0.975]</th>    </tr>  </thead>  <tbody>    <tr>      <th>Intercept</th>      <td>-7.1381</td>      <td>7.2431</td>      <td>-0.9855</td>      <td>3.3510e-01</td>      <td>-22.1594</td>      <td>7.8833</td>    </tr>    <tr>      <th>X1</th>      <td>0.0085</td>      <td>0.0037</td>      <td>2.2767</td>      <td>3.2889e-02</td>      <td>0.0008</td>      <td>0.0162</td>    </tr>    <tr>      <th>X2</th>      <td>0.9983</td>      <td>0.1067</td>      <td>9.3544</td>      <td>4.0080e-09</td>      <td>0.7770</td>      <td>1.2196</td>    </tr>    <tr>      <th>X3</th>      <td>0.2384</td>      <td>0.1269</td>      <td>1.8786</td>      <td>7.3612e-02</td>      <td>-0.0248</td>      <td>0.5017</td>    </tr>    <tr>      <th>X4</th>      <td>0.0069</td>      <td>0.0122</td>      <td>0.5657</td>      <td>5.7729e-01</td>      <td>-0.0184</td>      <td>0.0323</td>    </tr>    <tr>      <th>X5</th>      <td>0.0009</td>      <td>0.0012</td>      <td>0.7479</td>      <td>4.6243e-01</td>      <td>-0.0016</td>      <td>0.0034</td>    </tr>    <tr>      <th>X6</th>      <td>4.0465</td>      <td>3.4358</td>      <td>1.1777</td>      <td>2.5148e-01</td>      <td>-3.0789</td>      <td>11.1719</td>    </tr>    <tr>      <th>X7</th>      <td>10.2607</td>      <td>23.4872</td>      <td>0.4369</td>      <td>6.6647e-01</td>      <td>-38.4488</td>      <td>58.9702</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Omnibus:</td>      <td>1.261</td>      <td>Durbin-Watson:</td>      <td>2.370</td>    </tr>    <tr>      <th>1</th>      <td>Prob(Omnibus):</td>      <td>0.532</td>      <td>Jarque-Bera (JB):</td>      <td>0.425</td>    </tr>    <tr>      <th>2</th>      <td>Skew:</td>      <td>-0.231</td>      <td>Prob(JB):</td>      <td>0.809</td>    </tr>    <tr>      <th>3</th>      <td>Kurtosis:</td>      <td>3.355</td>      <td>Condition No.:</td>      <td>134156</td>    </tr>  </tbody></table></div><pre><code>&#39;2.370&#39;&#39;0.425&#39;&#39;0.809&#39;&#39;0.991&#39;&#39;0.988&#39;0.9954898291795853</code></pre><table class="simpletable"><tr>         <td></td>           <th>Y I</th>      <th>Y II</th>      <th>Y III</th>   <th>Y IIII</th>  </tr><tr>  <th>Intercept</th>       <td>14.6842</td>  <td>-12.4511</td>  <td>-23.9232</td>  <td>-7.1381</td> </tr><tr>  <th></th>               <td>(25.5399)</td> <td>(20.7420)</td> <td>(8.6835)</td> <td>(7.2431)</td> </tr><tr>  <th>R-squared</th>       <td>0.6651</td>    <td>0.8057</td>    <td>0.9676</td>   <td>0.9906</td>  </tr><tr>  <th>R-squared Adj.</th>  <td>0.6531</td>    <td>0.7913</td>    <td>0.9639</td>   <td>0.9876</td>  </tr><tr>  <th>X1</th>              <td>0.0603</td>    <td>0.0142</td>    <td>0.0007</td>   <td>0.0085</td>  </tr><tr>  <th></th>               <td>(0.0081)</td>  <td>(0.0122)</td>  <td>(0.0052)</td> <td>(0.0037)</td> </tr><tr>  <th>X2</th>                 <td></td>       <td>1.4599</td>    <td>0.9201</td>   <td>0.9983</td>  </tr><tr>  <th></th>                   <td></td>      <td>(0.3304)</td>  <td>(0.1453)</td> <td>(0.1067)</td> </tr><tr>  <th>X3</th>                 <td></td>          <td></td>       <td>0.8852</td>   <td>0.2384</td>  </tr><tr>  <th></th>                   <td></td>          <td></td>      <td>(0.0776)</td> <td>(0.1269)</td> </tr><tr>  <th>X4</th>                 <td></td>          <td></td>          <td></td>      <td>0.0069</td>  </tr><tr>  <th></th>                   <td></td>          <td></td>          <td></td>     <td>(0.0122)</td> </tr><tr>  <th>X5</th>                 <td></td>          <td></td>          <td></td>      <td>0.0009</td>  </tr><tr>  <th></th>                   <td></td>          <td></td>          <td></td>     <td>(0.0012)</td> </tr><tr>  <th>X6</th>                 <td></td>          <td></td>          <td></td>      <td>4.0465</td>  </tr><tr>  <th></th>                   <td></td>          <td></td>          <td></td>     <td>(3.4358)</td> </tr><tr>  <th>X7</th>                 <td></td>          <td></td>          <td></td>      <td>10.2607</td> </tr><tr>  <th></th>                   <td></td>          <td></td>          <td></td>     <td>(23.4872)</td></tr></table><h2 id="4-2-综合评价方法"><a href="#4-2-综合评价方法" class="headerlink" title="4.2 综合评价方法"></a>4.2 综合评价方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#4.2.1 综合评价指标体系</span></span><br><span class="line"><span class="comment">#4.2.1.1 评价指标体系的构建</span></span><br><span class="line"><span class="comment">#4.2.1.2 评价指标的基本分析</span></span><br><span class="line"><span class="comment">#### 单变量排名</span></span><br><span class="line">MVdata</span><br><span class="line">GDP=pd.DataFrame(MVdata.生产总值);GDP</span><br><span class="line">GDP[<span class="string">&#x27;排序&#x27;</span>]=(-GDP).rank(); GDP <span class="comment">#GDP[&#x27;排序&#x27;]=GDP.rank(ascending=False);</span></span><br><span class="line"><span class="comment">#### 单多量排名</span></span><br><span class="line">(-MVdata).rank()  <span class="comment">#MVdata.rank(ascending=False)</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>生产总值</th>      <th>从业人员</th>      <th>固定资产</th>      <th>利用外资</th>      <th>进出口额</th>      <th>新品出口</th>      <th>市场占有</th>      <th>对外依存</th>    </tr>    <tr>      <th>地区</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>北京</th>      <td>162.5193</td>      <td>1069.7000</td>      <td>55.7893</td>      <td>196.906</td>      <td>3894.9</td>      <td>6470.514</td>      <td>2.6347</td>      <td>1.5479</td>    </tr>    <tr>      <th>天津</th>      <td>113.0728</td>      <td>763.1600</td>      <td>70.6767</td>      <td>61.947</td>      <td>1033.9</td>      <td>7490.317</td>      <td>1.9862</td>      <td>0.5906</td>    </tr>    <tr>      <th>河北</th>      <td>245.1576</td>      <td>3962.4200</td>      <td>163.8933</td>      <td>178.782</td>      <td>536.0</td>      <td>2288.188</td>      <td>1.2756</td>      <td>0.1412</td>    </tr>    <tr>      <th>山西</th>      <td>112.3755</td>      <td>1738.9000</td>      <td>70.7306</td>      <td>104.945</td>      <td>147.6</td>      <td>1522.788</td>      <td>0.2424</td>      <td>0.0848</td>    </tr>    <tr>      <th>内蒙古</th>      <td>143.5988</td>      <td>1249.3000</td>      <td>103.6517</td>      <td>54.426</td>      <td>119.4</td>      <td>342.358</td>      <td>0.2093</td>      <td>0.0537</td>    </tr>    <tr>      <th>辽宁</th>      <td>222.2670</td>      <td>2364.9000</td>      <td>177.2629</td>      <td>155.296</td>      <td>959.6</td>      <td>4150.239</td>      <td>2.2781</td>      <td>0.2788</td>    </tr>    <tr>      <th>吉林</th>      <td>105.6883</td>      <td>1337.8000</td>      <td>74.4171</td>      <td>58.843</td>      <td>220.5</td>      <td>746.941</td>      <td>0.2232</td>      <td>0.1348</td>    </tr>    <tr>      <th>黑龙江</th>      <td>125.8200</td>      <td>1977.8000</td>      <td>74.7538</td>      <td>81.979</td>      <td>385.1</td>      <td>318.892</td>      <td>0.7887</td>      <td>0.1977</td>    </tr>    <tr>      <th>上海</th>      <td>191.9569</td>      <td>1104.3300</td>      <td>49.6207</td>      <td>179.582</td>      <td>4373.1</td>      <td>10326.436</td>      <td>9.3591</td>      <td>1.4714</td>    </tr>    <tr>      <th>江苏</th>      <td>491.1027</td>      <td>4758.2300</td>      <td>266.9262</td>      <td>261.118</td>      <td>5397.6</td>      <td>43928.942</td>      <td>13.9531</td>      <td>0.7099</td>    </tr>    <tr>      <th>浙江</th>      <td>323.1885</td>      <td>3680.0000</td>      <td>141.8528</td>      <td>239.452</td>      <td>3094.0</td>      <td>25355.077</td>      <td>9.6568</td>      <td>0.6183</td>    </tr>    <tr>      <th>安徽</th>      <td>153.0065</td>      <td>4120.9000</td>      <td>124.5569</td>      <td>92.613</td>      <td>313.4</td>      <td>2344.049</td>      <td>0.7623</td>      <td>0.1323</td>    </tr>    <tr>      <th>福建</th>      <td>175.6018</td>      <td>2459.9900</td>      <td>99.1089</td>      <td>92.158</td>      <td>1435.6</td>      <td>7957.495</td>      <td>4.1437</td>      <td>0.5280</td>    </tr>    <tr>      <th>江西</th>      <td>117.0282</td>      <td>2532.6000</td>      <td>90.8760</td>      <td>71.531</td>      <td>315.6</td>      <td>1301.037</td>      <td>0.9766</td>      <td>0.1742</td>    </tr>    <tr>      <th>山东</th>      <td>453.6185</td>      <td>6485.6000</td>      <td>267.4968</td>      <td>223.057</td>      <td>2359.9</td>      <td>17688.021</td>      <td>5.6144</td>      <td>0.3360</td>    </tr>    <tr>      <th>河南</th>      <td>269.3103</td>      <td>6198.0000</td>      <td>177.6895</td>      <td>147.022</td>      <td>326.4</td>      <td>2176.170</td>      <td>0.8587</td>      <td>0.0783</td>    </tr>    <tr>      <th>湖北</th>      <td>196.3226</td>      <td>3672.0000</td>      <td>125.5734</td>      <td>113.434</td>      <td>335.2</td>      <td>1614.369</td>      <td>0.8717</td>      <td>0.1103</td>    </tr>    <tr>      <th>湖南</th>      <td>196.6956</td>      <td>4005.0300</td>      <td>118.8092</td>      <td>106.234</td>      <td>190.0</td>      <td>1814.498</td>      <td>0.4419</td>      <td>0.0624</td>    </tr>    <tr>      <th>广东</th>      <td>532.1028</td>      <td>5960.7434</td>      <td>170.6920</td>      <td>410.616</td>      <td>9134.8</td>      <td>56849.072</td>      <td>23.7420</td>      <td>1.1088</td>    </tr>    <tr>      <th>广西</th>      <td>117.2087</td>      <td>2936.0000</td>      <td>79.9066</td>      <td>66.822</td>      <td>233.5</td>      <td>641.547</td>      <td>0.5561</td>      <td>0.1287</td>    </tr>    <tr>      <th>海南</th>      <td>25.2266</td>      <td>459.2222</td>      <td>16.5723</td>      <td>18.885</td>      <td>127.6</td>      <td>185.490</td>      <td>0.1134</td>      <td>0.3267</td>    </tr>    <tr>      <th>重庆</th>      <td>100.1137</td>      <td>1590.1600</td>      <td>74.7338</td>      <td>70.117</td>      <td>292.2</td>      <td>3928.448</td>      <td>0.8855</td>      <td>0.1885</td>    </tr>    <tr>      <th>四川</th>      <td>210.2668</td>      <td>4785.5000</td>      <td>142.2222</td>      <td>162.007</td>      <td>477.8</td>      <td>1233.514</td>      <td>1.2966</td>      <td>0.1468</td>    </tr>    <tr>      <th>贵州</th>      <td>57.0184</td>      <td>1792.8000</td>      <td>42.3592</td>      <td>39.441</td>      <td>48.8</td>      <td>308.647</td>      <td>0.1335</td>      <td>0.0553</td>    </tr>    <tr>      <th>云南</th>      <td>88.9312</td>      <td>2857.2400</td>      <td>61.9100</td>      <td>66.849</td>      <td>160.5</td>      <td>257.761</td>      <td>0.4227</td>      <td>0.1166</td>    </tr>    <tr>      <th>陕西</th>      <td>125.1230</td>      <td>2059.0200</td>      <td>94.3108</td>      <td>92.209</td>      <td>146.2</td>      <td>408.447</td>      <td>0.3129</td>      <td>0.0755</td>    </tr>    <tr>      <th>甘肃</th>      <td>50.2037</td>      <td>1500.3000</td>      <td>39.6579</td>      <td>42.500</td>      <td>87.4</td>      <td>300.885</td>      <td>0.0964</td>      <td>0.1124</td>    </tr>    <tr>      <th>青海</th>      <td>16.7044</td>      <td>309.1800</td>      <td>14.3558</td>      <td>10.488</td>      <td>9.2</td>      <td>0.296</td>      <td>0.0295</td>      <td>0.0356</td>    </tr>    <tr>      <th>宁夏</th>      <td>21.0221</td>      <td>339.6000</td>      <td>16.4474</td>      <td>13.563</td>      <td>22.9</td>      <td>196.998</td>      <td>0.0714</td>      <td>0.0704</td>    </tr>    <tr>      <th>新疆</th>      <td>66.1005</td>      <td>953.3400</td>      <td>46.3214</td>      <td>44.409</td>      <td>228.2</td>      <td>83.385</td>      <td>0.7512</td>      <td>0.2230</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>生产总值</th>    </tr>    <tr>      <th>地区</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>北京</th>      <td>162.5193</td>    </tr>    <tr>      <th>天津</th>      <td>113.0728</td>    </tr>    <tr>      <th>河北</th>      <td>245.1576</td>    </tr>    <tr>      <th>山西</th>      <td>112.3755</td>    </tr>    <tr>      <th>内蒙古</th>      <td>143.5988</td>    </tr>    <tr>      <th>辽宁</th>      <td>222.2670</td>    </tr>    <tr>      <th>吉林</th>      <td>105.6883</td>    </tr>    <tr>      <th>黑龙江</th>      <td>125.8200</td>    </tr>    <tr>      <th>上海</th>      <td>191.9569</td>    </tr>    <tr>      <th>江苏</th>      <td>491.1027</td>    </tr>    <tr>      <th>浙江</th>      <td>323.1885</td>    </tr>    <tr>      <th>安徽</th>      <td>153.0065</td>    </tr>    <tr>      <th>福建</th>      <td>175.6018</td>    </tr>    <tr>      <th>江西</th>      <td>117.0282</td>    </tr>    <tr>      <th>山东</th>      <td>453.6185</td>    </tr>    <tr>      <th>河南</th>      <td>269.3103</td>    </tr>    <tr>      <th>湖北</th>      <td>196.3226</td>    </tr>    <tr>      <th>湖南</th>      <td>196.6956</td>    </tr>    <tr>      <th>广东</th>      <td>532.1028</td>    </tr>    <tr>      <th>广西</th>      <td>117.2087</td>    </tr>    <tr>      <th>海南</th>      <td>25.2266</td>    </tr>    <tr>      <th>重庆</th>      <td>100.1137</td>    </tr>    <tr>      <th>四川</th>      <td>210.2668</td>    </tr>    <tr>      <th>贵州</th>      <td>57.0184</td>    </tr>    <tr>      <th>云南</th>      <td>88.9312</td>    </tr>    <tr>      <th>陕西</th>      <td>125.1230</td>    </tr>    <tr>      <th>甘肃</th>      <td>50.2037</td>    </tr>    <tr>      <th>青海</th>      <td>16.7044</td>    </tr>    <tr>      <th>宁夏</th>      <td>21.0221</td>    </tr>    <tr>      <th>新疆</th>      <td>66.1005</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>生产总值</th>      <th>排序</th>    </tr>    <tr>      <th>地区</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>北京</th>      <td>162.5193</td>      <td>13.0</td>    </tr>    <tr>      <th>天津</th>      <td>113.0728</td>      <td>20.0</td>    </tr>    <tr>      <th>河北</th>      <td>245.1576</td>      <td>6.0</td>    </tr>    <tr>      <th>山西</th>      <td>112.3755</td>      <td>21.0</td>    </tr>    <tr>      <th>内蒙古</th>      <td>143.5988</td>      <td>15.0</td>    </tr>    <tr>      <th>辽宁</th>      <td>222.2670</td>      <td>7.0</td>    </tr>    <tr>      <th>吉林</th>      <td>105.6883</td>      <td>22.0</td>    </tr>    <tr>      <th>黑龙江</th>      <td>125.8200</td>      <td>16.0</td>    </tr>    <tr>      <th>上海</th>      <td>191.9569</td>      <td>11.0</td>    </tr>    <tr>      <th>江苏</th>      <td>491.1027</td>      <td>2.0</td>    </tr>    <tr>      <th>浙江</th>      <td>323.1885</td>      <td>4.0</td>    </tr>    <tr>      <th>安徽</th>      <td>153.0065</td>      <td>14.0</td>    </tr>    <tr>      <th>福建</th>      <td>175.6018</td>      <td>12.0</td>    </tr>    <tr>      <th>江西</th>      <td>117.0282</td>      <td>19.0</td>    </tr>    <tr>      <th>山东</th>      <td>453.6185</td>      <td>3.0</td>    </tr>    <tr>      <th>河南</th>      <td>269.3103</td>      <td>5.0</td>    </tr>    <tr>      <th>湖北</th>      <td>196.3226</td>      <td>10.0</td>    </tr>    <tr>      <th>湖南</th>      <td>196.6956</td>      <td>9.0</td>    </tr>    <tr>      <th>广东</th>      <td>532.1028</td>      <td>1.0</td>    </tr>    <tr>      <th>广西</th>      <td>117.2087</td>      <td>18.0</td>    </tr>    <tr>      <th>海南</th>      <td>25.2266</td>      <td>28.0</td>    </tr>    <tr>      <th>重庆</th>      <td>100.1137</td>      <td>23.0</td>    </tr>    <tr>      <th>四川</th>      <td>210.2668</td>      <td>8.0</td>    </tr>    <tr>      <th>贵州</th>      <td>57.0184</td>      <td>26.0</td>    </tr>    <tr>      <th>云南</th>      <td>88.9312</td>      <td>24.0</td>    </tr>    <tr>      <th>陕西</th>      <td>125.1230</td>      <td>17.0</td>    </tr>    <tr>      <th>甘肃</th>      <td>50.2037</td>      <td>27.0</td>    </tr>    <tr>      <th>青海</th>      <td>16.7044</td>      <td>30.0</td>    </tr>    <tr>      <th>宁夏</th>      <td>21.0221</td>      <td>29.0</td>    </tr>    <tr>      <th>新疆</th>      <td>66.1005</td>      <td>25.0</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>生产总值</th>      <th>从业人员</th>      <th>固定资产</th>      <th>利用外资</th>      <th>进出口额</th>      <th>新品出口</th>      <th>市场占有</th>      <th>对外依存</th>    </tr>    <tr>      <th>地区</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>北京</th>      <td>13.0</td>      <td>25.0</td>      <td>23.0</td>      <td>5.0</td>      <td>4.0</td>      <td>8.0</td>      <td>7.0</td>      <td>1.0</td>    </tr>    <tr>      <th>天津</th>      <td>20.0</td>      <td>27.0</td>      <td>21.0</td>      <td>22.0</td>      <td>8.0</td>      <td>7.0</td>      <td>9.0</td>      <td>6.0</td>    </tr>    <tr>      <th>河北</th>      <td>6.0</td>      <td>8.0</td>      <td>6.0</td>      <td>7.0</td>      <td>10.0</td>      <td>12.0</td>      <td>11.0</td>      <td>16.0</td>    </tr>    <tr>      <th>山西</th>      <td>21.0</td>      <td>19.0</td>      <td>20.0</td>      <td>13.0</td>      <td>23.0</td>      <td>16.0</td>      <td>23.0</td>      <td>23.0</td>    </tr>    <tr>      <th>内蒙古</th>      <td>15.0</td>      <td>23.0</td>      <td>12.0</td>      <td>24.0</td>      <td>26.0</td>      <td>22.0</td>      <td>25.0</td>      <td>29.0</td>    </tr>    <tr>      <th>辽宁</th>      <td>7.0</td>      <td>15.0</td>      <td>4.0</td>      <td>9.0</td>      <td>9.0</td>      <td>9.0</td>      <td>8.0</td>      <td>10.0</td>    </tr>    <tr>      <th>吉林</th>      <td>22.0</td>      <td>22.0</td>      <td>19.0</td>      <td>23.0</td>      <td>20.0</td>      <td>19.0</td>      <td>24.0</td>      <td>17.0</td>    </tr>    <tr>      <th>黑龙江</th>      <td>16.0</td>      <td>17.0</td>      <td>17.0</td>      <td>17.0</td>      <td>12.0</td>      <td>23.0</td>      <td>16.0</td>      <td>12.0</td>    </tr>    <tr>      <th>上海</th>      <td>11.0</td>      <td>24.0</td>      <td>24.0</td>      <td>6.0</td>      <td>3.0</td>      <td>5.0</td>      <td>4.0</td>      <td>2.0</td>    </tr>    <tr>      <th>江苏</th>      <td>2.0</td>      <td>5.0</td>      <td>2.0</td>      <td>2.0</td>      <td>2.0</td>      <td>2.0</td>      <td>2.0</td>      <td>4.0</td>    </tr>    <tr>      <th>浙江</th>      <td>4.0</td>      <td>9.0</td>      <td>8.0</td>      <td>3.0</td>      <td>5.0</td>      <td>3.0</td>      <td>3.0</td>      <td>5.0</td>    </tr>    <tr>      <th>安徽</th>      <td>14.0</td>      <td>6.0</td>      <td>10.0</td>      <td>14.0</td>      <td>16.0</td>      <td>11.0</td>      <td>17.0</td>      <td>18.0</td>    </tr>    <tr>      <th>福建</th>      <td>12.0</td>      <td>14.0</td>      <td>13.0</td>      <td>16.0</td>      <td>7.0</td>      <td>6.0</td>      <td>6.0</td>      <td>7.0</td>    </tr>    <tr>      <th>江西</th>      <td>19.0</td>      <td>13.0</td>      <td>15.0</td>      <td>18.0</td>      <td>15.0</td>      <td>17.0</td>      <td>12.0</td>      <td>14.0</td>    </tr>    <tr>      <th>山东</th>      <td>3.0</td>      <td>1.0</td>      <td>1.0</td>      <td>4.0</td>      <td>6.0</td>      <td>4.0</td>      <td>5.0</td>      <td>8.0</td>    </tr>    <tr>      <th>河南</th>      <td>5.0</td>      <td>2.0</td>      <td>3.0</td>      <td>10.0</td>      <td>14.0</td>      <td>13.0</td>      <td>15.0</td>      <td>24.0</td>    </tr>    <tr>      <th>湖北</th>      <td>10.0</td>      <td>10.0</td>      <td>9.0</td>      <td>11.0</td>      <td>13.0</td>      <td>15.0</td>      <td>14.0</td>      <td>22.0</td>    </tr>    <tr>      <th>湖南</th>      <td>9.0</td>      <td>7.0</td>      <td>11.0</td>      <td>12.0</td>      <td>21.0</td>      <td>14.0</td>      <td>20.0</td>      <td>27.0</td>    </tr>    <tr>      <th>广东</th>      <td>1.0</td>      <td>3.0</td>      <td>5.0</td>      <td>1.0</td>      <td>1.0</td>      <td>1.0</td>      <td>1.0</td>      <td>3.0</td>    </tr>    <tr>      <th>广西</th>      <td>18.0</td>      <td>11.0</td>      <td>16.0</td>      <td>21.0</td>      <td>18.0</td>      <td>20.0</td>      <td>19.0</td>      <td>19.0</td>    </tr>    <tr>      <th>海南</th>      <td>28.0</td>      <td>28.0</td>      <td>28.0</td>      <td>28.0</td>      <td>25.0</td>      <td>28.0</td>      <td>27.0</td>      <td>9.0</td>    </tr>    <tr>      <th>重庆</th>      <td>23.0</td>      <td>20.0</td>      <td>18.0</td>      <td>19.0</td>      <td>17.0</td>      <td>10.0</td>      <td>13.0</td>      <td>13.0</td>    </tr>    <tr>      <th>四川</th>      <td>8.0</td>      <td>4.0</td>      <td>7.0</td>      <td>8.0</td>      <td>11.0</td>      <td>18.0</td>      <td>10.0</td>      <td>15.0</td>    </tr>    <tr>      <th>贵州</th>      <td>26.0</td>      <td>18.0</td>      <td>26.0</td>      <td>27.0</td>      <td>28.0</td>      <td>24.0</td>      <td>26.0</td>      <td>28.0</td>    </tr>    <tr>      <th>云南</th>      <td>24.0</td>      <td>12.0</td>      <td>22.0</td>      <td>20.0</td>      <td>22.0</td>      <td>26.0</td>      <td>21.0</td>      <td>20.0</td>    </tr>    <tr>      <th>陕西</th>      <td>17.0</td>      <td>16.0</td>      <td>14.0</td>      <td>15.0</td>      <td>24.0</td>      <td>21.0</td>      <td>22.0</td>      <td>25.0</td>    </tr>    <tr>      <th>甘肃</th>      <td>27.0</td>      <td>21.0</td>      <td>27.0</td>      <td>26.0</td>      <td>27.0</td>      <td>25.0</td>      <td>28.0</td>      <td>21.0</td>    </tr>    <tr>      <th>青海</th>      <td>30.0</td>      <td>30.0</td>      <td>30.0</td>      <td>30.0</td>      <td>30.0</td>      <td>30.0</td>      <td>30.0</td>      <td>30.0</td>    </tr>    <tr>      <th>宁夏</th>      <td>29.0</td>      <td>29.0</td>      <td>29.0</td>      <td>29.0</td>      <td>29.0</td>      <td>27.0</td>      <td>29.0</td>      <td>26.0</td>    </tr>    <tr>      <th>新疆</th>      <td>25.0</td>      <td>26.0</td>      <td>25.0</td>      <td>25.0</td>      <td>19.0</td>      <td>29.0</td>      <td>18.0</td>      <td>11.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#4.2.2 综合评价分析方法</span></span><br><span class="line"><span class="comment">#4.2.2.1 指标的无量纲化</span></span><br><span class="line"><span class="comment">#标准化法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bz</span>(<span class="params">x</span>):</span> <span class="keyword">return</span> (x-x.mean())/x.std() <span class="comment">#bz=lambda x: (x-x.mean())/x.std()</span></span><br><span class="line">BZ=MVdata.apply(bz,<span class="number">0</span>);  <span class="comment">#BZ=(MVdata-MVdata.mean())/MVdata.std()</span></span><br><span class="line"><span class="built_in">round</span>(BZ,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>生产总值</th>      <th>从业人员</th>      <th>固定资产</th>      <th>利用外资</th>      <th>进出口额</th>      <th>新品出口</th>      <th>市场占有</th>      <th>对外依存</th>    </tr>    <tr>      <th>地区</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>北京</th>      <td>-0.085</td>      <td>-0.884</td>      <td>-0.705</td>      <td>0.931</td>      <td>1.300</td>      <td>-0.020</td>      <td>-0.036</td>      <td>3.031</td>    </tr>    <tr>      <th>天津</th>      <td>-0.463</td>      <td>-1.057</td>      <td>-0.477</td>      <td>-0.608</td>      <td>-0.087</td>      <td>0.057</td>      <td>-0.162</td>      <td>0.653</td>    </tr>    <tr>      <th>河北</th>      <td>0.547</td>      <td>0.751</td>      <td>0.953</td>      <td>0.724</td>      <td>-0.329</td>      <td>-0.336</td>      <td>-0.299</td>      <td>-0.464</td>    </tr>    <tr>      <th>山西</th>      <td>-0.468</td>      <td>-0.506</td>      <td>-0.476</td>      <td>-0.117</td>      <td>-0.517</td>      <td>-0.394</td>      <td>-0.499</td>      <td>-0.604</td>    </tr>    <tr>      <th>内蒙古</th>      <td>-0.229</td>      <td>-0.783</td>      <td>0.029</td>      <td>-0.693</td>      <td>-0.531</td>      <td>-0.483</td>      <td>-0.506</td>      <td>-0.682</td>    </tr>    <tr>      <th>辽宁</th>      <td>0.372</td>      <td>-0.152</td>      <td>1.158</td>      <td>0.457</td>      <td>-0.123</td>      <td>-0.196</td>      <td>-0.105</td>      <td>-0.122</td>    </tr>    <tr>      <th>吉林</th>      <td>-0.519</td>      <td>-0.733</td>      <td>-0.420</td>      <td>-0.643</td>      <td>-0.482</td>      <td>-0.453</td>      <td>-0.503</td>      <td>-0.480</td>    </tr>    <tr>      <th>黑龙江</th>      <td>-0.365</td>      <td>-0.371</td>      <td>-0.414</td>      <td>-0.379</td>      <td>-0.402</td>      <td>-0.485</td>      <td>-0.394</td>      <td>-0.324</td>    </tr>    <tr>      <th>上海</th>      <td>0.140</td>      <td>-0.865</td>      <td>-0.800</td>      <td>0.734</td>      <td>1.532</td>      <td>0.271</td>      <td>1.265</td>      <td>2.841</td>    </tr>    <tr>      <th>江苏</th>      <td>2.426</td>      <td>1.201</td>      <td>2.533</td>      <td>1.663</td>      <td>2.029</td>      <td>2.809</td>      <td>2.154</td>      <td>0.949</td>    </tr>    <tr>      <th>浙江</th>      <td>1.143</td>      <td>0.591</td>      <td>0.615</td>      <td>1.416</td>      <td>0.912</td>      <td>1.406</td>      <td>1.323</td>      <td>0.721</td>    </tr>    <tr>      <th>安徽</th>      <td>-0.157</td>      <td>0.840</td>      <td>0.349</td>      <td>-0.258</td>      <td>-0.436</td>      <td>-0.332</td>      <td>-0.399</td>      <td>-0.486</td>    </tr>    <tr>      <th>福建</th>      <td>0.015</td>      <td>-0.098</td>      <td>-0.041</td>      <td>-0.263</td>      <td>0.108</td>      <td>0.092</td>      <td>0.256</td>      <td>0.497</td>    </tr>    <tr>      <th>江西</th>      <td>-0.432</td>      <td>-0.057</td>      <td>-0.167</td>      <td>-0.498</td>      <td>-0.435</td>      <td>-0.411</td>      <td>-0.357</td>      <td>-0.382</td>    </tr>    <tr>      <th>山东</th>      <td>2.139</td>      <td>2.177</td>      <td>2.542</td>      <td>1.229</td>      <td>0.556</td>      <td>0.827</td>      <td>0.540</td>      <td>0.020</td>    </tr>    <tr>      <th>河南</th>      <td>0.731</td>      <td>2.014</td>      <td>1.164</td>      <td>0.362</td>      <td>-0.430</td>      <td>-0.345</td>      <td>-0.380</td>      <td>-0.620</td>    </tr>    <tr>      <th>湖北</th>      <td>0.174</td>      <td>0.587</td>      <td>0.365</td>      <td>-0.021</td>      <td>-0.426</td>      <td>-0.387</td>      <td>-0.378</td>      <td>-0.541</td>    </tr>    <tr>      <th>湖南</th>      <td>0.176</td>      <td>0.775</td>      <td>0.261</td>      <td>-0.103</td>      <td>-0.496</td>      <td>-0.372</td>      <td>-0.461</td>      <td>-0.660</td>    </tr>    <tr>      <th>广东</th>      <td>2.739</td>      <td>1.880</td>      <td>1.057</td>      <td>3.368</td>      <td>3.841</td>      <td>3.785</td>      <td>4.049</td>      <td>1.940</td>    </tr>    <tr>      <th>广西</th>      <td>-0.431</td>      <td>0.171</td>      <td>-0.335</td>      <td>-0.552</td>      <td>-0.475</td>      <td>-0.461</td>      <td>-0.439</td>      <td>-0.495</td>    </tr>    <tr>      <th>海南</th>      <td>-1.134</td>      <td>-1.229</td>      <td>-1.307</td>      <td>-1.099</td>      <td>-0.527</td>      <td>-0.495</td>      <td>-0.524</td>      <td>-0.003</td>    </tr>    <tr>      <th>重庆</th>      <td>-0.562</td>      <td>-0.590</td>      <td>-0.415</td>      <td>-0.514</td>      <td>-0.447</td>      <td>-0.212</td>      <td>-0.375</td>      <td>-0.347</td>    </tr>    <tr>      <th>四川</th>      <td>0.280</td>      <td>1.216</td>      <td>0.620</td>      <td>0.533</td>      <td>-0.357</td>      <td>-0.416</td>      <td>-0.295</td>      <td>-0.450</td>    </tr>    <tr>      <th>贵州</th>      <td>-0.891</td>      <td>-0.476</td>      <td>-0.911</td>      <td>-0.864</td>      <td>-0.565</td>      <td>-0.486</td>      <td>-0.521</td>      <td>-0.678</td>    </tr>    <tr>      <th>云南</th>      <td>-0.647</td>      <td>0.126</td>      <td>-0.611</td>      <td>-0.552</td>      <td>-0.511</td>      <td>-0.490</td>      <td>-0.465</td>      <td>-0.525</td>    </tr>    <tr>      <th>陕西</th>      <td>-0.370</td>      <td>-0.325</td>      <td>-0.114</td>      <td>-0.263</td>      <td>-0.518</td>      <td>-0.478</td>      <td>-0.486</td>      <td>-0.627</td>    </tr>    <tr>      <th>甘肃</th>      <td>-0.943</td>      <td>-0.641</td>      <td>-0.953</td>      <td>-0.829</td>      <td>-0.546</td>      <td>-0.486</td>      <td>-0.528</td>      <td>-0.536</td>    </tr>    <tr>      <th>青海</th>      <td>-1.199</td>      <td>-1.314</td>      <td>-1.341</td>      <td>-1.194</td>      <td>-0.584</td>      <td>-0.509</td>      <td>-0.541</td>      <td>-0.726</td>    </tr>    <tr>      <th>宁夏</th>      <td>-1.166</td>      <td>-1.297</td>      <td>-1.309</td>      <td>-1.159</td>      <td>-0.577</td>      <td>-0.494</td>      <td>-0.533</td>      <td>-0.640</td>    </tr>    <tr>      <th>新疆</th>      <td>-0.821</td>      <td>-0.950</td>      <td>-0.850</td>      <td>-0.808</td>      <td>-0.478</td>      <td>-0.503</td>      <td>-0.401</td>      <td>-0.261</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#规范化法</span></span><br><span class="line"><span class="comment">#gf=lambda x: (x-x.min())/(x.max()-x.min())</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gf</span>(<span class="params">x</span>):</span> <span class="keyword">return</span> (x-x.<span class="built_in">min</span>())/(x.<span class="built_in">max</span>()-x.<span class="built_in">min</span>())</span><br><span class="line">GF=MVdata.apply(gf,<span class="number">0</span>); <span class="comment">#GF=(MVdata-MVdata.min())/(MVdata.max()-MVdata.min())</span></span><br><span class="line"><span class="built_in">round</span>(GF,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>生产总值</th>      <th>从业人员</th>      <th>固定资产</th>      <th>利用外资</th>      <th>进出口额</th>      <th>新品出口</th>      <th>市场占有</th>      <th>对外依存</th>    </tr>    <tr>      <th>地区</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>北京</th>      <td>0.283</td>      <td>0.123</td>      <td>0.164</td>      <td>0.466</td>      <td>0.426</td>      <td>0.114</td>      <td>0.110</td>      <td>1.000</td>    </tr>    <tr>      <th>天津</th>      <td>0.187</td>      <td>0.074</td>      <td>0.222</td>      <td>0.129</td>      <td>0.112</td>      <td>0.132</td>      <td>0.083</td>      <td>0.367</td>    </tr>    <tr>      <th>河北</th>      <td>0.443</td>      <td>0.591</td>      <td>0.591</td>      <td>0.421</td>      <td>0.058</td>      <td>0.040</td>      <td>0.053</td>      <td>0.070</td>    </tr>    <tr>      <th>山西</th>      <td>0.186</td>      <td>0.231</td>      <td>0.223</td>      <td>0.236</td>      <td>0.015</td>      <td>0.027</td>      <td>0.009</td>      <td>0.033</td>    </tr>    <tr>      <th>内蒙古</th>      <td>0.246</td>      <td>0.152</td>      <td>0.353</td>      <td>0.110</td>      <td>0.012</td>      <td>0.006</td>      <td>0.008</td>      <td>0.012</td>    </tr>    <tr>      <th>辽宁</th>      <td>0.399</td>      <td>0.333</td>      <td>0.644</td>      <td>0.362</td>      <td>0.104</td>      <td>0.073</td>      <td>0.095</td>      <td>0.161</td>    </tr>    <tr>      <th>吉林</th>      <td>0.173</td>      <td>0.167</td>      <td>0.237</td>      <td>0.121</td>      <td>0.023</td>      <td>0.013</td>      <td>0.008</td>      <td>0.066</td>    </tr>    <tr>      <th>黑龙江</th>      <td>0.212</td>      <td>0.270</td>      <td>0.239</td>      <td>0.179</td>      <td>0.041</td>      <td>0.006</td>      <td>0.032</td>      <td>0.107</td>    </tr>    <tr>      <th>上海</th>      <td>0.340</td>      <td>0.129</td>      <td>0.139</td>      <td>0.423</td>      <td>0.478</td>      <td>0.182</td>      <td>0.393</td>      <td>0.949</td>    </tr>    <tr>      <th>江苏</th>      <td>0.920</td>      <td>0.720</td>      <td>0.998</td>      <td>0.626</td>      <td>0.590</td>      <td>0.773</td>      <td>0.587</td>      <td>0.446</td>    </tr>    <tr>      <th>浙江</th>      <td>0.595</td>      <td>0.546</td>      <td>0.504</td>      <td>0.572</td>      <td>0.338</td>      <td>0.446</td>      <td>0.406</td>      <td>0.385</td>    </tr>    <tr>      <th>安徽</th>      <td>0.264</td>      <td>0.617</td>      <td>0.435</td>      <td>0.205</td>      <td>0.033</td>      <td>0.041</td>      <td>0.031</td>      <td>0.064</td>    </tr>    <tr>      <th>福建</th>      <td>0.308</td>      <td>0.348</td>      <td>0.335</td>      <td>0.204</td>      <td>0.156</td>      <td>0.140</td>      <td>0.174</td>      <td>0.326</td>    </tr>    <tr>      <th>江西</th>      <td>0.195</td>      <td>0.360</td>      <td>0.302</td>      <td>0.153</td>      <td>0.034</td>      <td>0.023</td>      <td>0.040</td>      <td>0.092</td>    </tr>    <tr>      <th>山东</th>      <td>0.848</td>      <td>1.000</td>      <td>1.000</td>      <td>0.531</td>      <td>0.258</td>      <td>0.311</td>      <td>0.236</td>      <td>0.199</td>    </tr>    <tr>      <th>河南</th>      <td>0.490</td>      <td>0.953</td>      <td>0.645</td>      <td>0.341</td>      <td>0.035</td>      <td>0.038</td>      <td>0.035</td>      <td>0.028</td>    </tr>    <tr>      <th>湖北</th>      <td>0.349</td>      <td>0.544</td>      <td>0.439</td>      <td>0.257</td>      <td>0.036</td>      <td>0.028</td>      <td>0.036</td>      <td>0.049</td>    </tr>    <tr>      <th>湖南</th>      <td>0.349</td>      <td>0.598</td>      <td>0.413</td>      <td>0.239</td>      <td>0.020</td>      <td>0.032</td>      <td>0.017</td>      <td>0.018</td>    </tr>    <tr>      <th>广东</th>      <td>1.000</td>      <td>0.915</td>      <td>0.618</td>      <td>1.000</td>      <td>1.000</td>      <td>1.000</td>      <td>1.000</td>      <td>0.710</td>    </tr>    <tr>      <th>广西</th>      <td>0.195</td>      <td>0.425</td>      <td>0.259</td>      <td>0.141</td>      <td>0.025</td>      <td>0.011</td>      <td>0.022</td>      <td>0.062</td>    </tr>    <tr>      <th>海南</th>      <td>0.017</td>      <td>0.024</td>      <td>0.009</td>      <td>0.021</td>      <td>0.013</td>      <td>0.003</td>      <td>0.004</td>      <td>0.192</td>    </tr>    <tr>      <th>重庆</th>      <td>0.162</td>      <td>0.207</td>      <td>0.239</td>      <td>0.149</td>      <td>0.031</td>      <td>0.069</td>      <td>0.036</td>      <td>0.101</td>    </tr>    <tr>      <th>四川</th>      <td>0.376</td>      <td>0.725</td>      <td>0.505</td>      <td>0.379</td>      <td>0.051</td>      <td>0.022</td>      <td>0.053</td>      <td>0.074</td>    </tr>    <tr>      <th>贵州</th>      <td>0.078</td>      <td>0.240</td>      <td>0.111</td>      <td>0.072</td>      <td>0.004</td>      <td>0.005</td>      <td>0.004</td>      <td>0.013</td>    </tr>    <tr>      <th>云南</th>      <td>0.140</td>      <td>0.413</td>      <td>0.188</td>      <td>0.141</td>      <td>0.017</td>      <td>0.005</td>      <td>0.017</td>      <td>0.054</td>    </tr>    <tr>      <th>陕西</th>      <td>0.210</td>      <td>0.283</td>      <td>0.316</td>      <td>0.204</td>      <td>0.015</td>      <td>0.007</td>      <td>0.012</td>      <td>0.026</td>    </tr>    <tr>      <th>甘肃</th>      <td>0.065</td>      <td>0.193</td>      <td>0.100</td>      <td>0.080</td>      <td>0.009</td>      <td>0.005</td>      <td>0.003</td>      <td>0.051</td>    </tr>    <tr>      <th>青海</th>      <td>0.000</td>      <td>0.000</td>      <td>0.000</td>      <td>0.000</td>      <td>0.000</td>      <td>0.000</td>      <td>0.000</td>      <td>0.000</td>    </tr>    <tr>      <th>宁夏</th>      <td>0.008</td>      <td>0.005</td>      <td>0.008</td>      <td>0.008</td>      <td>0.002</td>      <td>0.003</td>      <td>0.002</td>      <td>0.023</td>    </tr>    <tr>      <th>新疆</th>      <td>0.096</td>      <td>0.104</td>      <td>0.126</td>      <td>0.085</td>      <td>0.024</td>      <td>0.001</td>      <td>0.030</td>      <td>0.124</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#4.2.2.2 简单平均评价法</span></span><br><span class="line"><span class="comment">#建立得分与排名数据框</span></span><br><span class="line">SR=pd.DataFrame();SR</span><br><span class="line">SR[<span class="string">&#x27;BZscore&#x27;</span>]=BZ.mean(axis=<span class="number">1</span>);</span><br><span class="line">SR[<span class="string">&#x27;BZrank&#x27;</span>]=(-SR.BZscore).rank(); SR</span><br><span class="line">SR[<span class="string">&#x27;GFscore&#x27;</span>]=GF.mean(<span class="number">1</span>); <span class="comment">#SR[&#x27;GFscore&#x27;]=GF.apply(np.mean,1)</span></span><br><span class="line">SR[<span class="string">&#x27;GFrank&#x27;</span>]=(-SR.GFscore).rank(); SR</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>    </tr>  </thead>  <tbody>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>BZscore</th>      <th>BZrank</th>    </tr>    <tr>      <th>地区</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>北京</th>      <td>0.4414</td>      <td>6.0</td>    </tr>    <tr>      <th>天津</th>      <td>-0.2680</td>      <td>15.0</td>    </tr>    <tr>      <th>河北</th>      <td>0.1933</td>      <td>8.0</td>    </tr>    <tr>      <th>山西</th>      <td>-0.4477</td>      <td>21.0</td>    </tr>    <tr>      <th>内蒙古</th>      <td>-0.4847</td>      <td>23.0</td>    </tr>    <tr>      <th>辽宁</th>      <td>0.1609</td>      <td>9.0</td>    </tr>    <tr>      <th>吉林</th>      <td>-0.5289</td>      <td>24.0</td>    </tr>    <tr>      <th>黑龙江</th>      <td>-0.3917</td>      <td>18.0</td>    </tr>    <tr>      <th>上海</th>      <td>0.6398</td>      <td>5.0</td>    </tr>    <tr>      <th>江苏</th>      <td>1.9704</td>      <td>2.0</td>    </tr>    <tr>      <th>浙江</th>      <td>1.0158</td>      <td>4.0</td>    </tr>    <tr>      <th>安徽</th>      <td>-0.1099</td>      <td>13.0</td>    </tr>    <tr>      <th>福建</th>      <td>0.0706</td>      <td>11.0</td>    </tr>    <tr>      <th>江西</th>      <td>-0.3426</td>      <td>16.0</td>    </tr>    <tr>      <th>山东</th>      <td>1.2537</td>      <td>3.0</td>    </tr>    <tr>      <th>河南</th>      <td>0.3121</td>      <td>7.0</td>    </tr>    <tr>      <th>湖北</th>      <td>-0.0784</td>      <td>12.0</td>    </tr>    <tr>      <th>湖南</th>      <td>-0.1099</td>      <td>14.0</td>    </tr>    <tr>      <th>广东</th>      <td>2.8323</td>      <td>1.0</td>    </tr>    <tr>      <th>广西</th>      <td>-0.3772</td>      <td>17.0</td>    </tr>    <tr>      <th>海南</th>      <td>-0.7897</td>      <td>28.0</td>    </tr>    <tr>      <th>重庆</th>      <td>-0.4327</td>      <td>20.0</td>    </tr>    <tr>      <th>四川</th>      <td>0.1414</td>      <td>10.0</td>    </tr>    <tr>      <th>贵州</th>      <td>-0.6738</td>      <td>26.0</td>    </tr>    <tr>      <th>云南</th>      <td>-0.4592</td>      <td>22.0</td>    </tr>    <tr>      <th>陕西</th>      <td>-0.3977</td>      <td>19.0</td>    </tr>    <tr>      <th>甘肃</th>      <td>-0.6827</td>      <td>27.0</td>    </tr>    <tr>      <th>青海</th>      <td>-0.9260</td>      <td>30.0</td>    </tr>    <tr>      <th>宁夏</th>      <td>-0.8968</td>      <td>29.0</td>    </tr>    <tr>      <th>新疆</th>      <td>-0.6340</td>      <td>25.0</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>BZscore</th>      <th>BZrank</th>      <th>GFscore</th>      <th>GFrank</th>    </tr>    <tr>      <th>地区</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>北京</th>      <td>0.4414</td>      <td>6.0</td>      <td>0.3356</td>      <td>6.0</td>    </tr>    <tr>      <th>天津</th>      <td>-0.2680</td>      <td>15.0</td>      <td>0.1631</td>      <td>15.0</td>    </tr>    <tr>      <th>河北</th>      <td>0.1933</td>      <td>8.0</td>      <td>0.2833</td>      <td>8.0</td>    </tr>    <tr>      <th>山西</th>      <td>-0.4477</td>      <td>21.0</td>      <td>0.1199</td>      <td>22.0</td>    </tr>    <tr>      <th>内蒙古</th>      <td>-0.4847</td>      <td>23.0</td>      <td>0.1123</td>      <td>23.0</td>    </tr>    <tr>      <th>辽宁</th>      <td>0.1609</td>      <td>9.0</td>      <td>0.2712</td>      <td>10.0</td>    </tr>    <tr>      <th>吉林</th>      <td>-0.5289</td>      <td>24.0</td>      <td>0.1009</td>      <td>24.0</td>    </tr>    <tr>      <th>黑龙江</th>      <td>-0.3917</td>      <td>18.0</td>      <td>0.1356</td>      <td>18.0</td>    </tr>    <tr>      <th>上海</th>      <td>0.6398</td>      <td>5.0</td>      <td>0.3792</td>      <td>5.0</td>    </tr>    <tr>      <th>江苏</th>      <td>1.9704</td>      <td>2.0</td>      <td>0.7076</td>      <td>2.0</td>    </tr>    <tr>      <th>浙江</th>      <td>1.0158</td>      <td>4.0</td>      <td>0.4740</td>      <td>4.0</td>    </tr>    <tr>      <th>安徽</th>      <td>-0.1099</td>      <td>13.0</td>      <td>0.2114</td>      <td>13.0</td>    </tr>    <tr>      <th>福建</th>      <td>0.0706</td>      <td>11.0</td>      <td>0.2489</td>      <td>11.0</td>    </tr>    <tr>      <th>江西</th>      <td>-0.3426</td>      <td>16.0</td>      <td>0.1497</td>      <td>16.0</td>    </tr>    <tr>      <th>山东</th>      <td>1.2537</td>      <td>3.0</td>      <td>0.5477</td>      <td>3.0</td>    </tr>    <tr>      <th>河南</th>      <td>0.3121</td>      <td>7.0</td>      <td>0.3208</td>      <td>7.0</td>    </tr>    <tr>      <th>湖北</th>      <td>-0.0784</td>      <td>12.0</td>      <td>0.2173</td>      <td>12.0</td>    </tr>    <tr>      <th>湖南</th>      <td>-0.1099</td>      <td>14.0</td>      <td>0.2108</td>      <td>14.0</td>    </tr>    <tr>      <th>广东</th>      <td>2.8323</td>      <td>1.0</td>      <td>0.9053</td>      <td>1.0</td>    </tr>    <tr>      <th>广西</th>      <td>-0.3772</td>      <td>17.0</td>      <td>0.1425</td>      <td>17.0</td>    </tr>    <tr>      <th>海南</th>      <td>-0.7897</td>      <td>28.0</td>      <td>0.0354</td>      <td>28.0</td>    </tr>    <tr>      <th>重庆</th>      <td>-0.4327</td>      <td>20.0</td>      <td>0.1243</td>      <td>20.0</td>    </tr>    <tr>      <th>四川</th>      <td>0.1414</td>      <td>10.0</td>      <td>0.2730</td>      <td>9.0</td>    </tr>    <tr>      <th>贵州</th>      <td>-0.6738</td>      <td>26.0</td>      <td>0.0661</td>      <td>26.0</td>    </tr>    <tr>      <th>云南</th>      <td>-0.4592</td>      <td>22.0</td>      <td>0.1216</td>      <td>21.0</td>    </tr>    <tr>      <th>陕西</th>      <td>-0.3977</td>      <td>19.0</td>      <td>0.1343</td>      <td>19.0</td>    </tr>    <tr>      <th>甘肃</th>      <td>-0.6827</td>      <td>27.0</td>      <td>0.0632</td>      <td>27.0</td>    </tr>    <tr>      <th>青海</th>      <td>-0.9260</td>      <td>30.0</td>      <td>0.0000</td>      <td>30.0</td>    </tr>    <tr>      <th>宁夏</th>      <td>-0.8968</td>      <td>29.0</td>      <td>0.0074</td>      <td>29.0</td>    </tr>    <tr>      <th>新疆</th>      <td>-0.6340</td>      <td>25.0</td>      <td>0.0739</td>      <td>25.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#4.2.2.3 加权综合分析法</span></span><br><span class="line"><span class="comment">#变异系数法</span></span><br><span class="line">CV=MVdata.std()/MVdata.mean();CV.T  <span class="comment">#变异系数</span></span><br><span class="line">W=CV/<span class="built_in">sum</span>(CV);W                   <span class="comment">#权重</span></span><br><span class="line">SR[<span class="string">&#x27;CVscore&#x27;</span>]=np.dot(BZ,W)</span><br><span class="line">SR[<span class="string">&#x27;CVrank&#x27;</span>]=SR.CVscore.rank(ascending=<span class="literal">False</span>); SR</span><br></pre></td></tr></table></figure><pre><code>生产总值    0.7539从业人员    0.6717固定资产    0.6407利用外资    0.7611进出口额    1.6995新品出口    1.9640市场占有    1.8303对外依存    1.2271dtype: float64生产总值    0.0790从业人员    0.0703固定资产    0.0671利用外资    0.0797进出口额    0.1780新品出口    0.2057市场占有    0.1917对外依存    0.1285dtype: float64</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>BZscore</th>      <th>BZrank</th>      <th>GFscore</th>      <th>GFrank</th>      <th>CVscore</th>      <th>CVrank</th>    </tr>    <tr>      <th>地区</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>北京</th>      <td>0.4414</td>      <td>6.0</td>      <td>0.3356</td>      <td>6.0</td>      <td>0.5678</td>      <td>6.0</td>    </tr>    <tr>      <th>天津</th>      <td>-0.2680</td>      <td>15.0</td>      <td>0.1631</td>      <td>15.0</td>      <td>-0.1424</td>      <td>12.0</td>    </tr>    <tr>      <th>河北</th>      <td>0.1933</td>      <td>8.0</td>      <td>0.2833</td>      <td>8.0</td>      <td>-0.0271</td>      <td>10.0</td>    </tr>    <tr>      <th>山西</th>      <td>-0.4477</td>      <td>21.0</td>      <td>0.1199</td>      <td>22.0</td>      <td>-0.4603</td>      <td>21.0</td>    </tr>    <tr>      <th>内蒙古</th>      <td>-0.4847</td>      <td>23.0</td>      <td>0.1123</td>      <td>23.0</td>      <td>-0.5049</td>      <td>23.0</td>    </tr>    <tr>      <th>辽宁</th>      <td>0.1609</td>      <td>9.0</td>      <td>0.2712</td>      <td>10.0</td>      <td>0.0347</td>      <td>8.0</td>    </tr>    <tr>      <th>吉林</th>      <td>-0.5289</td>      <td>24.0</td>      <td>0.1009</td>      <td>24.0</td>      <td>-0.5089</td>      <td>24.0</td>    </tr>    <tr>      <th>黑龙江</th>      <td>-0.3917</td>      <td>18.0</td>      <td>0.1356</td>      <td>18.0</td>      <td>-0.4013</td>      <td>18.0</td>    </tr>    <tr>      <th>上海</th>      <td>0.6398</td>      <td>5.0</td>      <td>0.3792</td>      <td>5.0</td>      <td>0.8911</td>      <td>5.0</td>    </tr>    <tr>      <th>江苏</th>      <td>1.9704</td>      <td>2.0</td>      <td>0.7076</td>      <td>2.0</td>      <td>2.0522</td>      <td>2.0</td>    </tr>    <tr>      <th>浙江</th>      <td>1.0158</td>      <td>4.0</td>      <td>0.4740</td>      <td>4.0</td>      <td>1.0837</td>      <td>3.0</td>    </tr>    <tr>      <th>安徽</th>      <td>-0.1099</td>      <td>13.0</td>      <td>0.2114</td>      <td>13.0</td>      <td>-0.2354</td>      <td>14.0</td>    </tr>    <tr>      <th>福建</th>      <td>0.0706</td>      <td>11.0</td>      <td>0.2489</td>      <td>11.0</td>      <td>0.1215</td>      <td>7.0</td>    </tr>    <tr>      <th>江西</th>      <td>-0.3426</td>      <td>16.0</td>      <td>0.1497</td>      <td>16.0</td>      <td>-0.3687</td>      <td>16.0</td>    </tr>    <tr>      <th>山东</th>      <td>1.2537</td>      <td>3.0</td>      <td>0.5477</td>      <td>3.0</td>      <td>0.9657</td>      <td>4.0</td>    </tr>    <tr>      <th>河南</th>      <td>0.3121</td>      <td>7.0</td>      <td>0.3208</td>      <td>7.0</td>      <td>0.0063</td>      <td>9.0</td>    </tr>    <tr>      <th>湖北</th>      <td>-0.0784</td>      <td>12.0</td>      <td>0.2173</td>      <td>12.0</td>      <td>-0.2195</td>      <td>13.0</td>    </tr>    <tr>      <th>湖南</th>      <td>-0.1099</td>      <td>14.0</td>      <td>0.2108</td>      <td>14.0</td>      <td>-0.2602</td>      <td>15.0</td>    </tr>    <tr>      <th>广东</th>      <td>2.8323</td>      <td>1.0</td>      <td>0.9053</td>      <td>1.0</td>      <td>3.1754</td>      <td>1.0</td>    </tr>    <tr>      <th>广西</th>      <td>-0.3772</td>      <td>17.0</td>      <td>0.1425</td>      <td>17.0</td>      <td>-0.4156</td>      <td>19.0</td>    </tr>    <tr>      <th>海南</th>      <td>-0.7897</td>      <td>28.0</td>      <td>0.0354</td>      <td>28.0</td>      <td>-0.6477</td>      <td>28.0</td>    </tr>    <tr>      <th>重庆</th>      <td>-0.4327</td>      <td>20.0</td>      <td>0.1243</td>      <td>20.0</td>      <td>-0.3943</td>      <td>17.0</td>    </tr>    <tr>      <th>四川</th>      <td>0.1414</td>      <td>10.0</td>      <td>0.2730</td>      <td>9.0</td>      <td>-0.0718</td>      <td>11.0</td>    </tr>    <tr>      <th>贵州</th>      <td>-0.6738</td>      <td>26.0</td>      <td>0.0661</td>      <td>26.0</td>      <td>-0.6211</td>      <td>27.0</td>    </tr>    <tr>      <th>云南</th>      <td>-0.4592</td>      <td>22.0</td>      <td>0.1216</td>      <td>21.0</td>      <td>-0.4754</td>      <td>22.0</td>    </tr>    <tr>      <th>陕西</th>      <td>-0.3977</td>      <td>19.0</td>      <td>0.1343</td>      <td>19.0</td>      <td>-0.4450</td>      <td>20.0</td>    </tr>    <tr>      <th>甘肃</th>      <td>-0.6827</td>      <td>27.0</td>      <td>0.0632</td>      <td>27.0</td>      <td>-0.6168</td>      <td>26.0</td>    </tr>    <tr>      <th>青海</th>      <td>-0.9260</td>      <td>30.0</td>      <td>0.0000</td>      <td>30.0</td>      <td>-0.7779</td>      <td>30.0</td>    </tr>    <tr>      <th>宁夏</th>      <td>-0.8968</td>      <td>29.0</td>      <td>0.0074</td>      <td>29.0</td>      <td>-0.7522</td>      <td>29.0</td>    </tr>    <tr>      <th>新疆</th>      <td>-0.6340</td>      <td>25.0</td>      <td>0.0739</td>      <td>25.0</td>      <td>-0.5520</td>      <td>25.0</td>    </tr>  </tbody></table></div><h2 id="4-3-数据压缩方法"><a href="#4-3-数据压缩方法" class="headerlink" title="4.3 数据压缩方法"></a>4.3 数据压缩方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#4.3.1 主成分的基本思想</span></span><br><span class="line"><span class="comment">#4.3.2主成分的基本分析</span></span><br><span class="line"><span class="comment">#4.3.2.1 主成分分析步骤</span></span><br><span class="line">Z=(MVdata-MVdata.mean())/MVdata.std()</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line">pca = PCA(n_components=<span class="number">2</span>).fit(Z)</span><br><span class="line">Vi=pca.explained_variance_;Vi        <span class="comment">#方差</span></span><br><span class="line">Wi=pca.explained_variance_ratio_;Wi  <span class="comment">#贡献率</span></span><br><span class="line">Wi.<span class="built_in">sum</span>()                             <span class="comment">#累计贡献率</span></span><br><span class="line">pd.DataFrame(pca.components_.T)      <span class="comment">#主成分负荷</span></span><br></pre></td></tr></table></figure><pre><code>array([5.84  , 1.5806])array([0.73  , 0.1976])0.9275700734499012</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.3967</td>      <td>-0.2064</td>    </tr>    <tr>      <th>1</th>      <td>0.2874</td>      <td>-0.5209</td>    </tr>    <tr>      <th>2</th>      <td>0.3074</td>      <td>-0.4819</td>    </tr>    <tr>      <th>3</th>      <td>0.4011</td>      <td>-0.0094</td>    </tr>    <tr>      <th>4</th>      <td>0.3789</td>      <td>0.3104</td>    </tr>    <tr>      <th>5</th>      <td>0.3864</td>      <td>0.1216</td>    </tr>    <tr>      <th>6</th>      <td>0.3846</td>      <td>0.2104</td>    </tr>    <tr>      <th>7</th>      <td>0.2527</td>      <td>0.5461</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#4.3.2.2 主成分综合评价</span></span><br><span class="line"><span class="keyword">import</span> PyDm_fun <span class="keyword">as</span> da</span><br><span class="line">Si=pca.fit_transform(Z);Si           <span class="comment">#主成分得分</span></span><br><span class="line">Si=pd.DataFrame(Si,columns=[<span class="string">&#x27;Comp1&#x27;</span>,<span class="string">&#x27;Comp2&#x27;</span>],index=MVdata.index);Si</span><br><span class="line">plt.plot(Si.Comp1,Si.Comp2,<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">da.hvline(Si.Comp1,Si.Comp2,Si.index);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442433.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Si[<span class="string">&#x27;Comp&#x27;</span>]=Si.dot(Wi);Si          <span class="comment">#综合得分</span></span><br><span class="line">Si[<span class="string">&#x27;Rank&#x27;</span>]=(-Si.Comp).rank();Si   <span class="comment">#综合排名</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Comp1</th>      <th>Comp2</th>      <th>Comp</th>    </tr>    <tr>      <th>地区</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>北京</th>      <td>1.1056</td>      <td>2.8581</td>      <td>1.3718</td>    </tr>    <tr>      <th>天津</th>      <td>-0.7862</td>      <td>1.1840</td>      <td>-0.3400</td>    </tr>    <tr>      <th>河北</th>      <td>0.5292</td>      <td>-1.4292</td>      <td>0.1039</td>    </tr>    <tr>      <th>山西</th>      <td>-1.2173</td>      <td>-0.0527</td>      <td>-0.8991</td>    </tr>    <tr>      <th>内蒙古</th>      <td>-1.3397</td>      <td>-0.2544</td>      <td>-1.0282</td>    </tr>    <tr>      <th>辽宁</th>      <td>0.4491</td>      <td>-0.7106</td>      <td>0.1874</td>    </tr>    <tr>      <th>吉林</th>      <td>-1.4755</td>      <td>0.1245</td>      <td>-1.0525</td>    </tr>    <tr>      <th>黑龙江</th>      <td>-1.1038</td>      <td>0.0286</td>      <td>-0.8001</td>    </tr>    <tr>      <th>上海</th>      <td>1.7450</td>      <td>3.1264</td>      <td>1.8916</td>    </tr>    <tr>      <th>江苏</th>      <td>5.6754</td>      <td>-0.4195</td>      <td>4.0601</td>    </tr>    <tr>      <th>浙江</th>      <td>2.9599</td>      <td>0.2729</td>      <td>2.2146</td>    </tr>    <tr>      <th>安徽</th>      <td>-0.3869</td>      <td>-1.0965</td>      <td>-0.4991</td>    </tr>    <tr>      <th>福建</th>      <td>0.1598</td>      <td>0.4401</td>      <td>0.2036</td>    </tr>    <tr>      <th>江西</th>      <td>-0.9970</td>      <td>-0.2646</td>      <td>-0.7801</td>    </tr>    <tr>      <th>山东</th>      <td>3.4916</td>      <td>-2.4144</td>      <td>2.0718</td>    </tr>    <tr>      <th>河南</th>      <td>0.7730</td>      <td>-2.3590</td>      <td>0.0982</td>    </tr>    <tr>      <th>湖北</th>      <td>-0.2515</td>      <td>-1.0713</td>      <td>-0.3953</td>    </tr>    <tr>      <th>湖南</th>      <td>-0.3440</td>      <td>-1.2216</td>      <td>-0.4925</td>    </tr>    <tr>      <th>广东</th>      <td>8.2677</td>      <td>1.4782</td>      <td>6.3274</td>    </tr>    <tr>      <th>广西</th>      <td>-1.0983</td>      <td>-0.3994</td>      <td>-0.8807</td>    </tr>    <tr>      <th>海南</th>      <td>-2.2387</td>      <td>1.1787</td>      <td>-1.4013</td>    </tr>    <tr>      <th>重庆</th>      <td>-1.2093</td>      <td>0.1953</td>      <td>-0.8442</td>    </tr>    <tr>      <th>四川</th>      <td>0.3418</td>      <td>-1.4645</td>      <td>-0.0398</td>    </tr>    <tr>      <th>贵州</th>      <td>-1.8899</td>      <td>0.1649</td>      <td>-1.3470</td>    </tr>    <tr>      <th>云南</th>      <td>-1.3237</td>      <td>-0.2349</td>      <td>-1.0127</td>    </tr>    <tr>      <th>陕西</th>      <td>-1.1071</td>      <td>-0.3602</td>      <td>-0.8794</td>    </tr>    <tr>      <th>甘肃</th>      <td>-1.9169</td>      <td>0.3631</td>      <td>-1.3275</td>    </tr>    <tr>      <th>青海</th>      <td>-2.5539</td>      <td>0.8356</td>      <td>-1.6992</td>    </tr>    <tr>      <th>宁夏</th>      <td>-2.4787</td>      <td>0.8569</td>      <td>-1.6401</td>    </tr>    <tr>      <th>新疆</th>      <td>-1.7797</td>      <td>0.6456</td>      <td>-1.1716</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Comp1</th>      <th>Comp2</th>      <th>Comp</th>      <th>Rank</th>    </tr>    <tr>      <th>地区</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>北京</th>      <td>1.1056</td>      <td>2.8581</td>      <td>1.3718</td>      <td>6.0</td>    </tr>    <tr>      <th>天津</th>      <td>-0.7862</td>      <td>1.1840</td>      <td>-0.3400</td>      <td>12.0</td>    </tr>    <tr>      <th>河北</th>      <td>0.5292</td>      <td>-1.4292</td>      <td>0.1039</td>      <td>9.0</td>    </tr>    <tr>      <th>山西</th>      <td>-1.2173</td>      <td>-0.0527</td>      <td>-0.8991</td>      <td>21.0</td>    </tr>    <tr>      <th>内蒙古</th>      <td>-1.3397</td>      <td>-0.2544</td>      <td>-1.0282</td>      <td>23.0</td>    </tr>    <tr>      <th>辽宁</th>      <td>0.4491</td>      <td>-0.7106</td>      <td>0.1874</td>      <td>8.0</td>    </tr>    <tr>      <th>吉林</th>      <td>-1.4755</td>      <td>0.1245</td>      <td>-1.0525</td>      <td>24.0</td>    </tr>    <tr>      <th>黑龙江</th>      <td>-1.1038</td>      <td>0.0286</td>      <td>-0.8001</td>      <td>17.0</td>    </tr>    <tr>      <th>上海</th>      <td>1.7450</td>      <td>3.1264</td>      <td>1.8916</td>      <td>5.0</td>    </tr>    <tr>      <th>江苏</th>      <td>5.6754</td>      <td>-0.4195</td>      <td>4.0601</td>      <td>2.0</td>    </tr>    <tr>      <th>浙江</th>      <td>2.9599</td>      <td>0.2729</td>      <td>2.2146</td>      <td>3.0</td>    </tr>    <tr>      <th>安徽</th>      <td>-0.3869</td>      <td>-1.0965</td>      <td>-0.4991</td>      <td>15.0</td>    </tr>    <tr>      <th>福建</th>      <td>0.1598</td>      <td>0.4401</td>      <td>0.2036</td>      <td>7.0</td>    </tr>    <tr>      <th>江西</th>      <td>-0.9970</td>      <td>-0.2646</td>      <td>-0.7801</td>      <td>16.0</td>    </tr>    <tr>      <th>山东</th>      <td>3.4916</td>      <td>-2.4144</td>      <td>2.0718</td>      <td>4.0</td>    </tr>    <tr>      <th>河南</th>      <td>0.7730</td>      <td>-2.3590</td>      <td>0.0982</td>      <td>10.0</td>    </tr>    <tr>      <th>湖北</th>      <td>-0.2515</td>      <td>-1.0713</td>      <td>-0.3953</td>      <td>13.0</td>    </tr>    <tr>      <th>湖南</th>      <td>-0.3440</td>      <td>-1.2216</td>      <td>-0.4925</td>      <td>14.0</td>    </tr>    <tr>      <th>广东</th>      <td>8.2677</td>      <td>1.4782</td>      <td>6.3274</td>      <td>1.0</td>    </tr>    <tr>      <th>广西</th>      <td>-1.0983</td>      <td>-0.3994</td>      <td>-0.8807</td>      <td>20.0</td>    </tr>    <tr>      <th>海南</th>      <td>-2.2387</td>      <td>1.1787</td>      <td>-1.4013</td>      <td>28.0</td>    </tr>    <tr>      <th>重庆</th>      <td>-1.2093</td>      <td>0.1953</td>      <td>-0.8442</td>      <td>18.0</td>    </tr>    <tr>      <th>四川</th>      <td>0.3418</td>      <td>-1.4645</td>      <td>-0.0398</td>      <td>11.0</td>    </tr>    <tr>      <th>贵州</th>      <td>-1.8899</td>      <td>0.1649</td>      <td>-1.3470</td>      <td>27.0</td>    </tr>    <tr>      <th>云南</th>      <td>-1.3237</td>      <td>-0.2349</td>      <td>-1.0127</td>      <td>22.0</td>    </tr>    <tr>      <th>陕西</th>      <td>-1.1071</td>      <td>-0.3602</td>      <td>-0.8794</td>      <td>19.0</td>    </tr>    <tr>      <th>甘肃</th>      <td>-1.9169</td>      <td>0.3631</td>      <td>-1.3275</td>      <td>26.0</td>    </tr>    <tr>      <th>青海</th>      <td>-2.5539</td>      <td>0.8356</td>      <td>-1.6992</td>      <td>30.0</td>    </tr>    <tr>      <th>宁夏</th>      <td>-2.4787</td>      <td>0.8569</td>      <td>-1.6401</td>      <td>29.0</td>    </tr>    <tr>      <th>新疆</th>      <td>-1.7797</td>      <td>0.6456</td>      <td>-1.1716</td>      <td>25.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#%run PyDm_fun.py</span></span><br><span class="line">da.PCrank(MVdata,m=<span class="number">2</span>)   <span class="comment">#自定义主成分综合评价函数</span></span><br></pre></td></tr></table></figure><pre><code>方差贡献:        Variances  Explained  CumulativeComp1     5.8400    72.9995     72.9995Comp2     1.5806    19.7575     92.7570Comp3     0.3338     4.1725     96.9295Comp4     0.1578     1.9722     98.9017Comp5     0.0555     0.6938     99.5956Comp6     0.0167     0.2093     99.8049Comp7     0.0086     0.1077     99.9125Comp8     0.0070     0.0875    100.0000主成分负荷:        Comp1   Comp2生产总值  0.3967 -0.2064从业人员  0.2874 -0.5209固定资产  0.3074 -0.4819利用外资  0.4011 -0.0094进出口额  0.3789  0.3104新品出口  0.3864  0.1216市场占有  0.3846  0.2104对外依存  0.2527  0.5461综合得分与排名:       Comp1   Comp2    Comp  Rank地区                               北京   1.1056  2.8581  1.3718   6.0天津  -0.7862  1.1840 -0.3400  12.0河北   0.5292 -1.4292  0.1039   9.0山西  -1.2173 -0.0527 -0.8991  21.0内蒙古 -1.3397 -0.2544 -1.0282  23.0辽宁   0.4491 -0.7106  0.1874   8.0吉林  -1.4755  0.1245 -1.0525  24.0黑龙江 -1.1038  0.0286 -0.8001  17.0上海   1.7450  3.1264  1.8916   5.0江苏   5.6754 -0.4195  4.0601   2.0浙江   2.9599  0.2729  2.2146   3.0安徽  -0.3869 -1.0965 -0.4991  15.0福建   0.1598  0.4401  0.2036   7.0江西  -0.9970 -0.2646 -0.7801  16.0山东   3.4916 -2.4144  2.0718   4.0河南   0.7730 -2.3590  0.0982  10.0湖北  -0.2515 -1.0713 -0.3953  13.0湖南  -0.3440 -1.2216 -0.4925  14.0广东   8.2677  1.4782  6.3274   1.0广西  -1.0983 -0.3994 -0.8807  20.0海南  -2.2387  1.1787 -1.4013  28.0重庆  -1.2093  0.1953 -0.8442  18.0四川   0.3418 -1.4645 -0.0398  11.0贵州  -1.8899  0.1649 -1.3470  27.0云南  -1.3237 -0.2349 -1.0127  22.0陕西  -1.1071 -0.3602 -0.8794  19.0甘肃  -1.9169  0.3631 -1.3275  26.0青海  -2.5539  0.8356 -1.6992  30.0宁夏  -2.4787  0.8569 -1.6401  29.0新疆  -1.7797  0.6456 -1.1716  25.0</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101446667.png" alt="png"></p><h2 id="4-4-聚类分析方法"><a href="#4-4-聚类分析方法" class="headerlink" title="4.4 聚类分析方法"></a>4.4 聚类分析方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#4.4.1 聚类分析概念</span></span><br><span class="line"><span class="comment">#4.4.1.1 聚类分析法的思想</span></span><br><span class="line"><span class="comment">#4.4.1.2 聚类分析法的类型</span></span><br><span class="line"><span class="comment">#4.4.1.3 聚类分析的统计量</span></span><br><span class="line">X12=YXdata[[<span class="string">&#x27;X1&#x27;</span>,<span class="string">&#x27;X2&#x27;</span>]][:<span class="number">11</span>];X12  <span class="comment">#取变量X1和X2前11个数据</span></span><br><span class="line">plt.plot(X12.X1,X12.X2,<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    plt.text(X12.X1[i],X12.X2[i],X12.index[i])</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X1</th>      <th>X2</th>    </tr>    <tr>      <th>地区</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>北京</th>      <td>1069.70</td>      <td>55.7893</td>    </tr>    <tr>      <th>天津</th>      <td>763.16</td>      <td>70.6767</td>    </tr>    <tr>      <th>河北</th>      <td>3962.42</td>      <td>163.8933</td>    </tr>    <tr>      <th>山西</th>      <td>1738.90</td>      <td>70.7306</td>    </tr>    <tr>      <th>内蒙古</th>      <td>1249.30</td>      <td>103.6517</td>    </tr>    <tr>      <th>辽宁</th>      <td>2364.90</td>      <td>177.2629</td>    </tr>    <tr>      <th>吉林</th>      <td>1337.80</td>      <td>74.4171</td>    </tr>    <tr>      <th>黑龙江</th>      <td>1977.80</td>      <td>74.7538</td>    </tr>    <tr>      <th>上海</th>      <td>1104.33</td>      <td>49.6207</td>    </tr>    <tr>      <th>江苏</th>      <td>4758.23</td>      <td>266.9262</td>    </tr>    <tr>      <th>浙江</th>      <td>3680.00</td>      <td>141.8528</td>    </tr>  </tbody></table></div><pre><code>[&lt;matplotlib.lines.Line2D at 0x137f9d00&gt;]Text(1069.7, 55.7893, &#39;北京&#39;)Text(763.16, 70.6767, &#39;天津&#39;)Text(3962.42, 163.8933, &#39;河北&#39;)Text(1738.9, 70.7306, &#39;山西&#39;)Text(1249.3, 103.6517, &#39;内蒙古&#39;)Text(2364.9, 177.2629, &#39;辽宁&#39;)Text(1337.8, 74.4171, &#39;吉林&#39;)Text(1977.8, 74.7538, &#39;黑龙江&#39;)Text(1104.33, 49.6207, &#39;上海&#39;)Text(4758.23, 266.9262, &#39;江苏&#39;)Text(3680.0, 141.8528, &#39;浙江&#39;)</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101446450.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Z12=(X12-X12.mean())/X12.std()         <span class="comment">#数据标准化</span></span><br><span class="line"><span class="keyword">import</span> scipy.cluster.hierarchy <span class="keyword">as</span> sch  <span class="comment">#加载系统聚类包</span></span><br><span class="line">D12=sch.distance.pdist(Z12);np.<span class="built_in">round</span>(D12,<span class="number">3</span>)        <span class="comment">#样品间距离</span></span><br><span class="line">Y12=pd.DataFrame(sch.distance.squareform(D12))  <span class="comment">#距离矩阵</span></span><br><span class="line">Y12.index=X12.index; Y12.columns=X12.index</span><br><span class="line"><span class="built_in">round</span>(Y12,<span class="number">3</span>)  <span class="comment">#输出距离阵</span></span><br></pre></td></tr></table></figure><pre><code>array([0.317, 2.675, 0.542, 0.725, 2.046, 0.341, 0.728, 0.095, 4.16 ,       2.315, 2.741, 0.721, 0.608, 1.979, 0.428, 0.9  , 0.402, 4.153,       2.401, 2.15 , 2.196, 1.197, 2.352, 1.977, 2.711, 1.642, 0.389,       0.609, 1.652, 0.301, 0.186, 0.564, 3.675, 1.783, 1.371, 0.44 ,       0.689, 0.811, 3.553, 1.884, 1.708, 1.552, 2.116, 2.215, 1.105,       0.473, 0.407, 3.82 , 2.001, 0.746, 3.521, 1.606, 4.213, 2.346,       2.025])</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>地区</th>      <th>北京</th>      <th>天津</th>      <th>河北</th>      <th>山西</th>      <th>内蒙古</th>      <th>辽宁</th>      <th>吉林</th>      <th>黑龙江</th>      <th>上海</th>      <th>江苏</th>      <th>浙江</th>    </tr>    <tr>      <th>地区</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>北京</th>      <td>0.000</td>      <td>0.317</td>      <td>2.675</td>      <td>0.542</td>      <td>0.725</td>      <td>2.046</td>      <td>0.341</td>      <td>0.728</td>      <td>0.095</td>      <td>4.160</td>      <td>2.315</td>    </tr>    <tr>      <th>天津</th>      <td>0.317</td>      <td>0.000</td>      <td>2.741</td>      <td>0.721</td>      <td>0.608</td>      <td>1.979</td>      <td>0.428</td>      <td>0.900</td>      <td>0.402</td>      <td>4.153</td>      <td>2.401</td>    </tr>    <tr>      <th>河北</th>      <td>2.675</td>      <td>2.741</td>      <td>0.000</td>      <td>2.150</td>      <td>2.196</td>      <td>1.197</td>      <td>2.352</td>      <td>1.977</td>      <td>2.711</td>      <td>1.642</td>      <td>0.389</td>    </tr>    <tr>      <th>山西</th>      <td>0.542</td>      <td>0.721</td>      <td>2.150</td>      <td>0.000</td>      <td>0.609</td>      <td>1.652</td>      <td>0.301</td>      <td>0.186</td>      <td>0.564</td>      <td>3.675</td>      <td>1.783</td>    </tr>    <tr>      <th>内蒙古</th>      <td>0.725</td>      <td>0.608</td>      <td>2.196</td>      <td>0.609</td>      <td>0.000</td>      <td>1.371</td>      <td>0.440</td>      <td>0.689</td>      <td>0.811</td>      <td>3.553</td>      <td>1.884</td>    </tr>    <tr>      <th>辽宁</th>      <td>2.046</td>      <td>1.979</td>      <td>1.197</td>      <td>1.652</td>      <td>1.371</td>      <td>0.000</td>      <td>1.708</td>      <td>1.552</td>      <td>2.116</td>      <td>2.215</td>      <td>1.105</td>    </tr>    <tr>      <th>吉林</th>      <td>0.341</td>      <td>0.428</td>      <td>2.352</td>      <td>0.301</td>      <td>0.440</td>      <td>1.708</td>      <td>0.000</td>      <td>0.473</td>      <td>0.407</td>      <td>3.820</td>      <td>2.001</td>    </tr>    <tr>      <th>黑龙江</th>      <td>0.728</td>      <td>0.900</td>      <td>1.977</td>      <td>0.186</td>      <td>0.689</td>      <td>1.552</td>      <td>0.473</td>      <td>0.000</td>      <td>0.746</td>      <td>3.521</td>      <td>1.606</td>    </tr>    <tr>      <th>上海</th>      <td>0.095</td>      <td>0.402</td>      <td>2.711</td>      <td>0.564</td>      <td>0.811</td>      <td>2.116</td>      <td>0.407</td>      <td>0.746</td>      <td>0.000</td>      <td>4.213</td>      <td>2.346</td>    </tr>    <tr>      <th>江苏</th>      <td>4.160</td>      <td>4.153</td>      <td>1.642</td>      <td>3.675</td>      <td>3.553</td>      <td>2.215</td>      <td>3.820</td>      <td>3.521</td>      <td>4.213</td>      <td>0.000</td>      <td>2.025</td>    </tr>    <tr>      <th>浙江</th>      <td>2.315</td>      <td>2.401</td>      <td>0.389</td>      <td>1.783</td>      <td>1.884</td>      <td>1.105</td>      <td>2.001</td>      <td>1.606</td>      <td>2.346</td>      <td>2.025</td>      <td>0.000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#4.4.2 系统聚类方法</span></span><br><span class="line"><span class="comment">#4.4.2.1 系统聚类的基本思想</span></span><br><span class="line">H1=sch.linkage(D12);H1   <span class="comment">#系统聚类过程，默认方法=&#x27;complete&#x27;</span></span><br><span class="line">sch.dendrogram(H1,labels=X12.index);  <span class="comment">#系统聚类图</span></span><br><span class="line">pd.DataFrame(sch.cut_tree(H1),index=X12.index)  <span class="comment">#聚类划分</span></span><br></pre></td></tr></table></figure><pre><code>array([[ 0.    ,  8.    ,  0.0953,  2.    ],       [ 3.    ,  7.    ,  0.1864,  2.    ],       [ 6.    , 12.    ,  0.3014,  3.    ],       [ 1.    , 11.    ,  0.3168,  3.    ],       [13.    , 14.    ,  0.3407,  6.    ],       [ 2.    , 10.    ,  0.3888,  2.    ],       [ 4.    , 15.    ,  0.44  ,  7.    ],       [ 5.    , 16.    ,  1.1054,  3.    ],       [17.    , 18.    ,  1.371 , 10.    ],       [ 9.    , 19.    ,  1.6423, 11.    ]])&#123;&#39;icoord&#39;: [[35.0, 35.0, 45.0, 45.0],  [25.0, 25.0, 40.0, 40.0],  [65.0, 65.0, 75.0, 75.0],  [55.0, 55.0, 70.0, 70.0],  [32.5, 32.5, 62.5, 62.5],  [15.0, 15.0, 47.5, 47.5],  [95.0, 95.0, 105.0, 105.0],  [85.0, 85.0, 100.0, 100.0],  [31.25, 31.25, 92.5, 92.5],  [5.0, 5.0, 61.875, 61.875]], &#39;dcoord&#39;: [[0.0, 0.1863982484785876, 0.1863982484785876, 0.0],  [0.0, 0.3014025493182192, 0.3014025493182192, 0.1863982484785876],  [0.0, 0.0953039349786894, 0.0953039349786894, 0.0],  [0.0, 0.3168462237387891, 0.3168462237387891, 0.0953039349786894],  [0.3014025493182192,   0.3407317939895567,   0.3407317939895567,   0.3168462237387891],  [0.0, 0.4399732129450085, 0.4399732129450085, 0.3407317939895567],  [0.0, 0.38877071105749833, 0.38877071105749833, 0.0],  [0.0, 1.1054137876139423, 1.1054137876139423, 0.38877071105749833],  [0.4399732129450085,   1.3710024193343529,   1.3710024193343529,   1.1054137876139423],  [0.0, 1.6422740653739492, 1.6422740653739492, 1.3710024193343529]], &#39;ivl&#39;: [&#39;江苏&#39;, &#39;内蒙古&#39;, &#39;吉林&#39;, &#39;山西&#39;, &#39;黑龙江&#39;, &#39;天津&#39;, &#39;北京&#39;, &#39;上海&#39;, &#39;辽宁&#39;, &#39;河北&#39;, &#39;浙江&#39;], &#39;leaves&#39;: [9, 4, 6, 3, 7, 1, 0, 8, 5, 2, 10], &#39;color_list&#39;: [&#39;C1&#39;, &#39;C1&#39;, &#39;C1&#39;, &#39;C1&#39;, &#39;C1&#39;, &#39;C1&#39;, &#39;C2&#39;, &#39;C2&#39;, &#39;C0&#39;, &#39;C0&#39;], &#39;leaves_color_list&#39;: [&#39;C0&#39;,  &#39;C1&#39;,  &#39;C1&#39;,  &#39;C1&#39;,  &#39;C1&#39;,  &#39;C1&#39;,  &#39;C1&#39;,  &#39;C1&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;]&#125;</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>      <th>5</th>      <th>6</th>      <th>7</th>      <th>8</th>      <th>9</th>      <th>10</th>    </tr>    <tr>      <th>地区</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>北京</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>天津</th>      <td>1</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>河北</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>山西</th>      <td>3</td>      <td>3</td>      <td>3</td>      <td>3</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>内蒙古</th>      <td>4</td>      <td>4</td>      <td>4</td>      <td>4</td>      <td>3</td>      <td>2</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>辽宁</th>      <td>5</td>      <td>5</td>      <td>5</td>      <td>5</td>      <td>4</td>      <td>3</td>      <td>3</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>吉林</th>      <td>6</td>      <td>6</td>      <td>6</td>      <td>3</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>黑龙江</th>      <td>7</td>      <td>7</td>      <td>3</td>      <td>3</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>上海</th>      <td>8</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>江苏</th>      <td>9</td>      <td>8</td>      <td>7</td>      <td>6</td>      <td>5</td>      <td>4</td>      <td>4</td>      <td>3</td>      <td>2</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>浙江</th>      <td>10</td>      <td>9</td>      <td>8</td>      <td>7</td>      <td>6</td>      <td>5</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table></div><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442607.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">H2=sch.linkage(D12,method=<span class="string">&#x27;ward&#x27;</span>);H2 <span class="comment">#系统聚类过程，方法=&#x27;ward&#x27;</span></span><br><span class="line">sch.dendrogram(H2,labels=X12.index);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442930.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(sch.cut_tree(H2),index=X12.index)  <span class="comment">#聚类划分</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>      <th>5</th>      <th>6</th>      <th>7</th>      <th>8</th>      <th>9</th>      <th>10</th>    </tr>    <tr>      <th>地区</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>北京</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>天津</th>      <td>1</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>河北</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>山西</th>      <td>3</td>      <td>3</td>      <td>3</td>      <td>3</td>      <td>2</td>      <td>2</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>内蒙古</th>      <td>4</td>      <td>4</td>      <td>4</td>      <td>4</td>      <td>3</td>      <td>3</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>辽宁</th>      <td>5</td>      <td>5</td>      <td>5</td>      <td>5</td>      <td>4</td>      <td>4</td>      <td>3</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>吉林</th>      <td>6</td>      <td>6</td>      <td>6</td>      <td>6</td>      <td>5</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>黑龙江</th>      <td>7</td>      <td>7</td>      <td>3</td>      <td>3</td>      <td>2</td>      <td>2</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>上海</th>      <td>8</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>江苏</th>      <td>9</td>      <td>8</td>      <td>7</td>      <td>7</td>      <td>6</td>      <td>5</td>      <td>4</td>      <td>3</td>      <td>2</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>浙江</th>      <td>10</td>      <td>9</td>      <td>8</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#4.4.2.2 系统聚类的基本步骤</span></span><br><span class="line">Z=(MVdata-MVdata.mean())/MVdata.std()</span><br><span class="line">D=sch.distance.pdist(Z);</span><br><span class="line">H=sch.linkage(D,method=<span class="string">&#x27;ward&#x27;</span>);</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>));                   <span class="comment">#图形大小</span></span><br><span class="line">sch.dendrogram(H,labels=MVdata.index);</span><br><span class="line">pd.DataFrame(sch.cut_tree(H),index=MVdata.index).iloc[:,-<span class="number">5</span>:]+<span class="number">1</span>  <span class="comment">#分5到1类</span></span><br><span class="line">pd.DataFrame(sch.cut_tree(H),index=MVdata.index).iloc[:,<span class="number">27</span>]+<span class="number">1</span>   <span class="comment">#分三类</span></span><br></pre></td></tr></table></figure><pre><code>&lt;Figure size 720x432 with 0 Axes&gt;&#123;&#39;icoord&#39;: [[25.0, 25.0, 35.0, 35.0],  [15.0, 15.0, 30.0, 30.0],  [5.0, 5.0, 22.5, 22.5],  [45.0, 45.0, 55.0, 55.0],  [75.0, 75.0, 85.0, 85.0],  [65.0, 65.0, 80.0, 80.0],  [115.0, 115.0, 125.0, 125.0],  [105.0, 105.0, 120.0, 120.0],  [95.0, 95.0, 112.5, 112.5],  [72.5, 72.5, 103.75, 103.75],  [145.0, 145.0, 155.0, 155.0],  [135.0, 135.0, 150.0, 150.0],  [175.0, 175.0, 185.0, 185.0],  [165.0, 165.0, 180.0, 180.0],  [142.5, 142.5, 172.5, 172.5],  [195.0, 195.0, 205.0, 205.0],  [225.0, 225.0, 235.0, 235.0],  [215.0, 215.0, 230.0, 230.0],  [255.0, 255.0, 265.0, 265.0],  [285.0, 285.0, 295.0, 295.0],  [275.0, 275.0, 290.0, 290.0],  [260.0, 260.0, 282.5, 282.5],  [245.0, 245.0, 271.25, 271.25],  [222.5, 222.5, 258.125, 258.125],  [200.0, 200.0, 240.3125, 240.3125],  [157.5, 157.5, 220.15625, 220.15625],  [88.125, 88.125, 188.828125, 188.828125],  [50.0, 50.0, 138.4765625, 138.4765625],  [13.75, 13.75, 94.23828125, 94.23828125]], &#39;dcoord&#39;: [[0.0, 2.970122619104813, 2.970122619104813, 0.0],  [0.0, 3.2756411446232763, 3.2756411446232763, 2.970122619104813],  [0.0, 6.277098781128152, 6.277098781128152, 3.2756411446232763],  [0.0, 1.402634465983541, 1.402634465983541, 0.0],  [0.0, 0.6647282708879352, 0.6647282708879352, 0.0],  [0.0, 1.3758486029397825, 1.3758486029397825, 0.6647282708879352],  [0.0, 0.2814426665809937, 0.2814426665809937, 0.0],  [0.0, 0.5061254912708356, 0.5061254912708356, 0.2814426665809937],  [0.0, 1.8729245829666057, 1.8729245829666057, 0.5061254912708356],  [1.3758486029397825,   2.051463694651939,   2.051463694651939,   1.8729245829666057],  [0.0, 0.2313186337738123, 0.2313186337738123, 0.0],  [0.0, 0.6447905284742304, 0.6447905284742304, 0.2313186337738123],  [0.0, 0.10700450515432215, 0.10700450515432215, 0.0],  [0.0, 0.8002229043965104, 0.8002229043965104, 0.10700450515432215],  [0.6447905284742304,   1.4545405987341742,   1.4545405987341742,   0.8002229043965104],  [0.0, 1.3017337978583432, 1.3017337978583432, 0.0],  [0.0, 0.32656208270959297, 0.32656208270959297, 0.0],  [0.0, 0.515718721560233, 0.515718721560233, 0.32656208270959297],  [0.0, 0.36317256837584555, 0.36317256837584555, 0.0],  [0.0, 0.44931864635240115, 0.44931864635240115, 0.0],  [0.0, 0.47007774412546727, 0.47007774412546727, 0.44931864635240115],  [0.36317256837584555,   0.7367902177040542,   0.7367902177040542,   0.47007774412546727],  [0.0, 0.8533337616725754, 0.8533337616725754, 0.7367902177040542],  [0.515718721560233,   1.3035903881001951,   1.3035903881001951,   0.8533337616725754],  [1.3017337978583432,   2.556128913447564,   2.556128913447564,   1.3035903881001951],  [1.4545405987341742,   3.7012689339015274,   3.7012689339015274,   2.556128913447564],  [2.051463694651939,   7.367531530855342,   7.367531530855342,   3.7012689339015274],  [1.402634465983541, 8.189380246390717, 8.189380246390717, 7.367531530855342],  [6.277098781128152,   15.565473761404546,   15.565473761404546,   8.189380246390717]], &#39;ivl&#39;: [&#39;广东&#39;,  &#39;江苏&#39;,  &#39;浙江&#39;,  &#39;山东&#39;,  &#39;北京&#39;,  &#39;上海&#39;,  &#39;河南&#39;,  &#39;河北&#39;,  &#39;四川&#39;,  &#39;辽宁&#39;,  &#39;安徽&#39;,  &#39;湖北&#39;,  &#39;湖南&#39;,  &#39;新疆&#39;,  &#39;贵州&#39;,  &#39;甘肃&#39;,  &#39;海南&#39;,  &#39;青海&#39;,  &#39;宁夏&#39;,  &#39;天津&#39;,  &#39;福建&#39;,  &#39;云南&#39;,  &#39;江西&#39;,  &#39;广西&#39;,  &#39;内蒙古&#39;,  &#39;吉林&#39;,  &#39;重庆&#39;,  &#39;黑龙江&#39;,  &#39;山西&#39;,  &#39;陕西&#39;], &#39;leaves&#39;: [18,  9,  10,  14,  0,  8,  15,  2,  22,  5,  11,  16,  17,  29,  23,  26,  20,  27,  28,  1,  12,  24,  13,  19,  4,  6,  21,  7,  3,  25], &#39;color_list&#39;: [&#39;C1&#39;,  &#39;C1&#39;,  &#39;C1&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C0&#39;], &#39;leaves_color_list&#39;: [&#39;C1&#39;,  &#39;C1&#39;,  &#39;C1&#39;,  &#39;C1&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;,  &#39;C2&#39;]&#125;</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>25</th>      <th>26</th>      <th>27</th>      <th>28</th>      <th>29</th>    </tr>    <tr>      <th>地区</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>北京</th>      <td>1</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>天津</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>河北</th>      <td>3</td>      <td>3</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>山西</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>内蒙古</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>辽宁</th>      <td>3</td>      <td>3</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>吉林</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>黑龙江</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>上海</th>      <td>1</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>江苏</th>      <td>4</td>      <td>4</td>      <td>3</td>      <td>2</td>      <td>1</td>    </tr>    <tr>      <th>浙江</th>      <td>4</td>      <td>4</td>      <td>3</td>      <td>2</td>      <td>1</td>    </tr>    <tr>      <th>安徽</th>      <td>3</td>      <td>3</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>福建</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>江西</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>山东</th>      <td>4</td>      <td>4</td>      <td>3</td>      <td>2</td>      <td>1</td>    </tr>    <tr>      <th>河南</th>      <td>3</td>      <td>3</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>湖北</th>      <td>3</td>      <td>3</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>湖南</th>      <td>3</td>      <td>3</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>广东</th>      <td>5</td>      <td>4</td>      <td>3</td>      <td>2</td>      <td>1</td>    </tr>    <tr>      <th>广西</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>海南</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>重庆</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>四川</th>      <td>3</td>      <td>3</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>贵州</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>云南</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>陕西</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>甘肃</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>青海</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>宁夏</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>新疆</th>      <td>2</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>  </tbody></table></div><pre><code>地区北京     1天津     2河北     2山西     2内蒙古    2辽宁     2吉林     2黑龙江    2上海     1江苏     3浙江     3安徽     2福建     2江西     2山东     3河南     2湖北     2湖南     2广东     3广西     2海南     2重庆     2四川     2贵州     2云南     2陕西     2甘肃     2青海     2宁夏     2新疆     2Name: 27, dtype: int32</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442242.png" alt="png"></p><h1 id="第5章-时序数据的模型分析"><a href="#第5章-时序数据的模型分析" class="headerlink" title="第5章 时序数据的模型分析"></a>第5章 时序数据的模型分析</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#5.1 时序数据的动态分析</span></span><br><span class="line"><span class="comment">#5.1.1 时间序列的介绍</span></span><br><span class="line"><span class="comment">#5.1.1.1 时间序列的概念</span></span><br><span class="line"><span class="comment">#####(1) 平稳序列模拟---随机游走</span></span><br><span class="line">n=<span class="number">1000</span></span><br><span class="line">rd=np.random.randn(n)</span><br><span class="line">plt.plot(rd);</span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442621.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####(2) 非平稳序列模拟---布朗运动</span></span><br><span class="line">plt.plot(rd.cumsum())</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x14a2ef70&gt;]</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101445524.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####(3) 平稳时间序列</span></span><br><span class="line"><span class="comment">#rd_ts=pd.Series(rd,index=pd.period_range(&#x27;2001-01-01&#x27;,&#x27;2003-12-30&#x27;))</span></span><br><span class="line">rd_ts=pd.Series(rd,index=pd.period_range(<span class="string">&#x27;2001-01-01&#x27;</span>,periods=n));rd_ts</span><br><span class="line">rd_ts.plot(grid=<span class="literal">True</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101445187.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####(4) 非平稳时间序列</span></span><br><span class="line">rd_ts.cumsum().plot(grid=<span class="literal">True</span>);</span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442704.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#5.1.3 时间序列的读取</span></span><br><span class="line">TSdata=pd.read_excel(<span class="string">&#x27;PyDm_data.xlsx&#x27;</span>,<span class="string">&#x27;TSdata&#x27;</span>,index_col=<span class="number">0</span>);TSdata.head()</span><br><span class="line">TSdata.plot();</span><br><span class="line"><span class="comment">#Close[&#x27;2016&#x27;].plot()</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101445201.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#5.3.1.3 股票收益率分析</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Return</span>(<span class="params">Yt</span>):</span>   <span class="comment">#计算收益率</span></span><br><span class="line">    Rt=Yt/Yt.shift(<span class="number">1</span>)-<span class="number">1</span>  <span class="comment">#Yt.diff()/Yt.shift(1)</span></span><br><span class="line">    <span class="keyword">return</span>(Rt)</span><br><span class="line"></span><br><span class="line">Rt=Return(TSdata);Rt</span><br><span class="line">Rt.plot().axhline(y=<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442282.png" alt="png"></p><h2 id="5-2-时间序列分析模型"><a href="#5-2-时间序列分析模型" class="headerlink" title="5.2 时间序列分析模型"></a>5.2 时间序列分析模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#5.2.1 AR模型</span></span><br><span class="line">np.random.seed(<span class="number">12</span>)   <span class="comment">#种子数，确保每次模拟结果一样</span></span><br><span class="line">n=<span class="number">100</span></span><br><span class="line">y1=np.zeros(n);y1</span><br><span class="line">u=np.random.randn(n);u</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n):</span><br><span class="line">    y1[t]=<span class="number">0.8</span>*y1[t-<span class="number">1</span>]+u[t]</span><br><span class="line">plt.plot(y1,<span class="string">&#x27;o-&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])array([ 0.473 , -0.6814,  0.2424, -1.7007,  0.7531, -1.5347,  0.0051,       -0.1202, -0.807 ,  2.8718, -0.5978,  0.4725,  1.096 , -1.2152,        1.3424, -0.1221,  1.0125, -0.9139, -1.0295,  1.2098,  0.5019,        0.1388,  0.6408,  0.5273, -1.1544, -2.2133, -1.6818, -1.7881,       -2.2185, -0.6474, -0.5284, -0.0392,  0.215 , -0.3844, -0.2539,        0.0733, -0.9972, -0.7139,  0.0354, -0.6779, -0.5719, -0.1059,        1.3358,  0.3187, -0.3376, -0.5853, -0.1149,  2.2418, -3.1474,        0.5351,  0.2325,  0.8676, -1.1482,  2.1143,  1.0009, -0.0514,        0.1598, -0.7163,  0.0505, -0.1433,  0.9436,  0.3576, -0.0834,        0.6778,  0.5561,  0.2227, -1.529 ,  1.0292, -1.1663, -1.0096,       -0.1053,  0.512 ,  1.4077, -1.6877,  1.4712,  1.6365, -0.4614,       -0.2014, -0.5718, -0.6033, -1.3394, -1.6897, -0.1993,  0.2578,        1.8288, -1.001 , -2.0917,  0.1466, -0.4664,  0.3562, -0.3979,       -1.2592, -0.6889,  0.8026,  0.2724, -0.9692,  0.872 , -1.4464,       -0.5365,  0.1979])[&lt;matplotlib.lines.Line2D at 0x1389db50&gt;]</code></pre><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442601.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#5.2.2 MA模型</span></span><br><span class="line">np.random.seed(<span class="number">123</span>)</span><br><span class="line">y2=np.zeros(n);</span><br><span class="line">u=np.random.randn(n);</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n):</span><br><span class="line">    y2[t]=u[t]+<span class="number">0.6</span>*u[t-<span class="number">1</span>]</span><br><span class="line">plt.plot(y2,<span class="string">&#x27;o-&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x137c74c0&gt;]</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101445105.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#5.2.3 ARMA模型</span></span><br><span class="line">np.random.seed(<span class="number">123</span>)</span><br><span class="line">y3=np.zeros(n);</span><br><span class="line">u=np.random.randn(n);</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n):</span><br><span class="line">    y3[t]=<span class="number">0.8</span>*y3[t-<span class="number">1</span>]+u[t]+<span class="number">0.6</span>*u[t-<span class="number">1</span>]</span><br><span class="line">plt.plot(y3,<span class="string">&#x27;o-&#x27;</span>);</span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442662.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#5.2.4 ARIMA模型</span></span><br><span class="line">np.random.seed(<span class="number">12</span>)</span><br><span class="line">n=<span class="number">100</span></span><br><span class="line">y4=np.random.randn(n).cumsum()</span><br><span class="line">plt.plot(y4,<span class="string">&#x27;o-&#x27;</span>)</span><br><span class="line">dy4=np.diff(y4)</span><br><span class="line">plt.plot(dy4,<span class="string">&#x27;o-&#x27;</span>)</span><br><span class="line">plt.plot(y4,<span class="string">&#x27;o-&#x27;</span>,dy4,<span class="string">&#x27;*-&#x27;</span>);plt.axhline(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101445139.png" alt="png"></p><h2 id="5-3-ARMA模型"><a href="#5-3-ARMA模型" class="headerlink" title="5.3 ARMA模型"></a>5.3 ARMA模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##5.3.1 序列的相关性检验</span></span><br><span class="line"><span class="keyword">from</span> statsmodels.graphics.tsaplots <span class="keyword">import</span> acf,plot_acf</span><br><span class="line">np.<span class="built_in">round</span>(acf(y2),<span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>array([ 1.   ,  0.447,  0.086,  0.142,  0.013,  0.028,  0.049,  0.001,       -0.023,  0.018,  0.05 ,  0.001,  0.005, -0.077, -0.329, -0.341,       -0.248, -0.154,  0.033, -0.086, -0.156])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_acf(y1); <span class="comment"># MR(1)模型的自相关系数</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101445810.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ac_QP</span>(<span class="params">Yt</span>):</span></span><br><span class="line">    <span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line">    r,q,p = sm.tsa.acf(Yt, qstat=<span class="literal">True</span>)</span><br><span class="line">    rqp=np.c_[r[<span class="number">1</span>:], q, p]</span><br><span class="line">    rqp=pd.DataFrame(rqp, columns=[<span class="string">&quot;AC&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;Prob(&gt;Q)&quot;</span>]);</span><br><span class="line">    <span class="keyword">return</span>(rqp)</span><br><span class="line">ac_QP(y2)[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>AC</th>      <th>Q</th>      <th>Prob(&gt;Q)</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.4469</td>      <td>20.5762</td>      <td>5.7304e-06</td>    </tr>    <tr>      <th>1</th>      <td>0.0865</td>      <td>21.3546</td>      <td>2.3062e-05</td>    </tr>    <tr>      <th>2</th>      <td>0.1424</td>      <td>23.4861</td>      <td>3.1977e-05</td>    </tr>    <tr>      <th>3</th>      <td>0.0130</td>      <td>23.5039</td>      <td>1.0041e-04</td>    </tr>    <tr>      <th>4</th>      <td>0.0275</td>      <td>23.5853</td>      <td>2.6079e-04</td>    </tr>    <tr>      <th>5</th>      <td>0.0495</td>      <td>23.8510</td>      <td>5.5627e-04</td>    </tr>    <tr>      <th>6</th>      <td>0.0012</td>      <td>23.8511</td>      <td>1.2101e-03</td>    </tr>    <tr>      <th>7</th>      <td>-0.0229</td>      <td>23.9092</td>      <td>2.3735e-03</td>    </tr>    <tr>      <th>8</th>      <td>0.0180</td>      <td>23.9456</td>      <td>4.3881e-03</td>    </tr>    <tr>      <th>9</th>      <td>0.0503</td>      <td>24.2328</td>      <td>7.0059e-03</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> statsmodels.graphics.tsaplots <span class="keyword">import</span> pacf,plot_pacf</span><br><span class="line">np.<span class="built_in">round</span>(pacf(y1),<span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>array([ 1.   ,  0.806,  0.076, -0.044, -0.094, -0.029, -0.065,  0.271,       -0.047,  0.039, -0.052, -0.127, -0.149, -0.227, -0.163, -0.03 ,        0.034,  0.079,  0.108, -0.15 ,  0.084])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_pacf(y2); <span class="comment"># AR(1)模型的自相关系数</span></span><br></pre></td></tr></table></figure><pre><code>C:\Users\kit\miniconda3\lib\site-packages\statsmodels\graphics\tsaplots.py:348: FutureWarning: The default method &#39;yw&#39; can produce PACF values outside of the [-1,1] interval. After 0.13, the default will change tounadjusted Yule-Walker (&#39;ywm&#39;). You can use this method now by setting method=&#39;ywm&#39;.  warnings.warn(</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442192.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##5.3.2 ARMA 模型建立与检验</span></span><br><span class="line">plot_acf(y3);</span><br><span class="line">plot_pacf(y3);</span><br></pre></td></tr></table></figure><pre><code>C:\Users\kit\miniconda3\lib\site-packages\statsmodels\graphics\tsaplots.py:348: FutureWarning: The default method &#39;yw&#39; can produce PACF values outside of the [-1,1] interval. After 0.13, the default will change tounadjusted Yule-Walker (&#39;ywm&#39;). You can use this method now by setting method=&#39;ywm&#39;.  warnings.warn(</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101444506.png" alt="png"></p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442532.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> statsmodels.tsa.stattools <span class="keyword">as</span> ts</span><br><span class="line">ts.arma_order_select_ic(y1,max_ar=<span class="number">3</span>,max_ma=<span class="number">3</span>,ic=[<span class="string">&#x27;aic&#x27;</span>,<span class="string">&#x27;bic&#x27;</span>,<span class="string">&#x27;hqic&#x27;</span>])</span><br><span class="line">ts.arma_order_select_ic(y1,max_ar=<span class="number">3</span>,max_ma=<span class="number">3</span>,ic=[<span class="string">&#x27;aic&#x27;</span>,<span class="string">&#x27;bic&#x27;</span>,<span class="string">&#x27;hqic&#x27;</span>])</span><br><span class="line">ts.arma_order_select_ic(y3,max_ar=<span class="number">3</span>,max_ma=<span class="number">3</span>,ic=[<span class="string">&#x27;aic&#x27;</span>, <span class="string">&#x27;bic&#x27;</span>,<span class="string">&#x27;hqic&#x27;</span>])</span><br></pre></td></tr></table></figure><pre><code>C:\Users\kit\miniconda3\lib\site-packages\statsmodels\tsa\statespace\sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.  warn(&#39;Non-stationary starting autoregressive parameters&#39;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\tsa\statespace\sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.  warn(&#39;Non-invertible starting MA parameters found.&#39;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\base\model.py:604: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals  warnings.warn(&quot;Maximum Likelihood optimization failed to &quot;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\tsa\statespace\sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.  warn(&#39;Non-stationary starting autoregressive parameters&#39;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\tsa\statespace\sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.  warn(&#39;Non-invertible starting MA parameters found.&#39;&#123;&#39;aic&#39;:           0         1         2         3 0  398.0513  341.2176  322.0127  313.2870 1  299.3400  300.8309  302.4800  302.8499 2  300.7664  302.7249  303.7563  304.2194 3  302.6161  304.1852  297.5538  305.4617, &#39;bic&#39;:           0         1         2         3 0  403.2616  349.0331  332.4333  326.3129 1  307.1555  311.2516  315.5059  318.4809 2  311.1871  315.7507  319.3873  322.4556 3  315.6420  319.8163  315.7900  326.3031, &#39;hqic&#39;:           0         1         2         3 0  400.1600  344.3806  326.2301  318.5588 1  302.5030  305.0483  307.7518  309.1760 2  304.9838  307.9967  310.0824  311.5999 3  307.8879  310.5114  304.9343  313.8966, &#39;aic_min_order&#39;: (3, 2), &#39;bic_min_order&#39;: (1, 0), &#39;hqic_min_order&#39;: (1, 0)&#125;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\tsa\statespace\sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.  warn(&#39;Non-stationary starting autoregressive parameters&#39;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\tsa\statespace\sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.  warn(&#39;Non-invertible starting MA parameters found.&#39;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\base\model.py:604: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals  warnings.warn(&quot;Maximum Likelihood optimization failed to &quot;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\tsa\statespace\sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.  warn(&#39;Non-stationary starting autoregressive parameters&#39;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\tsa\statespace\sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.  warn(&#39;Non-invertible starting MA parameters found.&#39;&#123;&#39;aic&#39;:           0         1         2         3 0  398.0513  341.2176  322.0127  313.2870 1  299.3400  300.8309  302.4800  302.8499 2  300.7664  302.7249  303.7563  304.2194 3  302.6161  304.1852  297.5538  305.4617, &#39;bic&#39;:           0         1         2         3 0  403.2616  349.0331  332.4333  326.3129 1  307.1555  311.2516  315.5059  318.4809 2  311.1871  315.7507  319.3873  322.4556 3  315.6420  319.8163  315.7900  326.3031, &#39;hqic&#39;:           0         1         2         3 0  400.1600  344.3806  326.2301  318.5588 1  302.5030  305.0483  307.7518  309.1760 2  304.9838  307.9967  310.0824  311.5999 3  307.8879  310.5114  304.9343  313.8966, &#39;aic_min_order&#39;: (3, 2), &#39;bic_min_order&#39;: (1, 0), &#39;hqic_min_order&#39;: (1, 0)&#125;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\tsa\statespace\sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.  warn(&#39;Non-invertible starting MA parameters found.&#39;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\tsa\statespace\sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.  warn(&#39;Non-invertible starting MA parameters found.&#39;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\tsa\statespace\sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.  warn(&#39;Non-invertible starting MA parameters found.&#39;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\base\model.py:604: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals  warnings.warn(&quot;Maximum Likelihood optimization failed to &quot;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\base\model.py:604: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals  warnings.warn(&quot;Maximum Likelihood optimization failed to &quot;&#123;&#39;aic&#39;:           0         1         2         3 0  510.8008  400.2847  358.0045  340.0668 1  339.4739  316.1596  316.4427  316.8878 2  326.0762  315.8914  317.7790  318.7369 3  325.9724  317.6345  312.5737  314.4425, &#39;bic&#39;:           0         1         2         3 0  516.0112  408.1002  368.4252  353.0926 1  347.2894  326.5803  329.4685  332.5188 2  336.4969  328.9173  333.4100  336.9730 3  338.9983  333.2656  330.8099  335.2838, &#39;hqic&#39;:           0         1         2         3 0  512.9095  403.4478  362.2220  345.3386 1  342.6370  320.3770  321.7145  323.2139 2  330.2936  321.1632  324.1052  326.1174 3  331.2442  323.9607  319.9543  322.8773, &#39;aic_min_order&#39;: (3, 2), &#39;bic_min_order&#39;: (1, 1), &#39;hqic_min_order&#39;: (3, 2)&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> statsmodels.tsa.arima.model <span class="keyword">import</span> ARIMA</span><br><span class="line">y1_arma=ARIMA(y1,order=(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)).fit()</span><br><span class="line">y1_arma.summary()</span><br></pre></td></tr></table></figure><table class="simpletable"><caption>SARIMAX Results</caption><tr>  <th>Dep. Variable:</th>           <td>y</td>        <th>  No. Observations:  </th>    <td>100</td>  </tr><tr>  <th>Model:</th>            <td>ARIMA(1, 0, 0)</td>  <th>  Log Likelihood     </th> <td>-146.670</td></tr><tr>  <th>Date:</th>            <td>Fri, 10 Dec 2021</td> <th>  AIC                </th>  <td>299.340</td></tr><tr>  <th>Time:</th>                <td>14:34:19</td>     <th>  BIC                </th>  <td>307.155</td></tr><tr>  <th>Sample:</th>                  <td>0</td>        <th>  HQIC               </th>  <td>302.503</td></tr><tr>  <th></th>                      <td> - 100</td>      <th>                     </th>     <td> </td>   </tr><tr>  <th>Covariance Type:</th>        <td>opg</td>       <th>                     </th>     <td> </td>   </tr></table><table class="simpletable"><tr>     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  </tr><tr>  <th>const</th>  <td>   -0.6584</td> <td>    0.501</td> <td>   -1.315</td> <td> 0.188</td> <td>   -1.639</td> <td>    0.323</td></tr><tr>  <th>ar.L1</th>  <td>    0.7925</td> <td>    0.068</td> <td>   11.725</td> <td> 0.000</td> <td>    0.660</td> <td>    0.925</td></tr><tr>  <th>sigma2</th> <td>    1.0894</td> <td>    0.148</td> <td>    7.360</td> <td> 0.000</td> <td>    0.799</td> <td>    1.380</td></tr></table><table class="simpletable"><tr>  <th>Ljung-Box (L1) (Q):</th>     <td>0.29</td> <th>  Jarque-Bera (JB):  </th> <td>0.37</td></tr><tr>  <th>Prob(Q):</th>                <td>0.59</td> <th>  Prob(JB):          </th> <td>0.83</td></tr><tr>  <th>Heteroskedasticity (H):</th> <td>0.80</td> <th>  Skew:              </th> <td>0.04</td></tr><tr>  <th>Prob(H) (two-sided):</th>    <td>0.53</td> <th>  Kurtosis:          </th> <td>3.29</td></tr></table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step).<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARIMA(y2,order=(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>)).fit().summary()</span><br></pre></td></tr></table></figure><table class="simpletable"><caption>SARIMAX Results</caption><tr>  <th>Dep. Variable:</th>           <td>y</td>        <th>  No. Observations:  </th>    <td>100</td>  </tr><tr>  <th>Model:</th>            <td>ARIMA(0, 1, 0)</td>  <th>  Log Likelihood     </th> <td>-173.033</td></tr><tr>  <th>Date:</th>            <td>Fri, 10 Dec 2021</td> <th>  AIC                </th>  <td>348.066</td></tr><tr>  <th>Time:</th>                <td>14:34:19</td>     <th>  BIC                </th>  <td>350.661</td></tr><tr>  <th>Sample:</th>                  <td>0</td>        <th>  HQIC               </th>  <td>349.116</td></tr><tr>  <th></th>                      <td> - 100</td>      <th>                     </th>     <td> </td>   </tr><tr>  <th>Covariance Type:</th>        <td>opg</td>       <th>                     </th>     <td> </td>   </tr></table><table class="simpletable"><tr>     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  </tr><tr>  <th>sigma2</th> <td>    1.9304</td> <td>    0.328</td> <td>    5.888</td> <td> 0.000</td> <td>    1.288</td> <td>    2.573</td></tr></table><table class="simpletable"><tr>  <th>Ljung-Box (L1) (Q):</th>     <td>3.11</td> <th>  Jarque-Bera (JB):  </th> <td>2.81</td></tr><tr>  <th>Prob(Q):</th>                <td>0.08</td> <th>  Prob(JB):          </th> <td>0.25</td></tr><tr>  <th>Heteroskedasticity (H):</th> <td>0.80</td> <th>  Skew:              </th> <td>0.28</td></tr><tr>  <th>Prob(H) (two-sided):</th>    <td>0.53</td> <th>  Kurtosis:          </th> <td>2.40</td></tr></table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step).<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARIMA(y3,order=(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)).fit().summary()</span><br></pre></td></tr></table></figure><table class="simpletable"><caption>SARIMAX Results</caption><tr>  <th>Dep. Variable:</th>           <td>y</td>        <th>  No. Observations:  </th>    <td>100</td>  </tr><tr>  <th>Model:</th>            <td>ARIMA(1, 1, 1)</td>  <th>  Log Likelihood     </th> <td>-154.377</td></tr><tr>  <th>Date:</th>            <td>Fri, 10 Dec 2021</td> <th>  AIC                </th>  <td>314.754</td></tr><tr>  <th>Time:</th>                <td>14:34:19</td>     <th>  BIC                </th>  <td>322.539</td></tr><tr>  <th>Sample:</th>                  <td>0</td>        <th>  HQIC               </th>  <td>317.904</td></tr><tr>  <th></th>                      <td> - 100</td>      <th>                     </th>     <td> </td>   </tr><tr>  <th>Covariance Type:</th>        <td>opg</td>       <th>                     </th>     <td> </td>   </tr></table><table class="simpletable"><tr>     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  </tr><tr>  <th>ar.L1</th>  <td>   -0.3062</td> <td>    0.158</td> <td>   -1.933</td> <td> 0.053</td> <td>   -0.617</td> <td>    0.004</td></tr><tr>  <th>ma.L1</th>  <td>    0.8211</td> <td>    0.096</td> <td>    8.565</td> <td> 0.000</td> <td>    0.633</td> <td>    1.009</td></tr><tr>  <th>sigma2</th> <td>    1.3157</td> <td>    0.218</td> <td>    6.025</td> <td> 0.000</td> <td>    0.888</td> <td>    1.744</td></tr></table><table class="simpletable"><tr>  <th>Ljung-Box (L1) (Q):</th>     <td>0.00</td> <th>  Jarque-Bera (JB):  </th> <td>0.88</td></tr><tr>  <th>Prob(Q):</th>                <td>0.98</td> <th>  Prob(JB):          </th> <td>0.64</td></tr><tr>  <th>Heteroskedasticity (H):</th> <td>0.89</td> <th>  Skew:              </th> <td>0.08</td></tr><tr>  <th>Prob(H) (two-sided):</th>    <td>0.74</td> <th>  Kurtosis:          </th> <td>2.57</td></tr></table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step).<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(y3,<span class="string">&#x27;o-&#x27;</span>,ARIMA(y3,order=(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)).fit().fittedvalues);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442549.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##5.4.3 序列的平稳性检验</span></span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa.stattools <span class="keyword">import</span> adfuller</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ADF</span>(<span class="params">ts</span>):</span> <span class="comment">#平稳性检验</span></span><br><span class="line">    dftest = adfuller(ts)</span><br><span class="line">    <span class="comment"># 对上述函数求得的值进行语义描述</span></span><br><span class="line">    dfoutput = pd.Series(dftest[<span class="number">0</span>:<span class="number">4</span>], index=[<span class="string">&#x27;Test Statistic&#x27;</span>,<span class="string">&#x27;p-value&#x27;</span>,<span class="string">&#x27;#Lags Used&#x27;</span>,<span class="string">&#x27;Number of Observations Used&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> dftest[<span class="number">4</span>].items():</span><br><span class="line">        dfoutput[<span class="string">&#x27;Critical Value (%s)&#x27;</span>%key] = value</span><br><span class="line">    <span class="keyword">return</span> dfoutput</span><br><span class="line"></span><br><span class="line"><span class="built_in">round</span>(ADF(y4),<span class="number">4</span>)</span><br><span class="line"><span class="built_in">round</span>(ADF(dy4),<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">ADF(y1)</span><br><span class="line">ADF(y2)</span><br><span class="line">ADF(y3)</span><br></pre></td></tr></table></figure><pre><code>Test Statistic                 -1.0933p-value                         0.7177#Lags Used                      0.0000Number of Observations Used    99.0000Critical Value (1%)            -3.4982Critical Value (5%)            -2.8912Critical Value (10%)           -2.5826dtype: float64Test Statistic                -10.4611p-value                         0.0000#Lags Used                      0.0000Number of Observations Used    98.0000Critical Value (1%)            -3.4989Critical Value (5%)            -2.8915Critical Value (10%)           -2.5828dtype: float64Test Statistic                 -3.2903p-value                         0.0153#Lags Used                      0.0000Number of Observations Used    99.0000Critical Value (1%)            -3.4982Critical Value (5%)            -2.8912Critical Value (10%)           -2.5826dtype: float64Test Statistic                 -3.3736p-value                         0.0119#Lags Used                      4.0000Number of Observations Used    95.0000Critical Value (1%)            -3.5011Critical Value (5%)            -2.8925Critical Value (10%)           -2.5833dtype: float64Test Statistic                 -2.7746p-value                         0.0620#Lags Used                      5.0000Number of Observations Used    94.0000Critical Value (1%)            -3.5019Critical Value (5%)            -2.8928Critical Value (10%)           -2.5835dtype: float64</code></pre><h2 id="5-4-股票指数预测模型的构建"><a href="#5-4-股票指数预测模型的构建" class="headerlink" title="5.4 股票指数预测模型的构建"></a>5.4 股票指数预测模型的构建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ct=TSdata[<span class="string">&#x27;2015-04&#x27;</span>:<span class="string">&#x27;2018-04&#x27;</span>].Close;</span><br><span class="line">Ct.plot()</span><br></pre></td></tr></table></figure><pre><code>&lt;AxesSubplot:xlabel=&#39;Date&#39;&gt;</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442684.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADF(Ct)</span><br></pre></td></tr></table></figure><pre><code>Test Statistic                  -3.7320p-value                          0.0037#Lags Used                      14.0000Number of Observations Used    694.0000Critical Value (1%)             -3.4398Critical Value (5%)             -2.8657Critical Value (10%)            -2.5690dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_acf(Ct,lags=<span class="number">50</span>);</span><br><span class="line">plot_pacf(Ct,lags=<span class="number">50</span>);</span><br></pre></td></tr></table></figure><pre><code>C:\Users\kit\miniconda3\lib\site-packages\statsmodels\graphics\tsaplots.py:348: FutureWarning: The default method &#39;yw&#39; can produce PACF values outside of the [-1,1] interval. After 0.13, the default will change tounadjusted Yule-Walker (&#39;ywm&#39;). You can use this method now by setting method=&#39;ywm&#39;.  warnings.warn(</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442981.png" alt="png"></p><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442069.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> statsmodels.tsa.stattools <span class="keyword">as</span> ts</span><br><span class="line">ts.arma_order_select_ic(Ct,max_ar=<span class="number">3</span>,max_ma=<span class="number">3</span>,ic=[<span class="string">&#x27;aic&#x27;</span>,<span class="string">&#x27;bic&#x27;</span>,<span class="string">&#x27;hqic&#x27;</span>])</span><br></pre></td></tr></table></figure><pre><code>C:\Users\kit\miniconda3\lib\site-packages\statsmodels\tsa\statespace\sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.  warn(&#39;Non-invertible starting MA parameters found.&#39;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\base\model.py:604: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals  warnings.warn(&quot;Maximum Likelihood optimization failed to &quot;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\tsa\statespace\sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.  warn(&#39;Non-stationary starting autoregressive parameters&#39;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\tsa\statespace\sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.  warn(&#39;Non-invertible starting MA parameters found.&#39;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\tsa\statespace\sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.  warn(&#39;Non-stationary starting autoregressive parameters&#39;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\tsa\statespace\sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.  warn(&#39;Non-invertible starting MA parameters found.&#39;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\base\model.py:604: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals  warnings.warn(&quot;Maximum Likelihood optimization failed to &quot;C:\Users\kit\miniconda3\lib\site-packages\statsmodels\tsa\statespace\sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.  warn(&#39;Non-stationary starting autoregressive parameters&#39;&#123;&#39;aic&#39;:             0          1          2          3 0  10563.7376  9692.3112  9134.0081  9355.7176 1   7830.4320  7826.5386  7821.4011  7823.4003 2   7827.9128  7822.1007  7823.4008  7822.0483 3   7819.7860  7823.6128  7770.7809  7834.9806, &#39;bic&#39;:             0          1          2          3 0  10572.8653  9706.0028  9152.2636  9378.5369 1   7844.1236  7844.7940  7844.2204  7850.7834 2   7846.1682  7844.9200  7850.7839  7853.9953 3   7842.6053  7850.9960  7802.7279  7871.4915, &#39;hqic&#39;:             0          1          2          3 0  10567.2639  9697.6007  9141.0608  9364.5334 1   7835.7215  7833.5912  7830.2169  7833.9792 2   7834.9654  7830.9165  7833.9797  7834.3904 3   7828.6018  7834.1918  7783.1230  7849.0859, &#39;aic_min_order&#39;: (3, 2), &#39;bic_min_order&#39;: (3, 2), &#39;hqic_min_order&#39;: (3, 2)&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> statsmodels.tsa.arima.model <span class="keyword">import</span> ARIMA</span><br><span class="line">Ct=pd.DataFrame(TSdata[<span class="string">&#x27;2015-04&#x27;</span>:<span class="string">&#x27;2018-04&#x27;</span>].Close)</span><br><span class="line">Ct.index = pd.DatetimeIndex(Ct.index).to_period(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">Ct_ARMA=ARIMA(Ct,order=(<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>)).fit()</span><br><span class="line">Ct_ARMA.summary()</span><br></pre></td></tr></table></figure><table class="simpletable"><caption>SARIMAX Results</caption><tr>  <th>Dep. Variable:</th>         <td>Close</td>      <th>  No. Observations:  </th>    <td>709</td>   </tr><tr>  <th>Model:</th>            <td>ARIMA(3, 0, 0)</td>  <th>  Log Likelihood     </th> <td>-3904.893</td></tr><tr>  <th>Date:</th>            <td>Fri, 10 Dec 2021</td> <th>  AIC                </th> <td>7819.786</td> </tr><tr>  <th>Time:</th>                <td>14:34:40</td>     <th>  BIC                </th> <td>7842.605</td> </tr><tr>  <th>Sample:</th>             <td>06-03-2015</td>    <th>  HQIC               </th> <td>7828.602</td> </tr><tr>  <th></th>                   <td>- 04-27-2018</td>   <th>                     </th>     <td> </td>    </tr><tr>  <th>Covariance Type:</th>        <td>opg</td>       <th>                     </th>     <td> </td>    </tr></table><table class="simpletable"><tr>     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  </tr><tr>  <th>const</th>  <td> 3596.1253</td> <td>  617.083</td> <td>    5.828</td> <td> 0.000</td> <td> 2386.665</td> <td> 4805.585</td></tr><tr>  <th>ar.L1</th>  <td>    1.0841</td> <td>    0.018</td> <td>   60.410</td> <td> 0.000</td> <td>    1.049</td> <td>    1.119</td></tr><tr>  <th>ar.L2</th>  <td>   -0.2076</td> <td>    0.027</td> <td>   -7.638</td> <td> 0.000</td> <td>   -0.261</td> <td>   -0.154</td></tr><tr>  <th>ar.L3</th>  <td>    0.1198</td> <td>    0.019</td> <td>    6.347</td> <td> 0.000</td> <td>    0.083</td> <td>    0.157</td></tr><tr>  <th>sigma2</th> <td> 3531.4178</td> <td>   86.705</td> <td>   40.729</td> <td> 0.000</td> <td> 3361.480</td> <td> 3701.356</td></tr></table><table class="simpletable"><tr>  <th>Ljung-Box (L1) (Q):</th>     <td>0.00</td> <th>  Jarque-Bera (JB):  </th> <td>2128.80</td></tr><tr>  <th>Prob(Q):</th>                <td>0.97</td> <th>  Prob(JB):          </th>  <td>0.00</td>  </tr><tr>  <th>Heteroskedasticity (H):</th> <td>0.14</td> <th>  Skew:              </th>  <td>-1.49</td> </tr><tr>  <th>Prob(H) (two-sided):</th>    <td>0.00</td> <th>  Kurtosis:          </th>  <td>10.95</td> </tr></table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step).<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from statsmodels.tsa.arima.model import ARIMA</span></span><br><span class="line"><span class="comment"># Ct=pd.DataFrame(TSdata[&#x27;2015-04&#x27;:&#x27;2018-04&#x27;].Close)</span></span><br><span class="line"><span class="comment"># Ct.index = pd.DatetimeIndex(Ct.index)</span></span><br><span class="line"><span class="comment"># Ct_ARMA1=ARIMA(Ct,order=(3,0,0)).fit()</span></span><br><span class="line">Ct=pd.DataFrame(TSdata[<span class="string">&#x27;2015-04&#x27;</span>:<span class="string">&#x27;2018-04&#x27;</span>].Close)</span><br><span class="line">plt.plot(Ct,<span class="string">&#x27;o-&#x27;</span>,Ct_ARMA.fittedvalues);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442327.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Ct_05=pd.DataFrame(&#123;<span class="string">&#x27; 实际值&#x27;</span>:TSdata.loc[<span class="string">&quot;2018-05&quot;</span>].Close&#125;); <span class="comment">#2018-05 收盘价数据</span></span><br><span class="line">Ct_05[<span class="string">&#x27; 预测值&#x27;</span>]=Ct_ARMA.forecast(<span class="number">22</span>)[<span class="number">0</span>] <span class="comment"># 模型预测数据</span></span><br><span class="line">Ct_05[<span class="string">&#x27; 绝对误差&#x27;</span>]=Ct_05[<span class="string">&#x27; 实际值&#x27;</span>]-Ct_05[<span class="string">&#x27; 预测值&#x27;</span>];</span><br><span class="line">Ct_05[<span class="string">&#x27; 相对误差(%)&#x27;</span>]=Ct_05[<span class="string">&#x27; 绝对误差&#x27;</span>]/Ct_05[<span class="string">&#x27; 实际值&#x27;</span>]*<span class="number">100</span>;</span><br><span class="line">Ct_05</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>实际值</th>      <th>预测值</th>      <th>绝对误差</th>      <th>相对误差(%)</th>    </tr>    <tr>      <th>Date</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2018-05-02</th>      <td>3763.65</td>      <td>3765.1936</td>      <td>-1.5436</td>      <td>-0.0410</td>    </tr>    <tr>      <th>2018-05-03</th>      <td>3793.00</td>      <td>3765.1936</td>      <td>27.8064</td>      <td>0.7331</td>    </tr>    <tr>      <th>2018-05-04</th>      <td>3774.60</td>      <td>3765.1936</td>      <td>9.4064</td>      <td>0.2492</td>    </tr>    <tr>      <th>2018-05-07</th>      <td>3834.19</td>      <td>3765.1936</td>      <td>68.9964</td>      <td>1.7995</td>    </tr>    <tr>      <th>2018-05-08</th>      <td>3878.68</td>      <td>3765.1936</td>      <td>113.4864</td>      <td>2.9259</td>    </tr>    <tr>      <th>2018-05-09</th>      <td>3871.62</td>      <td>3765.1936</td>      <td>106.4264</td>      <td>2.7489</td>    </tr>    <tr>      <th>2018-05-10</th>      <td>3893.06</td>      <td>3765.1936</td>      <td>127.8664</td>      <td>3.2845</td>    </tr>    <tr>      <th>2018-05-11</th>      <td>3872.84</td>      <td>3765.1936</td>      <td>107.6464</td>      <td>2.7795</td>    </tr>    <tr>      <th>2018-05-14</th>      <td>3909.29</td>      <td>3765.1936</td>      <td>144.0964</td>      <td>3.6860</td>    </tr>    <tr>      <th>2018-05-15</th>      <td>3924.10</td>      <td>3765.1936</td>      <td>158.9064</td>      <td>4.0495</td>    </tr>    <tr>      <th>2018-05-16</th>      <td>3892.84</td>      <td>3765.1936</td>      <td>127.6464</td>      <td>3.2790</td>    </tr>    <tr>      <th>2018-05-17</th>      <td>3864.05</td>      <td>3765.1936</td>      <td>98.8564</td>      <td>2.5584</td>    </tr>    <tr>      <th>2018-05-18</th>      <td>3903.06</td>      <td>3765.1936</td>      <td>137.8664</td>      <td>3.5323</td>    </tr>    <tr>      <th>2018-05-21</th>      <td>3921.24</td>      <td>3765.1936</td>      <td>156.0464</td>      <td>3.9795</td>    </tr>    <tr>      <th>2018-05-22</th>      <td>3906.21</td>      <td>3765.1936</td>      <td>141.0164</td>      <td>3.6101</td>    </tr>    <tr>      <th>2018-05-23</th>      <td>3854.58</td>      <td>3765.1936</td>      <td>89.3864</td>      <td>2.3190</td>    </tr>    <tr>      <th>2018-05-24</th>      <td>3827.22</td>      <td>3765.1936</td>      <td>62.0264</td>      <td>1.6207</td>    </tr>    <tr>      <th>2018-05-25</th>      <td>3816.50</td>      <td>3765.1936</td>      <td>51.3064</td>      <td>1.3443</td>    </tr>    <tr>      <th>2018-05-28</th>      <td>3833.26</td>      <td>3765.1936</td>      <td>68.0664</td>      <td>1.7757</td>    </tr>    <tr>      <th>2018-05-29</th>      <td>3804.01</td>      <td>3765.1936</td>      <td>38.8164</td>      <td>1.0204</td>    </tr>    <tr>      <th>2018-05-30</th>      <td>3723.37</td>      <td>3765.1936</td>      <td>-41.8236</td>      <td>-1.1233</td>    </tr>    <tr>      <th>2018-05-31</th>      <td>3802.38</td>      <td>3765.1936</td>      <td>37.1864</td>      <td>0.9780</td>    </tr>  </tbody></table></div><h2 id="第6章-大数据分析简介"><a href="#第6章-大数据分析简介" class="headerlink" title="第6章 大数据分析简介"></a>第6章 大数据分析简介</h2><h3 id="6-1-大数据的概念"><a href="#6-1-大数据的概念" class="headerlink" title="6.1 大数据的概念"></a>6.1 大数据的概念</h3><h3 id="6-2-Python文本预处理"><a href="#6-2-Python文本预处理" class="headerlink" title="6.2 Python文本预处理"></a>6.2 Python文本预处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 字符串的基本操作</span></span><br><span class="line"><span class="comment">#### 字符串的统计</span></span><br><span class="line"><span class="built_in">len</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">S=[<span class="string">&quot;asfef&quot;</span>, <span class="string">&quot;qwerty&quot;</span>, <span class="string">&quot;yuiop&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;stuff.blah.yech&quot;</span>];</span><br><span class="line"><span class="built_in">len</span>(S)</span><br><span class="line">[<span class="built_in">len</span>(s) <span class="keyword">for</span> s <span class="keyword">in</span> S]</span><br></pre></td></tr></table></figure><pre><code>35[5, 6, 5, 1, 15]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##### 字符串连接与拆分</span></span><br><span class="line"><span class="string">&#x27;Python&#x27;</span>+<span class="string">&#x27; &#x27;</span>+<span class="string">&#x27;Data Analysis&#x27;</span></span><br><span class="line"><span class="string">&#x27;暨南大学&#x27;</span>+<span class="string">&#x27;管理学院&#x27;</span></span><br></pre></td></tr></table></figure><pre><code>&#39;Python Data Analysis&#39;&#39;暨南大学管理学院&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">website = <span class="string">&#x27;%s%s%s&#x27;</span> % (<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;tab&#x27;</span>, <span class="string">&#x27;.com&#x27;</span>);website</span><br></pre></td></tr></table></figure><pre><code>&#39;Pythontab.com&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listStr = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;tab&#x27;</span>, <span class="string">&#x27;.com&#x27;</span>]</span><br><span class="line">website = <span class="string">&#x27;&#x27;</span>.join(listStr);website</span><br></pre></td></tr></table></figure><pre><code>&#39;Pythontab.com&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S1=<span class="string">&#x27;历史阐释;;历史事实;;历史评价;;唯物史观&#x27;</span></span><br><span class="line">S1.split(<span class="string">&#x27;;;&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>[&#39;历史阐释&#39;, &#39;历史事实&#39;, &#39;历史评价&#39;, &#39;唯物史观&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S2=<span class="string">&#x27;查理曼;;钦差巡察;;加洛林帝国;;法兰克;;中世纪&#x27;</span></span><br><span class="line">S3=<span class="string">&#x27;南宋;;政治忌讳;;人物评价;;人际关系;;包容政治&#x27;</span></span><br><span class="line">S4=[S1,S2,S3];S4</span><br></pre></td></tr></table></figure><pre><code>[&#39;历史阐释;;历史事实;;历史评价;;唯物史观&#39;, &#39;查理曼;;钦差巡察;;加洛林帝国;;法兰克;;中世纪&#39;, &#39;南宋;;政治忌讳;;人物评价;;人际关系;;包容政治&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_split</span>(<span class="params">content,sep</span>):</span></span><br><span class="line">    new_list=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(content)):</span><br><span class="line">        new_list.append(<span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="literal">None</span>,content[i].split(sep))))</span><br><span class="line">    <span class="keyword">return</span> new_list</span><br><span class="line"></span><br><span class="line">list_split(S4,<span class="string">&#x27;;;&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>[[&#39;历史阐释&#39;, &#39;历史事实&#39;, &#39;历史评价&#39;, &#39;唯物史观&#39;], [&#39;查理曼&#39;, &#39;钦差巡察&#39;, &#39;加洛林帝国&#39;, &#39;法兰克&#39;, &#39;中世纪&#39;], [&#39;南宋&#39;, &#39;政治忌讳&#39;, &#39;人物评价&#39;, &#39;人际关系&#39;, &#39;包容政治&#39;]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####  字符串查询与替换</span></span><br><span class="line"><span class="comment">#####  字符串查询</span></span><br><span class="line">S5=[<span class="string">&#x27;广州大学广州发展研究院&#x27;</span>,<span class="string">&#x27;暨南大学文学院历史系&#x27;</span>,<span class="string">&#x27;暨南大学管理学院&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;暨南大学&#x27;</span> <span class="keyword">in</span> S5[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_words</span>(<span class="params">content,pattern</span>):</span></span><br><span class="line">    <span class="keyword">return</span> [content[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(content)) <span class="keyword">if</span> (pattern <span class="keyword">in</span> content[i]) == <span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line">find_words(S5,<span class="string">&#x27;暨南大学&#x27;</span>)</span><br><span class="line"><span class="built_in">len</span>(find_words(S5,<span class="string">&#x27;暨南大学&#x27;</span>))</span><br><span class="line"><span class="built_in">len</span>(find_words(S5,<span class="string">&#x27;a&#x27;</span>))</span><br></pre></td></tr></table></figure><pre><code>True[&#39;暨南大学文学院历史系&#39;, &#39;暨南大学管理学院&#39;]20</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ##### 字符串替换</span></span><br><span class="line"><span class="string">&#x27;apple,orange&#x27;</span>.replace(<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;banana&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_replace</span>(<span class="params">content,old,new</span>):</span></span><br><span class="line">    <span class="keyword">return</span> [content[i].replace(old,new) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(content))]</span><br><span class="line">S5=[<span class="string">&#x27;广州大学广州发展研究院&#x27;</span>,<span class="string">&#x27;暨南大学文学院历史系&#x27;</span>,<span class="string">&#x27;暨南大学管理学院&#x27;</span>]</span><br><span class="line">list_replace(S5,<span class="string">&#x27;暨南大学&#x27;</span>,<span class="string">&#x27;华南农业大学&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>&#39;banana,orange&#39;[&#39;广州大学广州发展研究院&#39;, &#39;华南农业大学文学院历史系&#39;, &#39;华南农业大学管理学院&#39;]</code></pre><h2 id="网络爬虫技术应用"><a href="#网络爬虫技术应用" class="headerlink" title="网络爬虫技术应用"></a>网络爬虫技术应用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">%run PyDm_fun.py</span><br><span class="line"><span class="comment">#### 读取网页</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment"># 链家二手房数据</span></span><br><span class="line">url=<span class="string">&#x27;https://gz.lianjia.com/ershoufang/pg/&#x27;</span>  <span class="comment">#广州</span></span><br><span class="line"><span class="comment"># url=&#x27;https://fs.lianjia.com/ershoufang/pg&#x27;  #佛山</span></span><br><span class="line"><span class="comment">#url=&#x27;https://zs.ke.com/ershoufang/&#x27;           #中山</span></span><br><span class="line"></span><br><span class="line">page=read_html(url)</span><br><span class="line">soup=BeautifulSoup(page,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">houseInfo=html_text(soup,<span class="string">&#x27;.clear .title a&#x27;</span>);houseInfo   <span class="comment">#.houseInfo</span></span><br><span class="line">Price=html_text(soup,<span class="string">&#x27;.totalPrice span&#x27;</span>);Price</span><br></pre></td></tr></table></figure><pre><code>[&#39;开门见湖1200平米大花园，随时可以看房。无抵押&#39;, &#39;过五年不唯一 东南向三房 楼龄新 采光通风好&#39;, &#39;户型方正实用，交通便利，配套齐全，采光好&#39;, &#39;惠百氏广场 2室1厅 东&#39;, &#39;全新精装修  已改好两房户型，地铁口500米拎包入住&#39;, &#39;适合养生，流溪御景，坐标环境优雅，品质小区&#39;, &#39;金海岸花园聚湖 全新装修未住过 随时看房&#39;, &#39;颐和山庄 两套打通的房子 高层三房 业主可以分开卖&#39;, &#39;颐和山庄 两套打通的房子 高层两房 业主可以分开卖&#39;, &#39;鹭江地铁口，低层三房一厅，格局方正&#39;, &#39;免个税盛世名门3房大润发商圈业主诚心放卖&#39;, &#39;旅游度假，环境优美，家具齐全，加宽敞露天大平台&#39;, &#39;天平花苑 带电梯 南向望花园 户型方正 小区配套完善&#39;, &#39;花地湾板块合兴苑小区中层采光通风良好原装三房&#39;, &#39;越秀南路 商品房过5年 南向户型 产权清晰 看房有钥匙&#39;, &#39;南向，户型方正，满五，无贷款，保养好&#39;, &#39;广东化建大院 3室2厅 南 北&#39;, &#39;新华路 3室2厅 南&#39;, &#39;满五，方便看房，中间楼层，望小区&#39;, &#39;花果山体育馆旁 翡翠小区 实用三房 不靠路&#39;, &#39;万松园 电梯两房 已经可以使用 满5年免重税&#39;, &#39;民航小区   电梯南向两房  间隔方正实用  采光通风&#39;, &#39;南向望花园 电梯房 格局好 视野开阔&#39;, &#39;全新装修未住 朝南大三房  有钥匙看房方便&#39;, &#39;电梯西南向小三房 中高楼层 视野宽阔 过五年&#39;, &#39;南华时代城 园林式绿化小区 毛坯三房两卫 阳台向花园&#39;, &#39;空气清新 优质的森林 高层望山景视野开阔配套完善&#39;, &#39;东南朝向，望苑内花园视野靓楼层又好&#39;, &#39;怡园小区 2室1厅 南&#39;, &#39;满五唯一   高楼层  通风采光好 户型方正&#39;][&#39;1300&#39;, &#39;549&#39;, &#39;230&#39;, &#39;125&#39;, &#39;108&#39;, &#39;288&#39;, &#39;750&#39;, &#39;638&#39;, &#39;288&#39;, &#39;315&#39;, &#39;273&#39;, &#39;72&#39;, &#39;225&#39;, &#39;275&#39;, &#39;368&#39;, &#39;200&#39;, &#39;400&#39;, &#39;98&#39;, &#39;228&#39;, &#39;133&#39;, &#39;165&#39;, &#39;248&#39;, &#39;360&#39;, &#39;358&#39;, &#39;258&#39;, &#39;180&#39;, &#39;75&#39;, &#39;300&#39;, &#39;330&#39;, &#39;220&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算运行时间</span></span><br><span class="line">%time</span><br></pre></td></tr></table></figure><pre><code>Wall time: 0 ns</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LJdata=lianjia_all(url,<span class="number">1</span>)</span><br><span class="line">LJdata.to_excel(<span class="string">&#x27;LJdata.xlsx&#x27;</span>,sheet_name=<span class="string">&#x27;gz&#x27;</span>,index=<span class="literal">False</span>) <span class="comment"># 保存数据</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># #### 爬虫数据的统计分析</span></span><br><span class="line">LJdata=pd.read_excel(<span class="string">&#x27;PyDm_data.xlsx&#x27;</span>,<span class="string">&#x27;LJdata&#x27;</span>);LJdata[:<span class="number">6</span>]</span><br><span class="line">LJdata.info()</span><br><span class="line">Price=LJdata[<span class="string">&#x27;房屋价格&#x27;</span>];Price</span><br><span class="line">P=Price.astype(<span class="built_in">float</span>);P</span><br><span class="line">P.describe()</span><br><span class="line">plt.hist(P,bins=np.arange(<span class="number">0</span>,<span class="number">1000</span>,<span class="number">100</span>));</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 3000 entries, 0 to 2999Data columns (total 4 columns): #   Column  Non-Null Count  Dtype  ---  ------  --------------  -----   0   房屋信息    3000 non-null   object  1   房屋价格    3000 non-null   float64 2   房屋位置    3000 non-null   object  3   房屋单价    3000 non-null   object dtypes: float64(1), object(3)memory usage: 93.9+ KB</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442375.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 房屋信息信息提取</span></span><br><span class="line">House=LJdata[<span class="string">&#x27;房屋信息&#x27;</span>];</span><br><span class="line">House=[House[i].replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(House))]</span><br><span class="line">House1=list_split(House,<span class="string">&#x27;|&#x27;</span>);House1[:<span class="number">6</span>]</span><br></pre></td></tr></table></figure><pre><code>[[&#39;骏景花园&#39;, &#39;3室2厅&#39;, &#39;105平米&#39;, &#39;南北&#39;, &#39;简装&#39;, &#39;有电梯&#39;], [&#39;华景新城怡华台&#39;, &#39;3室2厅&#39;, &#39;91平米&#39;, &#39;西南&#39;, &#39;精装&#39;, &#39;有电梯&#39;], [&#39;芳草园&#39;, &#39;3室2厅&#39;, &#39;117.05平米&#39;, &#39;北&#39;, &#39;简装&#39;, &#39;有电梯&#39;], [&#39;保利百合花园二期&#39;, &#39;2室1厅&#39;, &#39;72.27平米&#39;, &#39;西南&#39;, &#39;精装&#39;, &#39;有电梯&#39;], [&#39;汇侨新城东区&#39;, &#39;2室1厅&#39;, &#39;75.5平米&#39;, &#39;东北&#39;, &#39;简装&#39;, &#39;无电梯&#39;], [&#39;华南碧桂园紫翠苑&#39;, &#39;3室2厅&#39;, &#39;107平米&#39;, &#39;东&#39;, &#39;简装&#39;, &#39;无电梯&#39;]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 数据清洗：去除第7位NONA</span></span><br><span class="line">length=[<span class="built_in">len</span>(House1[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(House1))];</span><br><span class="line">length_result=[idx <span class="keyword">for</span> idx, e <span class="keyword">in</span> <span class="built_in">enumerate</span>(length) <span class="keyword">if</span> e==<span class="number">7</span>]</span><br><span class="line"><span class="comment">###去除独栋别墅</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> length_result: House1[i].remove(<span class="string">&#x27;独栋别墅&#x27;</span>)</span><br><span class="line"><span class="comment">###去除在朝向中的不协调表述</span></span><br><span class="line">error_check=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(House1)) <span class="keyword">if</span> House1[i][<span class="number">1</span>]==<span class="string">&#x27;联排别墅&#x27;</span> <span class="keyword">or</span> House1[i][<span class="number">1</span>]==<span class="string">&#x27;独栋别墅&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> error_check: <span class="keyword">del</span> House1[i][<span class="number">1</span>]</span><br><span class="line">House1[-<span class="number">6</span>:]</span><br></pre></td></tr></table></figure><pre><code>[[&#39;锦绣香江花园布查特国际公寓&#39;, &#39;2室2厅&#39;, &#39;126平米&#39;, &#39;东南&#39;, &#39;其他&#39;, &#39;有电梯&#39;], [&#39;光大花园中海锦榕湾&#39;, &#39;3室1厅&#39;, &#39;102平米&#39;, &#39;南&#39;, &#39;其他&#39;, &#39;有电梯&#39;], [&#39;东浚荔景苑&#39;, &#39;3室1厅&#39;, &#39;95.97平米&#39;, &#39;东北&#39;, &#39;简装&#39;], [&#39;广州雅居乐花园剑桥郡&#39;, &#39;3室2厅&#39;, &#39;128.63平米&#39;, &#39;东南&#39;, &#39;其他&#39;, &#39;有电梯&#39;], [&#39;泓景花园&#39;, &#39;3室2厅&#39;, &#39;110平米&#39;, &#39;东北&#39;, &#39;其他&#39;, &#39;有电梯&#39;], [&#39;下塘西路&#39;, &#39;3室2厅&#39;, &#39;121.02平米&#39;, &#39;西北&#39;, &#39;其他&#39;, &#39;无电梯&#39;]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 构建分析用数据框</span></span><br><span class="line">House2=pd.DataFrame(House1)</span><br><span class="line">House2.info()</span><br><span class="line">House2.columns=[<span class="string">&#x27;小区&#x27;</span>,<span class="string">&#x27;格式&#x27;</span>,<span class="string">&#x27;面积&#x27;</span>,<span class="string">&#x27;朝向&#x27;</span>,<span class="string">&#x27;装修&#x27;</span>,<span class="string">&#x27;电梯&#x27;</span>]</span><br><span class="line">House2.head()</span><br><span class="line">House2[<span class="string">&#x27;小区&#x27;</span>].value_counts()</span><br><span class="line">House2[<span class="string">&#x27;格式&#x27;</span>].value_counts().plot(kind=<span class="string">&#x27;barh&#x27;</span>);</span><br><span class="line">House2[<span class="string">&#x27;面积&#x27;</span>].value_counts()</span><br><span class="line">House2[<span class="string">&#x27;朝向&#x27;</span>].value_counts()</span><br><span class="line">House2[<span class="string">&#x27;装修&#x27;</span>].value_counts()</span><br><span class="line">House2[<span class="string">&#x27;电梯&#x27;</span>].value_counts()</span><br><span class="line">MJ=House2[<span class="string">&#x27;面积&#x27;</span>].<span class="built_in">str</span>[:-<span class="number">3</span>].astype(<span class="built_in">float</span>)</span><br><span class="line"><span class="keyword">import</span> PyDm_fun <span class="keyword">as</span> da</span><br><span class="line">da.freq(MJ,bins=[<span class="number">0</span>,<span class="number">50</span>,<span class="number">80</span>,<span class="number">100</span>,<span class="number">150</span>,<span class="number">200</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#x27;&#x27;&#x27;去除None&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#dianti=list(House2.电梯)</span></span><br><span class="line"><span class="comment">#none_solve=[i for i in range(len(dianti)) if dianti[i]==None]</span></span><br><span class="line"><span class="comment">#len(none_solve)</span></span><br><span class="line"><span class="comment">#House2.iloc[10].电梯== None</span></span><br><span class="line"><span class="comment">#for i in none_solve:</span></span><br><span class="line"><span class="comment">#    House2.iloc[i].电梯=&#x27;暂无数据&#x27;</span></span><br><span class="line"><span class="comment">#da.tab(House2.电梯)</span></span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 3000 entries, 0 to 2999Data columns (total 6 columns): #   Column  Non-Null Count  Dtype ---  ------  --------------  -----  0   0       3000 non-null   object 1   1       3000 non-null   object 2   2       3000 non-null   object 3   3       3000 non-null   object 4   4       3000 non-null   object 5   5       2374 non-null   objectdtypes: object(6)memory usage: 140.8+ KB</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>小区</th>      <th>格式</th>      <th>面积</th>      <th>朝向</th>      <th>装修</th>      <th>电梯</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>骏景花园</td>      <td>3室2厅</td>      <td>105平米</td>      <td>南北</td>      <td>简装</td>      <td>有电梯</td>    </tr>    <tr>      <th>1</th>      <td>华景新城怡华台</td>      <td>3室2厅</td>      <td>91平米</td>      <td>西南</td>      <td>精装</td>      <td>有电梯</td>    </tr>    <tr>      <th>2</th>      <td>芳草园</td>      <td>3室2厅</td>      <td>117.05平米</td>      <td>北</td>      <td>简装</td>      <td>有电梯</td>    </tr>    <tr>      <th>3</th>      <td>保利百合花园二期</td>      <td>2室1厅</td>      <td>72.27平米</td>      <td>西南</td>      <td>精装</td>      <td>有电梯</td>    </tr>    <tr>      <th>4</th>      <td>汇侨新城东区</td>      <td>2室1厅</td>      <td>75.5平米</td>      <td>东北</td>      <td>简装</td>      <td>无电梯</td>    </tr>  </tbody></table></div><pre><code>骏景花园         41富力桃园         40翡翠绿洲森林半岛     31碧桂园凤凰城凤馨苑    30棠德花园         27             ..嘉逸华庭          1春暖花园          1风行牛奶宿舍        1富丽家园莲芳园       1尚东君御雅苑        1Name: 小区, Length: 1293, dtype: int64&lt;AxesSubplot:&gt;80平米        3695平米        2788平米        2677平米        2676平米        25            ..63.01平米      182.95平米      176.25平米      1184.8平米      1121.02平米     1Name: 面积, Length: 1603, dtype: int64南       728北       587南北      348东南      325东北      245西南      224东       200西北      172西       136东西       34暂无数据      1Name: 朝向, dtype: int64其他    1457简装     868精装     637毛坯      38Name: 装修, dtype: int64有电梯    1646无电梯     728Name: 电梯, dtype: int64</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>[下限</th>      <th>上限)</th>      <th>频数</th>      <th>频率(%)</th>      <th>累计频数(%)</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.0</td>      <td>50.0</td>      <td>1433.0</td>      <td>48.38</td>      <td>48.38</td>    </tr>    <tr>      <th>1</th>      <td>50.0</td>      <td>80.0</td>      <td>540.0</td>      <td>18.23</td>      <td>66.61</td>    </tr>    <tr>      <th>2</th>      <td>80.0</td>      <td>100.0</td>      <td>510.0</td>      <td>17.22</td>      <td>83.83</td>    </tr>    <tr>      <th>3</th>      <td>100.0</td>      <td>150.0</td>      <td>410.0</td>      <td>13.84</td>      <td>97.67</td>    </tr>    <tr>      <th>4</th>      <td>150.0</td>      <td>200.0</td>      <td>69.0</td>      <td>2.33</td>      <td>100.00</td>    </tr>  </tbody></table></div><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101444046.png" alt="png"></p><h2 id="数据库技术及应用"><a href="#数据库技术及应用" class="headerlink" title="数据库技术及应用"></a>数据库技术及应用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###  Python中数据库使用</span></span><br><span class="line"><span class="comment">###  数据库的建立与分析</span></span><br><span class="line"><span class="comment">###  Sqlite数据框的建立</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line">engine=create_engine(<span class="string">&#x27;sqlite:///LJdata.db&#x27;</span>)</span><br><span class="line">LJdata.to_sql(<span class="string">&#x27;LJdata&#x27;</span>,engine,index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ####  Sqlite3数据的处理</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line">engine=create_engine(<span class="string">&#x27;sqlite:///LJdata.db&#x27;</span>)</span><br><span class="line">LJ=pd.read_sql(<span class="string">&#x27;LJdata&#x27;</span>,engine)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LJ.info</span><br><span class="line">LJ.columns</span><br><span class="line">LJ.sex.value_counts().plot(kind=<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line">tab(LJ.sex,plot=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h1 id="第7章-文献计量与知识图谱"><a href="#第7章-文献计量与知识图谱" class="headerlink" title="第7章 文献计量与知识图谱"></a>第7章 文献计量与知识图谱</h1><h2 id="文献计量研究的框架"><a href="#文献计量研究的框架" class="headerlink" title="文献计量研究的框架"></a>文献计量研究的框架</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ## 文献数据的收集与分析</span></span><br><span class="line"><span class="comment"># ### 文献数据的获取</span></span><br><span class="line"><span class="comment"># ### 文献数据的收集</span></span><br><span class="line"><span class="comment"># #### 文献数据的读取</span></span><br><span class="line">WXdata=pd.read_excel(<span class="string">&#x27;PyDm_data.xlsx&#x27;</span>,<span class="string">&#x27;WXdata&#x27;</span>);</span><br><span class="line"><span class="comment">#WXdata.columns</span></span><br><span class="line">WXdata.info()</span><br><span class="line">WXdata.shape</span><br><span class="line">WXdata.iloc[:,:<span class="number">4</span>].head()</span><br><span class="line">WXdata.tail()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 831 entries, 0 to 830Data columns (total 8 columns): #   Column     Non-Null Count  Dtype ---  ------     --------------  -----  0   Title      831 non-null    object 1   Author     828 non-null    object 2   Organ      831 non-null    object 3   Source     831 non-null    object 4   Keyword    831 non-null    object 5   FirstDuty  827 non-null    object 6   Fund       444 non-null    object 7   Year       831 non-null    int64 dtypes: int64(1), object(7)memory usage: 52.1+ KB(831, 8)</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Title</th>      <th>Author</th>      <th>Organ</th>      <th>Source</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>国际健康促进研究的演进脉络与前沿热点——基于CiteSpace Ⅴ的文献计量与可视化分析</td>      <td>刘路;史曙生;</td>      <td>南京师范大学体育科学学院;盐城师范学院体育学院;</td>      <td>沈阳体育学院学报</td>    </tr>    <tr>      <th>1</th>      <td>国内区块链研究热点的文献计量分析</td>      <td>王发明;朱美娟;</td>      <td>山东工商学院经济学院;</td>      <td>情报杂志</td>    </tr>    <tr>      <th>2</th>      <td>我国教育管理研究热点的追溯——基于《现代教育管理》(2009-2016年)的文献计量和共词分析</td>      <td>丁亚东;薛海平;</td>      <td>首都师范大学;</td>      <td>现代教育管理</td>    </tr>    <tr>      <th>3</th>      <td>我国民办高等教育研究十年回眸——基于文献计量与可视化分析</td>      <td>郭哲;胡德鑫;</td>      <td>清华大学;</td>      <td>现代教育管理</td>    </tr>    <tr>      <th>4</th>      <td>从严治党研究的知识图谱、聚类维度与拓展空间——基于Citespace的文献计量分析</td>      <td>周鹏;</td>      <td>山东大学马克思主义学院;洛阳理工学院马克思主义学院;</td>      <td>探索</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Title</th>      <th>Author</th>      <th>Organ</th>      <th>Source</th>      <th>Keyword</th>      <th>FirstDuty</th>      <th>Fund</th>      <th>Year</th>    </tr>  </thead>  <tbody>    <tr>      <th>826</th>      <td>社会科学评价研究的新进展——《社会科学评价的文献计量理论与方法》评析</td>      <td>刘君</td>      <td>贵州工业大学图书馆 贵阳550003</td>      <td>图书情报工作</td>      <td>社会科学评价;;文献计量学;;研究进展;; 评析</td>      <td>刘君</td>      <td>NaN</td>      <td>2001</td>    </tr>    <tr>      <th>827</th>      <td>教育研究的文献计量法</td>      <td>安雪慧</td>      <td>北京师范大学教育系 100875</td>      <td>上海教育科研</td>      <td>文献计量法;学科;科学学;情报学;引文分析法;内容分析法;</td>      <td>安雪慧</td>      <td>NaN</td>      <td>2000</td>    </tr>    <tr>      <th>828</th>      <td>新的领域 新的视角——评《社会科学评价的文献计量理论与方法》</td>      <td>刘磊</td>      <td>南昌大学信息管理系!南昌330029</td>      <td>情报科学</td>      <td>文献计量;社会科学;领域;</td>      <td>刘磊</td>      <td>NaN</td>      <td>2000</td>    </tr>    <tr>      <th>829</th>      <td>科学文献计量分析与文献关联性研究</td>      <td>邹常诗</td>      <td>烟台师范学院化学系资料室!山东264025</td>      <td>情报资料工作</td>      <td>计量分析;;文献关联性;;科学文献;;文献计量学</td>      <td>邹常诗</td>      <td>NaN</td>      <td>2000</td>    </tr>    <tr>      <th>830</th>      <td>对我国情报学五种期刊的文献计量分析研究</td>      <td>陈杰</td>      <td>武汉大学图书情报学院 武汉 430072</td>      <td>情报杂志</td>      <td>情报学;;核心期刊;;文献计量分析</td>      <td>陈杰</td>      <td>NaN</td>      <td>2000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 文献数据的分析</span></span><br><span class="line"><span class="comment"># #### 科研单位与基金统计</span></span><br><span class="line">university=pd.read_excel(<span class="string">&#x27;PyDm_data.xlsx&#x27;</span>,<span class="string">&#x27;university&#x27;</span>);</span><br><span class="line">university.学校名称.head()</span><br><span class="line">fund=pd.read_excel(<span class="string">&#x27;PyDm_data.xlsx&#x27;</span>,<span class="string">&#x27;fund&#x27;</span>);</span><br><span class="line">fund.基金名称.head()</span><br></pre></td></tr></table></figure><pre><code>0      北京大学1    中国人民大学2      清华大学3    北京交通大学4    北京工业大学Name: 学校名称, dtype: object0              国家自然科学基金1    国家高技术研究发展计划(863计划)2        基础研究重大项目前期研究专项3              国家科技支撑计划4         国家重点实验室建设项目计划Name: 基金名称, dtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_words</span>(<span class="params">content,pattern</span>):</span>  <span class="comment">#寻找关键词</span></span><br><span class="line">    <span class="keyword">return</span> [content[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(content)) <span class="keyword">if</span> (pattern <span class="keyword">in</span> content[i]) == <span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_university</span>(<span class="params">content,pattern</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>([find_words(content[i],pattern) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(content)) <span class="keyword">if</span> find_words(content[i],pattern) != []])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_split</span>(<span class="params">content,separator</span>):</span>  <span class="comment">#分解信息</span></span><br><span class="line">    new_list=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(content)):</span><br><span class="line">        new_list.append(<span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="literal">None</span>,content[i].split(separator))))</span><br><span class="line">    <span class="keyword">return</span> new_list</span><br><span class="line"></span><br><span class="line">organ=list_split(WXdata[<span class="string">&#x27;Organ&#x27;</span>],<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"><span class="built_in">len</span>(organ)</span><br><span class="line">organ[<span class="number">0</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><pre><code>831[[&#39;南京师范大学体育科学学院&#39;, &#39;盐城师范学院体育学院&#39;], [&#39;山东工商学院经济学院&#39;], [&#39;首都师范大学&#39;], [&#39;清华大学&#39;], [&#39;山东大学马克思主义学院&#39;, &#39;洛阳理工学院马克思主义学院&#39;]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data1=pd.DataFrame([[i,search_university(organ,i)] <span class="keyword">for</span> i <span class="keyword">in</span> university[<span class="string">&#x27;学校名称&#x27;</span>]])</span><br><span class="line">data1.rename(columns=&#123;<span class="number">0</span>:<span class="string">&#x27;学校名称&#x27;</span>,<span class="number">1</span>:<span class="string">&#x27;频数&#x27;</span>&#125;,inplace=<span class="literal">True</span>)</span><br><span class="line">data1.sort_values(by=<span class="string">&#x27;频数&#x27;</span>,ascending = <span class="literal">False</span>)[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学校名称</th>      <th>频数</th>    </tr>  </thead>  <tbody>    <tr>      <th>512</th>      <td>武汉大学</td>      <td>42</td>    </tr>    <tr>      <th>194</th>      <td>吉林大学</td>      <td>24</td>    </tr>    <tr>      <th>277</th>      <td>南京大学</td>      <td>24</td>    </tr>    <tr>      <th>268</th>      <td>上海大学</td>      <td>17</td>    </tr>    <tr>      <th>154</th>      <td>大连理工大学</td>      <td>17</td>    </tr>    <tr>      <th>58</th>      <td>中国科学院大学</td>      <td>15</td>    </tr>    <tr>      <th>430</th>      <td>山东大学</td>      <td>15</td>    </tr>    <tr>      <th>0</th>      <td>北京大学</td>      <td>14</td>    </tr>    <tr>      <th>105</th>      <td>中国人民武装警察部队学院</td>      <td>14</td>    </tr>    <tr>      <th>355</th>      <td>安徽大学</td>      <td>13</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jijin=list_split(WXdata[<span class="string">&#x27;Fund&#x27;</span>].dropna(axis=<span class="number">0</span>,how=<span class="string">&#x27;all&#x27;</span>).tolist(),<span class="string">&#x27;;;&#x27;</span>)</span><br><span class="line">data2=pd.DataFrame([[i,search_university(jijin,i)] <span class="keyword">for</span> i <span class="keyword">in</span> fund[<span class="string">&#x27;基金名称&#x27;</span>]])</span><br><span class="line">data2.rename(columns=&#123;<span class="number">0</span>:<span class="string">&#x27;学校名称&#x27;</span>,<span class="number">1</span>:<span class="string">&#x27;频数&#x27;</span>&#125;,inplace=<span class="literal">True</span>)</span><br><span class="line">data2.sort_values(by=<span class="string">&#x27;频数&#x27;</span>,ascending = <span class="literal">False</span>)[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学校名称</th>      <th>频数</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>国家自然科学基金</td>      <td>91</td>    </tr>    <tr>      <th>5</th>      <td>国家社会科学基金</td>      <td>74</td>    </tr>    <tr>      <th>47</th>      <td>高等学校博士学科点专项科研基金</td>      <td>3</td>    </tr>    <tr>      <th>84</th>      <td>全国教育科学规划</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>国家科技支撑计划</td>      <td>2</td>    </tr>    <tr>      <th>46</th>      <td>国家留学基金</td>      <td>2</td>    </tr>    <tr>      <th>14</th>      <td>国家软科学研究计划</td>      <td>1</td>    </tr>    <tr>      <th>63</th>      <td>交通部重点科技项目</td>      <td>0</td>    </tr>    <tr>      <th>71</th>      <td>水利部科技创新项目计划</td>      <td>0</td>    </tr>    <tr>      <th>70</th>      <td>电子工业部电科院预研基金</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># #### 作者和关键词统计</span></span><br><span class="line">keyword=list_split(WXdata[<span class="string">&#x27;Keyword&#x27;</span>].dropna(axis=<span class="number">0</span>,how=<span class="string">&#x27;all&#x27;</span>).tolist(),<span class="string">&#x27;;;&#x27;</span>)</span><br><span class="line">keyword1=<span class="built_in">sum</span>(keyword,[])</span><br><span class="line">pd.DataFrame(keyword1)[<span class="number">0</span>].value_counts()[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure><pre><code>文献计量      343文献计量分析    133文献计量学      91知识图谱       52统计分析       43计量分析       40研究热点       34共词分析       34CNKI       28可视化        23Name: 0, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_replace</span>(<span class="params">content,old,new</span>):</span> <span class="comment">#清除信息中的空格</span></span><br><span class="line">    <span class="keyword">return</span> [content[i].replace(old,new) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(content))]</span><br><span class="line"></span><br><span class="line">author=list_replace(WXdata[<span class="string">&#x27;Author&#x27;</span>].dropna(axis=<span class="number">0</span>,how=<span class="string">&#x27;all&#x27;</span>).tolist(),<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">author1=list_split(author,<span class="string">&#x27;;&#x27;</span>);author1</span><br><span class="line"><span class="built_in">type</span>(author1)</span><br><span class="line">author2=<span class="built_in">sum</span>(author1,[])</span><br><span class="line"><span class="built_in">type</span>(author2)</span><br><span class="line">pd.DataFrame(author2)[<span class="number">0</span>].value_counts()[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure><pre><code>[[&#39;刘路&#39;, &#39;史曙生&#39;], [&#39;王发明&#39;, &#39;朱美娟&#39;], [&#39;丁亚东&#39;, &#39;薛海平&#39;], [&#39;郭哲&#39;, &#39;胡德鑫&#39;], [&#39;周鹏&#39;], [&#39;吕程&#39;], [&#39;李静&#39;, &#39;郝坚&#39;, &#39;方平&#39;], [&#39;庞海芍&#39;, &#39;张毅鑫&#39;, &#39;张金明&#39;, &#39;郇秀红&#39;], [&#39;孟阳&#39;, &#39;屈宝强&#39;], [&#39;杨林&#39;, &#39;王璐&#39;], [&#39;陈永清&#39;, &#39;林丽英&#39;], [&#39;唐红晶&#39;, &#39;董金权&#39;], [&#39;刘晓凤&#39;, &#39;秧茂盛&#39;, &#39;姚桂湘&#39;, &#39;卢明芳&#39;, &#39;彭一熳&#39;], [&#39;张平&#39;, &#39;丁超凡&#39;], [&#39;谢靖&#39;, &#39;陈静&#39;], [&#39;刘宇峰&#39;, &#39;袁丽华&#39;, &#39;朱晓华&#39;], [&#39;周承聪&#39;, &#39;刘越强&#39;], [&#39;贾兵强&#39;], [&#39;徐彤阳&#39;, &#39;任浩然&#39;, &#39;张国标&#39;], [&#39;王冰璐&#39;, &#39;步一&#39;, &#39;徐扬&#39;, &#39;刘姝雯&#39;], [&#39;刘爱军&#39;, &#39;葛继红&#39;, &#39;俞立平&#39;], [&#39;陈圣白&#39;], [&#39;李静&#39;, &#39;丁亚东&#39;], [&#39;王淑强&#39;, &#39;青秀玲&#39;, &#39;王晶&#39;, &#39;陈卉&#39;, &#39;崔璟&#39;, &#39;王绍强&#39;, &#39;裴韬&#39;, &#39;佟学思&#39;, &#39;刘啸&#39;, &#39;赵航&#39;, &#39;杜涛&#39;], [&#39;王小明&#39;], [&#39;叶选挺&#39;, &#39;尹静茹&#39;, &#39;张剑&#39;, &#39;刘云&#39;], [&#39;牛爱菊&#39;, &#39;贾新露&#39;, &#39;刘兰&#39;], [&#39;刘艳民&#39;], [&#39;骆琼&#39;], [&#39;黄敏&#39;, &#39;刘军平&#39;], [&#39;李明&#39;, &#39;郭瑞迎&#39;], [&#39;王澍&#39;, &#39;樊丽明&#39;], [&#39;魏峰&#39;, &#39;贝玉莲&#39;, &#39;刘宇&#39;], [&#39;张辉蓉&#39;, &#39;王晓杰&#39;, &#39;宋美臻&#39;], [&#39;陈育燕&#39;], [&#39;张鲁冀&#39;], [&#39;雷水旺&#39;], [&#39;吴宾&#39;, &#39;杨一民&#39;, &#39;娄成武&#39;], [&#39;张苗&#39;, &#39;袁凯华&#39;, &#39;陈银蓉&#39;, &#39;兰梦婷&#39;], [&#39;李子联&#39;], [&#39;郑烨&#39;, &#39;杨若愚&#39;, &#39;刘遥&#39;], [&#39;徐蕴&#39;, &#39;王会梅&#39;, &#39;魏琦&#39;, &#39;汤大朋&#39;], [&#39;裴丽&#39;, &#39;李琼&#39;, &#39;张素蕙&#39;], [&#39;胡晓艳&#39;, &#39;周兢&#39;], [&#39;田丹&#39;, &#39;刘奕杉&#39;, &#39;王玉琳&#39;], [&#39;陈善敏&#39;], [&#39;杨鹤林&#39;], [&#39;王林春&#39;, &#39;朱军文&#39;], [&#39;王晰&#39;, &#39;辛向阳&#39;, &#39;Craig M.Vogel&#39;], [&#39;郭晶&#39;, &#39;尚媛媛&#39;], [&#39;王雪&#39;], [&#39;刘爱军&#39;, &#39;俞立平&#39;], [&#39;刘佳&#39;, &#39;李莹莹&#39;], [&#39;李信&#39;, &#39;李倩&#39;], [&#39;顾永安&#39;], [&#39;肖艳&#39;], [&#39;丰景春&#39;, &#39;王沙沙&#39;, &#39;薛松&#39;, &#39;张可&#39;], [&#39;李飞&#39;, &#39;张健&#39;, &#39;王宗水&#39;], [&#39;黄文彬&#39;, &#39;王冰璐&#39;, &#39;步一&#39;, &#39;张久珍&#39;], [&#39;阿丽塔&#39;, &#39;武志昂&#39;], [&#39;韩瑞波&#39;], [&#39;李黎&#39;], [&#39;胡小飞&#39;, &#39;邹妍&#39;], [&#39;李鼎&#39;, &#39;黄英君&#39;, &#39;刘敏&#39;], [&#39;卢德生&#39;], [&#39;田进&#39;, &#39;杨正&#39;], [&#39;吴向文&#39;, &#39;王志军&#39;, &#39;冯小燕&#39;], [&#39;蔡运荃&#39;, &#39;李保强&#39;], [&#39;韩瑞波&#39;, &#39;叶娟丽&#39;], [&#39;张英俊&#39;,  &#39;涂翠平&#39;,  &#39;胡昭然&#39;,  &#39;欧薇&#39;,  &#39;张逸梅&#39;,  &#39;张煦彬&#39;,  &#39;张晴雪&#39;,  &#39;KHUSRAVSHO Rahmatulloev&#39;,  &#39;樊富珉&#39;], [&#39;马岩&#39;, &#39;姚轩鸽&#39;], [&#39;黄婷&#39;, &#39;郑荣宝&#39;, &#39;张雅琪&#39;], [&#39;王申罡&#39;, &#39;步一&#39;, &#39;张歌&#39;], [&#39;王婷&#39;], [&#39;陈军&#39;, &#39;谢卫红&#39;, &#39;陈扬森&#39;, &#39;李忠顺&#39;], [&#39;赵静&#39;], [&#39;易兰&#39;, &#39;陈恩伦&#39;], [&#39;燕慧泉&#39;, &#39;张仁琼&#39;, &#39;王磊&#39;, &#39;黄苑&#39;, &#39;付立波&#39;], [&#39;郑星&#39;], [&#39;杨书燕&#39;, &#39;吴小节&#39;, &#39;汪秀琼&#39;], [&#39;刘海燕&#39;, &#39;李琳&#39;, &#39;李雪蓉&#39;], [&#39;钟源&#39;], [&#39;王晨光&#39;], [&#39;万昊&#39;, &#39;谭宗颖&#39;, &#39;朱相丽&#39;], [&#39;缪瑞生&#39;, &#39;马海群&#39;], [&#39;撒凯悦&#39;, &#39;罗润东&#39;], [&#39;徐彤阳&#39;, &#39;任浩然&#39;, &#39;张国标&#39;], [&#39;朱亚成&#39;, &#39;王子朴&#39;], [&#39;花芳&#39;, &#39;管楠祥&#39;, &#39;李风侠&#39;, &#39;管翠中&#39;, &#39;赵军平&#39;], [&#39;刘月宁&#39;, &#39;王凤彬&#39;], [&#39;李信&#39;, &#39;李旭晖&#39;], [&#39;吴涛&#39;, &#39;张子石&#39;, &#39;金义富&#39;], [&#39;裴昌根&#39;, &#39;宋乃庆&#39;], [&#39;郭强&#39;], [&#39;王军辉&#39;, &#39;谭宗颖&#39;], [&#39;周晓艳&#39;, &#39;宋亚男&#39;], [&#39;曾建光&#39;], [&#39;任增元&#39;, &#39;张丽莎&#39;], [&#39;于丰园&#39;, &#39;于群英&#39;], [&#39;吕瑞花&#39;, &#39;常欢&#39;], [&#39;胥彦玲&#39;, &#39;李纯&#39;, &#39;张红&#39;], [&#39;王梦媛&#39;, &#39;桂佩霖&#39;], [&#39;何晓红&#39;, &#39;张春阳&#39;], [&#39;盛艳燕&#39;], [&#39;吴向文&#39;, &#39;王志军&#39;], [&#39;钱万强&#39;, &#39;江海燕&#39;, &#39;张峰&#39;, &#39;墨宏山&#39;, &#39;缴旭&#39;, &#39;魏琦&#39;], [&#39;成小娟&#39;, &#39;张文兰&#39;], [&#39;聂家华&#39;, &#39;仉晓红&#39;], [&#39;胡卉&#39;, &#39;吴鸣&#39;], [&#39;常雅红&#39;], [&#39;艾丽娟&#39;, &#39;夏芸&#39;, &#39;张晓&#39;], [&#39;黄振威&#39;], [&#39;郑长旭&#39;, &#39;吴建南&#39;], [&#39;李培凯&#39;, &#39;杨夕瑾&#39;, &#39;孙健敏&#39;], [&#39;黄英君&#39;, &#39;刘敏&#39;], [&#39;孙掌印&#39;], [&#39;李英&#39;, &#39;李惠&#39;, &#39;成琪&#39;], [&#39;朱晓伟&#39;, &#39;平宗莉&#39;, &#39;陈翠华&#39;], [&#39;李欢&#39;, &#39;杨赛男&#39;], [&#39;杨茗&#39;, &#39;王冠宇&#39;, &#39;周军&#39;], [&#39;郑敬斌&#39;], [&#39;冉连&#39;], [&#39;方刚&#39;, &#39;周青&#39;, &#39;杨伟&#39;], [&#39;廖杨&#39;], [&#39;龚花萍&#39;, &#39;王英&#39;], [&#39;涂智苹&#39;, &#39;宋铁波&#39;], [&#39;廖倩&#39;, &#39;吕拉昌&#39;, &#39;黄茹&#39;], [&#39;朱莉&#39;, &#39;霍明奎&#39;, &#39;康美娟&#39;], [&#39;田深圳&#39;, &#39;李雪铭&#39;], [&#39;翟倩&#39;, &#39;祝琳琳&#39;], [&#39;章小童&#39;, &#39;阮建海&#39;], [&#39;任全娥&#39;], [&#39;韩国明&#39;, &#39;朱侃&#39;, &#39;赵军义&#39;], [&#39;宋铁波&#39;, &#39;陈燕&#39;, &#39;吴小节&#39;, &#39;汪秀琼&#39;], [&#39;孙艳芝&#39;, &#39;沈镭&#39;], [&#39;李云星&#39;, &#39;李一杉&#39;, &#39;穆树航&#39;], [&#39;万明钢&#39;, &#39;杨阳&#39;], [&#39;金胜昔&#39;, &#39;林正军&#39;], [&#39;郑传军&#39;, &#39;徐芬&#39;, &#39;成虎&#39;], [&#39;黄丹凤&#39;, &#39;陈滔宏&#39;], [&#39;吴小节&#39;, &#39;曾华&#39;], [&#39;胡顺顺&#39;, &#39;刘志民&#39;], [&#39;杨思洛&#39;, &#39;程爱娟&#39;, &#39;冯雅&#39;], [&#39;朱锁玲&#39;, &#39;唐惠燕&#39;, &#39;倪峰&#39;, &#39;陈蓉蓉&#39;, &#39;施文&#39;], [&#39;黄琦&#39;, &#39;陶建平&#39;], [&#39;肖文芳&#39;, &#39;文庭孝&#39;, &#39;姜坷炘&#39;], [&#39;沙莉&#39;], [&#39;白玉&#39;, &#39;郑童桐&#39;, &#39;赵镇&#39;, &#39;赵醒村&#39;], [&#39;廖友国&#39;, &#39;何伟&#39;], [&#39;罗丹&#39;, &#39;杨永忠&#39;, &#39;林鸿熙&#39;], [&#39;何慧星&#39;, &#39;李亚飞&#39;], [&#39;张孝义&#39;, &#39;陈曦&#39;], [&#39;王飘&#39;], [&#39;王鹏龙&#39;, &#39;王勤花&#39;, &#39;安培浚&#39;, &#39;李恒吉&#39;], [&#39;房俊民&#39;, &#39;王立娜&#39;, &#39;唐川&#39;, &#39;张娟&#39;, &#39;田倩飞&#39;, &#39;徐婧&#39;], [&#39;王林&#39;, &#39;张元毓&#39;, &#39;季美旭&#39;, &#39;李秋逸&#39;], [&#39;张丁杰&#39;, &#39;徐飞&#39;], [&#39;李兴国&#39;], [&#39;钟源&#39;], [&#39;赵丹&#39;, &#39;王晰巍&#39;, &#39;李嘉兴&#39;, &#39;张长亮&#39;], [&#39;周建萍&#39;, &#39;王瑞青&#39;], [&#39;黄益军&#39;, &#39;吕庆华&#39;], [&#39;任小勋&#39;, &#39;乔晗&#39;, &#39;何乐平&#39;, &#39;黄稚渊&#39;, &#39;汪寿阳&#39;], [&#39;丁庆&#39;, &#39;仉晓红&#39;], [&#39;李艳&#39;, &#39;张慕华&#39;], [&#39;贾佳&#39;, &#39;潘云涛&#39;, &#39;马峥&#39;], [&#39;王小英&#39;, &#39;张鸿宇&#39;], [&#39;王景文&#39;, &#39;马红亚&#39;, &#39;高玉洁&#39;, &#39;李杏丽&#39;], [&#39;刘如&#39;, &#39;刘彦君&#39;, &#39;王康&#39;], [&#39;李欣&#39;, &#39;黄鲁成&#39;], [&#39;丁福虎&#39;], [&#39;陈小清&#39;, &#39;邢美园&#39;], [&#39;姜鑫&#39;, &#39;马海群&#39;], [&#39;陈鹤阳&#39;, &#39;张力&#39;], [&#39;杨红云&#39;, &#39;陈旭辉&#39;], [&#39;杨河清&#39;, &#39;王欣&#39;], [&#39;魏巍&#39;, &#39;黄丽霞&#39;], [&#39;李希&#39;], [&#39;龚堂华&#39;], [&#39;权玺&#39;], [&#39;李欣&#39;, &#39;黄鲁成&#39;], [&#39;郑石明&#39;], [&#39;赵蓉英&#39;, &#39;王晴&#39;], [&#39;付宜强&#39;, &#39;陈志军&#39;], [&#39;曹桂平&#39;, &#39;向剑勤&#39;, &#39;李正祥&#39;, &#39;黄文镝&#39;], [&#39;黄英君&#39;, &#39;韩经纬&#39;], [&#39;严若森&#39;, &#39;钱晶晶&#39;], [&#39;李雪蓉&#39;, &#39;张晓旭&#39;, &#39;李政阳&#39;, &#39;柏林&#39;, &#39;张奇&#39;, &#39;张建新&#39;, &#39;乔晗&#39;, &#39;汪寿阳&#39;], [&#39;杨晶照&#39;, &#39;崔亚梅&#39;, &#39;甄美荣&#39;], [&#39;王海涛&#39;, &#39;武凤群&#39;], [&#39;于晓敏&#39;, &#39;赵世奎&#39;, &#39;李泮泮&#39;], [&#39;胡振琪&#39;, &#39;付艳华&#39;, &#39;肖武&#39;, &#39;赵云肖&#39;, &#39;余洋&#39;], [&#39;黄龙光&#39;, &#39;刘小平&#39;, &#39;冷伏海&#39;], [&#39;邢颖&#39;, &#39;董瑜&#39;, &#39;袁建霞&#39;, &#39;杨艳萍&#39;], [&#39;倪萍&#39;, &#39;安新颖&#39;], [&#39;徐顽强&#39;, &#39;陈书华&#39;], [&#39;李江&#39;, &#39;蔡小静&#39;, &#39;李萍&#39;, &#39;彭欣蔚&#39;, &#39;叶程程&#39;], [&#39;高飞&#39;, &#39;张成涛&#39;], [&#39;郭晓云&#39;], [&#39;孙瑞英&#39;, &#39;王旭&#39;], [&#39;孙利芳&#39;, &#39;旭荣花&#39;], [&#39;余华&#39;, &#39;赵旭东&#39;, &#39;刘爱敏&#39;, &#39;伍力&#39;, &#39;陈蜀&#39;], [&#39;蒋娟&#39;, &#39;蒋逸颖&#39;], [&#39;朱锁玲&#39;, &#39;唐惠燕&#39;, &#39;倪峰&#39;, &#39;陈蓉蓉&#39;, &#39;施文&#39;], [&#39;刘东东&#39;, &#39;李一杉&#39;, &#39;刘子阳&#39;, &#39;周芳&#39;], [&#39;周晓艳&#39;, &#39;郝慧迪&#39;, &#39;叶信岳&#39;, &#39;张自然&#39;, &#39;宋祯利&#39;], [&#39;魏晓峰&#39;], [&#39;朱尖&#39;, &#39;柏松&#39;], [&#39;梁静&#39;, &#39;任增元&#39;], [&#39;郭顺利&#39;, &#39;张向先&#39;, &#39;李秀霞&#39;], [&#39;唐晓波&#39;, &#39;叶珍芳&#39;], [&#39;叶德磊&#39;], [&#39;高田钦&#39;, &#39;张凡&#39;], [&#39;张名&#39;, &#39;万弯&#39;], [&#39;张露&#39;, &#39;张俊飚&#39;, &#39;童庆蒙&#39;, &#39;郭晴&#39;], [&#39;彭辉&#39;, &#39;姚颉靖&#39;], [&#39;徐迎迎&#39;, &#39;魏瑞斌&#39;], [&#39;阳广元&#39;], [&#39;郭婷&#39;, &#39;郑颖&#39;], [&#39;冯瑶&#39;], [&#39;李凤兰&#39;, &#39;周春晓&#39;], [&#39;肖世华&#39;, &#39;邓柳丽&#39;], [&#39;张颖&#39;, &#39;沈君&#39;], [&#39;杨柳&#39;, &#39;叶继元&#39;], [&#39;孙毅&#39;], [&#39;蒙进军&#39;], [&#39;聂应高&#39;], [&#39;吴远仁&#39;, &#39;沈利生&#39;], [&#39;樊一阳&#39;, &#39;许京京&#39;], [&#39;贾亚敏&#39;, &#39;刘娅&#39;, &#39;赵志远&#39;], [&#39;杨瑞仙&#39;, &#39;任丽娟&#39;, &#39;李雪芹&#39;, &#39;刘欣&#39;], [&#39;林杨&#39;], [&#39;种法辉&#39;, &#39;陈丽华&#39;, &#39;巩天啸&#39;], [&#39;杨瑞仙&#39;], [&#39;王晴&#39;], [&#39;徐嘉徽&#39;, &#39;张向先&#39;, &#39;孙笑宇&#39;], [&#39;黄鲁成&#39;, &#39;王静静&#39;, &#39;李欣&#39;, &#39;吴菲菲&#39;, &#39;王立章&#39;], [&#39;彭乃珠&#39;, &#39;钟永恒&#39;], [&#39;李勇勤&#39;, &#39;高奎亭&#39;, &#39;王宏江&#39;, &#39;王永顺&#39;, &#39;雷文秀&#39;], [&#39;刘小玲&#39;, &#39;谭宗颖&#39;, &#39;张超星&#39;], [&#39;孙逊&#39;], [&#39;赵保国&#39;, &#39;王思瑶&#39;], [&#39;撒凯悦&#39;, &#39;沈君&#39;], [&#39;王恒玉&#39;, &#39;黄慧淼&#39;, &#39;陈淑珍&#39;], [&#39;刘月雷&#39;, &#39;聂峰英&#39;], [&#39;王邦权&#39;, &#39;李玉芹&#39;, &#39;蔡文伯&#39;], [&#39;黄裕荣&#39;, &#39;侯元元&#39;, &#39;蔚晓川&#39;, &#39;乔婧&#39;], [&#39;丁志健&#39;, &#39;王焕景&#39;], [&#39;吴传清&#39;, &#39;董旭&#39;], [&#39;张心悦&#39;, &#39;宋伟&#39;], [&#39;曲昭&#39;, &#39;丁堃&#39;, &#39;张春博&#39;], [&#39;曹霞&#39;], [&#39;周敏&#39;, &#39;任周鹏&#39;, &#39;方晓阳&#39;], [&#39;朱晋伟&#39;, &#39;胡万梅&#39;], [&#39;刘伟&#39;, &#39;夏恩君&#39;], [&#39;王硕旺&#39;, &#39;褚照锋&#39;], [&#39;高田钦&#39;, &#39;平和光&#39;], [&#39;秦慧&#39;], [&#39;尚建翠&#39;, &#39;房宝金&#39;], [&#39;张春博&#39;, &#39;丁堃&#39;, &#39;曲昭&#39;, &#39;刘则渊&#39;], [&#39;肖维霖&#39;, &#39;程如烟&#39;], [&#39;吴菲菲&#39;, &#39;张辉&#39;, &#39;黄鲁成&#39;], [&#39;李江&#39;, &#39;刘源浩&#39;, &#39;黄萃&#39;, &#39;苏竣&#39;], [&#39;李德华&#39;, &#39;袁晓嘉&#39;], [&#39;周瑛达&#39;], [&#39;王志玲&#39;, &#39;管泉&#39;, &#39;蓝洁&#39;], [&#39;李秋实&#39;, &#39;刘红玉&#39;], [&#39;邹海瑞&#39;, &#39;华爱华&#39;], [&#39;郭宇&#39;, &#39;王晰巍&#39;, &#39;贺伟&#39;, &#39;杨梦晴&#39;], [&#39;蒋建武&#39;, &#39;李南才&#39;], [&#39;朱宗乾&#39;, &#39;管婧莹&#39;, &#39;孙超&#39;], [&#39;赵民志&#39;], [&#39;朱丹红&#39;, &#39;黄少华&#39;], [&#39;张璐&#39;, &#39;长青&#39;, &#39;齐二石&#39;], [&#39;钮钦&#39;, &#39;钟新&#39;], [&#39;胡小洋&#39;, &#39;李小涛&#39;, &#39;余厚强&#39;, &#39;邱均平&#39;], [&#39;杜全生&#39;], [&#39;李玉&#39;], [&#39;肖学斌&#39;], [&#39;王凤仙&#39;], [&#39;梁春阳&#39;], [&#39;王超&#39;, &#39;韩明杰&#39;, &#39;李晨英&#39;, &#39;赵勇&#39;], [&#39;刘娅&#39;, &#39;佟贺丰&#39;], [&#39;鲍玉芳&#39;, &#39;马建霞&#39;], [&#39;唐川&#39;, &#39;唐卷&#39;, &#39;房俊民&#39;, &#39;刘春江&#39;], [&#39;许强&#39;, &#39;李恩科&#39;, &#39;王帮金&#39;, &#39;李海英&#39;], [&#39;刘偲偲&#39;], [&#39;郑淑芬&#39;, &#39;朱玉奴&#39;, &#39;缪家鼎&#39;], [&#39;朱亮&#39;, &#39;孟宪学&#39;, &#39;赵瑞雪&#39;, &#39;寇远涛&#39;, &#39;鲜国建&#39;], [&#39;徐久香&#39;, &#39;拓晓瑞&#39;], [&#39;王国华&#39;, &#39;武亚楠&#39;, &#39;钟声扬&#39;, &#39;杨腾飞&#39;], [&#39;罗润东&#39;, &#39;徐丹丹&#39;], [&#39;朱尖&#39;, &#39;苗威&#39;], [&#39;陈芳芳&#39;, &#39;余世英&#39;], [&#39;吴小节&#39;, &#39;杨书燕&#39;, &#39;汪秀琼&#39;], [&#39;温芳芳&#39;], [&#39;李红满&#39;, &#39;王哲&#39;], [&#39;崔建强&#39;, &#39;李勇勤&#39;, &#39;刘红霞&#39;, &#39;刘文娟&#39;], [&#39;盛春蕾&#39;, &#39;李晓明&#39;, &#39;刘峥&#39;], [&#39;侯元元&#39;, &#39;黄裕荣&#39;, &#39;张红&#39;, &#39;吕华侨&#39;], [&#39;明均仁&#39;, &#39;杨艳妮&#39;, &#39;余世英&#39;], [&#39;李荣日&#39;, &#39;段娟娟&#39;, &#39;李平&#39;], [&#39;李燕波&#39;], [&#39;杨静&#39;, &#39;路思&#39;], [&#39;冉华&#39;, &#39;王凤仙&#39;], [&#39;李思志&#39;, &#39;李佳骏&#39;, &#39;李艳红&#39;], [&#39;戴湘毅&#39;, &#39;唐承财&#39;, &#39;刘家明&#39;, &#39;朱爱琴&#39;], [&#39;肖明&#39;, &#39;孔成果&#39;], [&#39;袁晓园&#39;, &#39;华薇娜&#39;], [&#39;马仁杰&#39;, &#39;路思&#39;], [&#39;周承聪&#39;, &#39;夏文贵&#39;], [&#39;张莉&#39;, &#39;朱庆华&#39;, &#39;徐孝娟&#39;], [&#39;张立伟&#39;, &#39;姜春林&#39;], [&#39;孙玉伟&#39;, &#39;刘昌荣&#39;, &#39;吴继伟&#39;], [&#39;魏一鸣&#39;, &#39;袁潇晨&#39;, &#39;吴刚&#39;, &#39;杨列勋&#39;], [&#39;李秋云&#39;, &#39;韩国圣&#39;, &#39;张爱平&#39;, &#39;徐虹&#39;], [&#39;任红娟&#39;], [&#39;杨丽萍&#39;, &#39;蒋欣&#39;, &#39;毕新&#39;], [&#39;丁佐奇&#39;, &#39;缪宏建&#39;], [&#39;刘意&#39;, &#39;龚蛟腾&#39;], [&#39;陈新民&#39;], [&#39;严中华&#39;, &#39;鄢平&#39;, &#39;李斌宁&#39;], [&#39;王晴&#39;], [&#39;任增元&#39;, &#39;施婷&#39;], [&#39;刘虹&#39;, &#39;徐嘉莹&#39;], [&#39;樊晓杰&#39;, &#39;王一珉&#39;], [&#39;汪潘义&#39;, &#39;吴凤平&#39;], [&#39;薛晓丽&#39;, &#39;武夷山&#39;], [&#39;潘芳&#39;, &#39;刘弋玮&#39;, &#39;仲伟俊&#39;], [&#39;胡笑梅&#39;, &#39;许媛媛&#39;], [&#39;宋丽萍&#39;, &#39;王建芳&#39;, &#39;王树义&#39;], [&#39;马费成&#39;, &#39;刘旻璇&#39;], [&#39;孙继伟&#39;, &#39;金晓玲&#39;], [&#39;邓荔萍&#39;], [&#39;徐迪&#39;], [&#39;陈蔚丽&#39;], [&#39;许海云&#39;, &#39;刘春江&#39;, &#39;雷炳旭&#39;, &#39;李灵慧&#39;, &#39;方曙&#39;], [&#39;顾笑迎&#39;, &#39;熊泽泉&#39;, &#39;周健&#39;, &#39;张静波&#39;], [&#39;王文平&#39;, &#39;刘云&#39;, &#39;蒋海军&#39;], [&#39;陈几香&#39;, &#39;李秋惠&#39;, &#39;关晓明&#39;], [&#39;王鑫&#39;, &#39;史静&#39;], [&#39;李泮泮&#39;, &#39;于晓敏&#39;], [&#39;高照军&#39;, &#39;李季&#39;, &#39;李继学&#39;], [&#39;杨天平&#39;, &#39;段晓敏&#39;], [&#39;李昊青&#39;], [&#39;李贺&#39;, &#39;袁翠敏&#39;, &#39;李亚峰&#39;], [&#39;王燕平&#39;], [&#39;孙健敏&#39;, &#39;焦海涛&#39;, &#39;赵简&#39;], [&#39;耿旭&#39;], [&#39;宋赛赛&#39;, &#39;刘云&#39;, &#39;杨芳娟&#39;, &#39;安菁&#39;], [&#39;刘彬&#39;, &#39;陈柳&#39;, &#39;袁佩佩&#39;], [&#39;徐良培&#39;, &#39;陶建平&#39;], [&#39;王磊&#39;], [&#39;赵云辉&#39;, &#39;崔新健&#39;], [&#39;蔡文伯&#39;, &#39;张倩&#39;], [&#39;耿鹏&#39;, &#39;汪勤俭&#39;, &#39;冷怀明&#39;], [&#39;李旭辉&#39;, &#39;李超&#39;, &#39;魏瑞斌&#39;], [&#39;颉茂华&#39;, &#39;焦守滨&#39;, &#39;果婕欣&#39;], [&#39;王国华&#39;, &#39;杨腾飞&#39;, &#39;钟声扬&#39;], [&#39;王飒&#39;, &#39;包丽颖&#39;], [&#39;赵勇&#39;, &#39;李晨英&#39;, &#39;韩明杰&#39;], [&#39;徐成&#39;, &#39;赵宇翔&#39;, &#39;朱庆华&#39;], [&#39;王立伟&#39;, &#39;郑军卫&#39;, &#39;赵纪东&#39;, &#39;刘学&#39;], [&#39;穆雷&#39;, &#39;邹兵&#39;], [&#39;马建华&#39;, &#39;莫京&#39;, &#39;刘筱敏&#39;, &#39;梁永霞&#39;], [&#39;刘元洪&#39;], [&#39;袭著燕&#39;, &#39;迟考勋&#39;, &#39;杨阜城&#39;], [&#39;张倩&#39;, &#39;蔡文伯&#39;], [&#39;盛立&#39;, &#39;孙宇&#39;, &#39;刁天喜&#39;], [&#39;李淑玲&#39;], [&#39;唐震&#39;, &#39;李芳&#39;], [&#39;刘辉&#39;], [&#39;孙玉伟&#39;], [&#39;王军&#39;], [&#39;王雪梅&#39;, &#39;李新&#39;, &#39;张志强&#39;, &#39;马明国&#39;], [&#39;任增元&#39;, &#39;陈晓光&#39;, &#39;靖继鹏&#39;], [&#39;彭宗超&#39;, &#39;邵东珂&#39;, &#39;毛佩瑾&#39;], [&#39;赵俊芳&#39;, &#39;姜帆&#39;], [&#39;张翔&#39;, &#39;王璨&#39;], [&#39;王钢&#39;, &#39;张科&#39;, &#39;张伯阳&#39;], [&#39;滕广青&#39;, &#39;牟冬梅&#39;, &#39;任晶&#39;], [&#39;赵飞&#39;, &#39;艾春艳&#39;, &#39;游越&#39;, &#39;刘素清&#39;], [&#39;罗晓梅&#39;, &#39;黄鲁成&#39;], [&#39;罗润东&#39;, &#39;沈君&#39;, &#39;徐丹丹&#39;], [&#39;曹会聪&#39;, &#39;朱立禄&#39;, &#39;王桂敏&#39;], [&#39;李迎迎&#39;, &#39;王焕景&#39;, &#39;郑春厚&#39;], [&#39;孙玉伟&#39;, &#39;刘昌荣&#39;, &#39;朱玉强&#39;], [&#39;张立&#39;], [&#39;杜文军&#39;, &#39;常艳&#39;], [&#39;张媛&#39;, &#39;蔡建东&#39;], [&#39;姜春林&#39;], [&#39;李欣&#39;, &#39;黄鲁成&#39;], [&#39;李昊青&#39;], [&#39;张俊艳&#39;, &#39;祝文超&#39;], [&#39;徐迪&#39;], [&#39;仉晓红&#39;], [&#39;倪萍&#39;, &#39;涂中群&#39;, &#39;陆宇宏&#39;], [&#39;隋桂玲&#39;], [&#39;张伯阳&#39;, &#39;张科&#39;, &#39;王钢&#39;], [&#39;戴海琦&#39;, &#39;谢美华&#39;, &#39;丁树良&#39;], [&#39;尚悦&#39;, &#39;曾润喜&#39;], [&#39;任增元&#39;, &#39;安泽会&#39;], [&#39;赵春辉&#39;], [&#39;刘晓坤&#39;, &#39;任俊革&#39;], [&#39;朱尖&#39;, &#39;李乐营&#39;, &#39;张桂元&#39;], [&#39;司晓悦&#39;, &#39;王颖&#39;], [&#39;沈小玲&#39;, &#39;徐勇&#39;, &#39;严卫中&#39;], [&#39;杨彭&#39;], [&#39;魏志华&#39;, &#39;林亚清&#39;, &#39;吴育辉&#39;, &#39;李常青&#39;], [&#39;严贝妮&#39;, &#39;胡雪环&#39;], [&#39;孙晓宁&#39;, &#39;储节旺&#39;], [&#39;马万顺&#39;, &#39;孙鹏&#39;], [&#39;陈巧云&#39;, &#39;李艺&#39;], [&#39;王正晶&#39;], [&#39;任全娥&#39;], [&#39;杨红英&#39;, &#39;卢石&#39;], [&#39;朱永跃&#39;, &#39;马志强&#39;, &#39;唐青&#39;, &#39;刘兵&#39;], [&#39;范少萍&#39;, &#39;李迎迎&#39;, &#39;张志强&#39;], [&#39;张忠华&#39;, &#39;包阳&#39;, &#39;刘云&#39;], [&#39;霍宏&#39;, &#39;钱俊龙&#39;], [&#39;蔡文伯&#39;, &#39;刘曼&#39;], [&#39;赵纪东&#39;, &#39;郑军卫&#39;], [&#39;陈建俞&#39;, &#39;刘少雪&#39;, &#39;赵慧&#39;], [&#39;盛亚&#39;, &#39;徐璇&#39;], [&#39;马晨峰&#39;, &#39;谷祖莎&#39;, &#39;沈君&#39;], [&#39;刘记飞&#39;, &#39;刘兰杰&#39;, &#39;葛秋萍&#39;], [&#39;陈梦媛&#39;], [&#39;王晰巍&#39;, &#39;靖继鹏&#39;, &#39;王韦玮&#39;], [&#39;周群&#39;, &#39;左文革&#39;, &#39;陈仕吉&#39;], [&#39;刘小兵&#39;], [&#39;仉晓红&#39;], [&#39;罗亚泓&#39;], [&#39;焦豪&#39;, &#39;王情&#39;], [&#39;李玉明&#39;, &#39;梁秀香&#39;], [&#39;曹霞&#39;, &#39;陈云香&#39;, &#39;杨华&#39;], [&#39;丁伟国&#39;], [&#39;姚莉&#39;], [&#39;周金元&#39;, &#39;刘兵&#39;, &#39;唐青&#39;], [&#39;张雪梅&#39;, &#39;过仕明&#39;, &#39;高洁宁&#39;], [&#39;肖荣荣&#39;], [&#39;刘佳音&#39;], [&#39;蔡文伯&#39;, &#39;刘曼&#39;], [&#39;朱强&#39;, &#39;赵静&#39;, &#39;汪晓&#39;], [&#39;黄英君&#39;, &#39;赵雄&#39;, &#39;李江艳&#39;], [&#39;张忠华&#39;, &#39;刘云&#39;], [&#39;孙雨生&#39;, &#39;陈卫&#39;], [&#39;郑烨&#39;, &#39;胡春萍&#39;, &#39;王颖迪&#39;], [&#39;王晴&#39;], [&#39;赵光伟&#39;], [&#39;刘敖莉&#39;, &#39;董乃全&#39;], [&#39;李镜镜&#39;, &#39;张志强&#39;], [&#39;朱庆平&#39;, &#39;钱万强&#39;, &#39;江海燕&#39;], [&#39;王占奇&#39;], [&#39;朱亮&#39;, &#39;孟宪学&#39;], [&#39;赵路平&#39;, &#39;姚占雷&#39;], [&#39;陈燕&#39;, &#39;朱凡&#39;], [&#39;刘东晓&#39;, &#39;郑彦宁&#39;, &#39;赵筱媛&#39;, &#39;刘志辉&#39;], [&#39;王晶晶&#39;], [&#39;张静&#39;, &#39;王晶晶&#39;], [&#39;徐一方&#39;, &#39;许鑫&#39;, &#39;侯仕军&#39;], [&#39;陈汉轮&#39;], [&#39;魏晓峰&#39;], [&#39;沈艳红&#39;, &#39;张群&#39;, &#39;张娣&#39;], [&#39;滕瀚&#39;, &#39;曾天山&#39;], [&#39;赵天娇&#39;, &#39;符绍宏&#39;], [&#39;张增田&#39;, &#39;杨惠&#39;], [&#39;韩红旗&#39;, &#39;安小米&#39;], [&#39;苏燕&#39;, &#39;孙继林&#39;, &#39;于建荣&#39;, &#39;徐萍&#39;], [&#39;刘中梅&#39;, &#39;王续琨&#39;], [&#39;陈忠海&#39;, &#39;娄晶晶&#39;], [&#39;王栋&#39;, &#39;汪祖柱&#39;, &#39;龚彬炜&#39;], [&#39;党兰学&#39;], [&#39;迟凤玲&#39;], [&#39;梁花侠&#39;, &#39;白君礼&#39;], [&#39;张文学&#39;, &#39;王莉仙&#39;], [&#39;赵纪东&#39;, &#39;郑军卫&#39;], [&#39;黄筱玲&#39;, &#39;陈瑛&#39;], [&#39;周金元&#39;, &#39;陆小妹&#39;], [&#39;郝成淼&#39;], [&#39;李元&#39;, &#39;王伟&#39;], [&#39;卢青&#39;, &#39;李娜&#39;, &#39;武旭&#39;], [&#39;马建华&#39;, &#39;莫京&#39;], [&#39;刘炜&#39;, &#39;樊霞&#39;, &#39;吴进&#39;], [&#39;季淑娟&#39;, &#39;董月玲&#39;, &#39;张丽英&#39;], [&#39;李琼&#39;, &#39;林丽珊&#39;, &#39;魏如檀&#39;], [&#39;吴小兰&#39;], [&#39;钱俊龙&#39;, &#39;谢燕&#39;, &#39;潘小伦&#39;, &#39;熊樱菲&#39;], [&#39;安丽芝&#39;], [&#39;郝屹&#39;], [&#39;葛扬&#39;, &#39;侯祥鹏&#39;], [&#39;戚晓明&#39;, &#39;周应恒&#39;], [&#39;肖明&#39;, &#39;陈嘉勇&#39;, &#39;李国俊&#39;], [&#39;张克忠&#39;], [&#39;张青&#39;], [&#39;李武&#39;], [&#39;柴江&#39;], [&#39;魏瑞斌&#39;], [&#39;余思韵&#39;], [&#39;盛春蕾&#39;, &#39;李晓明&#39;, &#39;尹晓敏&#39;, &#39;贾淑霞&#39;], [&#39;储节旺&#39;, &#39;孙晓宁&#39;], [&#39;周卫华&#39;, &#39;林彦汝&#39;], [&#39;杨绎&#39;], [&#39;曹烃&#39;], [&#39;陈忠卫&#39;, &#39;马振英&#39;], [&#39;谷玉华&#39;, &#39;文娟&#39;], [&#39;周芳&#39;, &#39;常军民&#39;, &#39;高丽&#39;], [&#39;关朝晖&#39;, &#39;魏勇&#39;], [&#39;郑忠梅&#39;], [&#39;周建芳&#39;, &#39;刘桂芳&#39;], [&#39;俞立平&#39;, &#39;隆新文&#39;, &#39;武夷山&#39;], [&#39;杨红岗&#39;, &#39;苏楠&#39;, &#39;吴银雪&#39;, &#39;杨林&#39;], [&#39;杜慰纯&#39;, &#39;雷庆&#39;], [&#39;王丽婷&#39;], [&#39;叶宏明&#39;, &#39;麦林&#39;], [&#39;卢石&#39;, &#39;杨海燕&#39;, &#39;杨红英&#39;, &#39;余文雯&#39;], [&#39;王根&#39;, &#39;李金波&#39;], [&#39;高瑞&#39;], [&#39;李朝奎&#39;, &#39;李吟&#39;, &#39;汤国安&#39;, &#39;杨刚&#39;, &#39;李拥&#39;], [&#39;魏瑞斌&#39;, &#39;武夷山&#39;], [&#39;王燕平&#39;], [&#39;冯一丹&#39;, &#39;冯济德&#39;], [&#39;官凤婷&#39;], [&#39;李萍&#39;], [&#39;孔繁秀&#39;, &#39;周晓艳&#39;], [&#39;李伟基&#39;], [&#39;杨建华&#39;], [&#39;刘建军&#39;, &#39;张福勇&#39;], [&#39;沈艳红&#39;, &#39;张娣&#39;], [&#39;余江&#39;, &#39;陈凯华&#39;], [&#39;欧亮&#39;, &#39;万慕晨&#39;], [&#39;沈艳红&#39;], [&#39;路青&#39;, &#39;崔新春&#39;, &#39;胡艳波&#39;], [&#39;杜刚&#39;, &#39;孙作人&#39;, &#39;苗建军&#39;], [&#39;申彦舒&#39;], [&#39;袁建霞&#39;, &#39;董瑜&#39;, &#39;张博&#39;, &#39;邢颖&#39;, &#39;张薇&#39;], [&#39;王雪梅&#39;], [&#39;项国鹏&#39;, &#39;迟考勋&#39;, &#39;葛文霞&#39;], [&#39;尚新丽&#39;, &#39;史双青&#39;], [&#39;周文杰&#39;], [&#39;惠志斌&#39;], [&#39;漆凌云&#39;, &#39;杨秋丽&#39;], [&#39;刘丹雯&#39;], [&#39;赵永芬&#39;], [&#39;高奎亭&#39;, &#39;孙庆祝&#39;, &#39;刘红建&#39;], [&#39;姚梅芳&#39;, &#39;张萌萌&#39;], [&#39;彭希羡&#39;, &#39;孙霄凌&#39;, &#39;朱庆华&#39;], [&#39;冯瑶&#39;, &#39;王立洪&#39;], [&#39;余少瑛&#39;], [&#39;周英&#39;, &#39;白莉&#39;], [&#39;冯瑶&#39;, &#39;王立洪&#39;, &#39;董其军&#39;], [&#39;周文杰&#39;, &#39;于斌斌&#39;], [&#39;岳秀丽&#39;, &#39;靳宏博&#39;], [&#39;潘珩&#39;], [&#39;刘玉梅&#39;, &#39;王正兴&#39;], [&#39;王超&#39;, &#39;高娟&#39;, &#39;兰月新&#39;], [&#39;徐军&#39;, &#39;冯驹敏&#39;], [&#39;高娟&#39;, &#39;王超&#39;, &#39;兰月新&#39;], [&#39;董志宏&#39;, &#39;扁柯潇&#39;, &#39;林立瑛&#39;, &#39;兰月新&#39;], [&#39;扁柯潇&#39;, &#39;董志宏&#39;, &#39;林立瑛&#39;, &#39;兰月新&#39;], [&#39;林立瑛&#39;, &#39;扁柯潇&#39;, &#39;董志宏&#39;, &#39;兰月新&#39;], [&#39;冯瑶&#39;, &#39;王立洪&#39;], [&#39;宋丽萍&#39;, &#39;王建芳&#39;], [&#39;于康平&#39;], [&#39;赵鑫&#39;, &#39;付丽&#39;, &#39;周仁来&#39;], [&#39;胡承立&#39;, &#39;张韦&#39;], [&#39;何怡&#39;, &#39;张广华&#39;, &#39;崔雷&#39;, &#39;方丽&#39;], [&#39;霍跃红&#39;], [&#39;吴卫华&#39;, &#39;李亚君&#39;, &#39;秦荣环&#39;, &#39;毕长泉&#39;], [&#39;蒋君&#39;], [&#39;范丽娟&#39;, &#39;温素彬&#39;], [&#39;李朝旭&#39;, &#39;于振&#39;, &#39;张伟&#39;, &#39;戚静&#39;], [&#39;季淑娟&#39;, &#39;董月玲&#39;, &#39;王晓丽&#39;], [&#39;邓荔萍&#39;], [&#39;施李丽&#39;], [&#39;冯瑶&#39;, &#39;解烈军&#39;, &#39;董其军&#39;], [&#39;傅娟&#39;, &#39;郝伟龙&#39;], [&#39;魏勇&#39;, &#39;关朝晖&#39;], [&#39;熊则见&#39;, &#39;杨敏&#39;, &#39;赵雯&#39;], [&#39;张妍妍&#39;, &#39;王敏&#39;], [&#39;俞立平&#39;, &#39;隆新文&#39;, &#39;武夷山&#39;], [&#39;鲍国海&#39;], [&#39;李国俊&#39;, &#39;刘恩涛&#39;, &#39;肖明&#39;], [&#39;韦忠明&#39;], [&#39;王珏辉&#39;, &#39;矫艳萍&#39;, &#39;李向梅&#39;], [&#39;高巍&#39;, &#39;毕克新&#39;], [&#39;沈君&#39;, &#39;王续琨&#39;, &#39;高继平&#39;, &#39;滕立&#39;, &#39;林德明&#39;], [&#39;石本仁&#39;, &#39;杨志强&#39;, &#39;石水平&#39;], [&#39;赵捧未&#39;, &#39;史博文&#39;], [&#39;马宁&#39;, &#39;严根荣&#39;], [&#39;李昊青&#39;, &#39;夏一雪&#39;, &#39;郭其云&#39;, &#39;董希琳&#39;], [&#39;贾东琴&#39;, &#39;董伟&#39;], [&#39;郭云辉&#39;, &#39;乔娟&#39;], [&#39;杨槐&#39;], [&#39;王曰芬&#39;, &#39;曹艺&#39;], [&#39;周炀茗&#39;, &#39;水超&#39;, &#39;孙智信&#39;, &#39;黄强&#39;], [&#39;赵小风&#39;, &#39;黄贤金&#39;], [&#39;朱云霞&#39;, &#39;魏建香&#39;], [&#39;孙丽娟&#39;, &#39;川蓉&#39;], [&#39;刘桂锋&#39;, &#39;王秀红&#39;], [&#39;栾春娟&#39;, &#39;罗海山&#39;], [&#39;杨彩霞&#39;], [&#39;陈世海&#39;], [&#39;顾珩&#39;, &#39;姜超&#39;, &#39;兰月新&#39;], [&#39;汤宏波&#39;, &#39;段磊&#39;, &#39;刘莹&#39;], [&#39;安丽芝&#39;], [&#39;任芳名&#39;, &#39;尚荣&#39;, &#39;兰月新&#39;], [&#39;姜超&#39;, &#39;顾珩&#39;, &#39;兰月新&#39;], [&#39;柯健&#39;, &#39;李超&#39;], [&#39;刘华&#39;], [&#39;顾立平&#39;], [&#39;唐小利&#39;, &#39;杜建&#39;, &#39;孙涛涛&#39;, &#39;张燕舞&#39;], [&#39;柯健&#39;, &#39;李超&#39;], [&#39;陶蕾&#39;], [&#39;林菡密&#39;, &#39;孙绍荣&#39;], [&#39;张可&#39;, &#39;张毅&#39;, &#39;钱岳芳&#39;], [&#39;岳秀丽&#39;, &#39;靳宏博&#39;, &#39;肖颖&#39;, &#39;柯强&#39;], [&#39;储节旺&#39;, &#39;郭春侠&#39;], [&#39;胡剑&#39;], [&#39;林燕&#39;], [&#39;巩海霞&#39;, &#39;王明芝&#39;, &#39;谷丽娜&#39;], [&#39;刘圣君&#39;, &#39;屈宝强&#39;], [&#39;车尧&#39;, &#39;张皓月&#39;], [&#39;奉国和&#39;, &#39;奉永桃&#39;], [&#39;黄东流&#39;, &#39;张旭&#39;, &#39;刘娅&#39;], [&#39;王芳&#39;], [&#39;邱均平&#39;, &#39;王菲菲&#39;], [&#39;李昊青&#39;], [&#39;蒋波&#39;, &#39;章菁华&#39;], [&#39;李利&#39;, &#39;唐淑香&#39;], [&#39;唐勇&#39;], [&#39;刘妮波&#39;, &#39;阮学平&#39;, &#39;孙灵芝&#39;], [&#39;张素芳&#39;, &#39;王宏&#39;], [&#39;李建辉&#39;, &#39;徐宏&#39;, &#39;梁宏&#39;, &#39;廖苹&#39;, &#39;马永生&#39;], [&#39;崔薇&#39;, &#39;曾润喜&#39;, &#39;王国华&#39;], [&#39;刘效梅&#39;], [&#39;李华&#39;, &#39;苏春萍&#39;], [&#39;姜华&#39;, &#39;叶涛&#39;, &#39;姜春林&#39;], [&#39;邓大松&#39;, &#39;何晖&#39;], [&#39;张忠民&#39;, &#39;阳欣哲&#39;, &#39;张国良&#39;], [&#39;俞青&#39;], [&#39;陈瑞芳&#39;], [&#39;徐红玉&#39;], [&#39;李武&#39;, &#39;董伟&#39;], [&#39;余丰民&#39;], [&#39;尹怀琼&#39;, &#39;孙振球&#39;], [&#39;鲍国海&#39;], [&#39;耿玉玲&#39;], [&#39;李华&#39;, &#39;李政&#39;, &#39;顾才东&#39;, &#39;石娟&#39;], [&#39;周勤&#39;, &#39;张红历&#39;, &#39;张慧巧&#39;], [&#39;范笑仙&#39;, &#39;汤建民&#39;], [&#39;查先进&#39;, &#39;曹晨&#39;], [&#39;吕红&#39;, &#39;马海群&#39;], [&#39;张桂山&#39;, &#39;孙宁宁&#39;, &#39;赵艳丽&#39;, &#39;陈文勇&#39;], [&#39;顾立平&#39;], [&#39;熊励&#39;, &#39;刘文&#39;, &#39;孙友霞&#39;, &#39;李莉&#39;], [&#39;赵卫&#39;], [&#39;陈新艳&#39;, &#39;郭玉强&#39;], [&#39;鲍国海&#39;], [&#39;侯经川&#39;, &#39;吴山&#39;], [&#39;刘娅&#39;], [&#39;孙仙阁&#39;], [&#39;邱均平&#39;, &#39;杨瑞仙&#39;], [&#39;姜春林&#39;, &#39;张春博&#39;, &#39;胡志刚&#39;], [&#39;黄鲁成&#39;, &#39;李剑&#39;], [&#39;冯琳&#39;], [&#39;鲍国海&#39;], [&#39;方征&#39;], [&#39;孙启贵&#39;, &#39;郑泉&#39;], [&#39;董琳&#39;], [&#39;乔振&#39;], [&#39;吴芹&#39;], [&#39;高耀&#39;, &#39;刘志民&#39;], [&#39;刘秋华&#39;, &#39;罗顺元&#39;], [&#39;包玉泽&#39;, &#39;谭力文&#39;, &#39;刘林青&#39;], [&#39;左亮亮&#39;, &#39;郭春侠&#39;, &#39;吴昌合&#39;], [&#39;谭翀&#39;, &#39;张亦慧&#39;], [&#39;龙叶&#39;, &#39;陶海宁&#39;], [&#39;罗鸣春&#39;, &#39;黄希庭&#39;, &#39;苏丹&#39;], [&#39;姚乐野&#39;, &#39;秦慧&#39;], [&#39;王超&#39;], [&#39;张云&#39;], [&#39;唐芳&#39;], [&#39;谢会昌&#39;], [&#39;汤建民&#39;], [&#39;李小敏&#39;, &#39;范帆&#39;], [&#39;王立学&#39;, &#39;冷伏海&#39;], [&#39;姜春林&#39;, &#39;李江波&#39;, &#39;杜维滨&#39;, &#39;刘则渊&#39;], [&#39;陈宏东&#39;, &#39;张春燕&#39;], [&#39;王建冬&#39;], [&#39;鲍国海&#39;], [&#39;任红娟&#39;, &#39;张志强&#39;], [&#39;刘娅&#39;], [&#39;翟亚锐&#39;, &#39;王俊英&#39;], [&#39;孔悦凡&#39;, &#39;李天月&#39;], [&#39;许洪军&#39;], [&#39;奉国和&#39;], [&#39;肖显静&#39;], [&#39;祝清松&#39;], [&#39;邱均平&#39;, &#39;刘华华&#39;], [&#39;任红娟&#39;, &#39;张志强&#39;], [&#39;陆晓红&#39;], [&#39;魏勇&#39;, &#39;徐延龙&#39;], [&#39;张薇&#39;, &#39;钟晟&#39;, &#39;张晓燕&#39;], [&#39;万晓霞&#39;], [&#39;孙仙阁&#39;], [&#39;鲍国海&#39;], [&#39;王彦明&#39;, &#39;奉永桃&#39;, &#39;奉国和&#39;], [&#39;许超&#39;, &#39;赵瑞雪&#39;], [&#39;李宁银&#39;], [&#39;刘振华&#39;], [&#39;蒋葵&#39;], [&#39;董琳&#39;], [&#39;陈燕&#39;, &#39;李锐&#39;], [&#39;李军&#39;], [&#39;赵鑫&#39;, &#39;张光楠&#39;, &#39;周仁来&#39;], [&#39;马少美&#39;, &#39;汪徽志&#39;, &#39;孔琛&#39;], [&#39;高伟玮&#39;], [&#39;栾春娟&#39;, &#39;侯海燕&#39;], [&#39;宋刚&#39;, &#39;王续琨&#39;, &#39;冯茹&#39;], [&#39;田玉晶&#39;], [&#39;李爱群&#39;, &#39;黄玉舫&#39;, &#39;邱均平&#39;], [&#39;林德明&#39;, &#39;刘则渊&#39;], [&#39;杨良斌&#39;, &#39;周秋菊&#39;, &#39;金碧辉&#39;], [&#39;肖荣荣&#39;, &#39;张凤斌&#39;], [&#39;郑乐丹&#39;], [&#39;谢东&#39;], [&#39;姜春林&#39;, &#39;杜维滨&#39;, &#39;李江波&#39;, &#39;刘则渊&#39;], [&#39;高彬&#39;, &#39;柴明颎&#39;], [&#39;鲍国海&#39;], [&#39;王曰芬&#39;], [&#39;姜春林&#39;, &#39;李江波&#39;, &#39;杜维滨&#39;], [&#39;孔繁秀&#39;, &#39;张若蓉&#39;], [&#39;林丹明&#39;, &#39;梁强&#39;, &#39;姚明安&#39;, &#39;徐宗玲&#39;, &#39;吴乐群&#39;], [&#39;刘志辉&#39;], [&#39;虞飞华&#39;], [&#39;邱均平&#39;, &#39;苏金燕&#39;], [&#39;夏志锋&#39;, &#39;李秋实&#39;, &#39;周秀会&#39;], [&#39;黄宝晟&#39;], [&#39;朱庆华&#39;, &#39;晏尔伽&#39;, &#39;黄奇&#39;], [&#39;鲍国海&#39;], [&#39;潘魏伟&#39;], [&#39;张蓉&#39;, &#39;张行勇&#39;], [&#39;向节玉&#39;, &#39;兰小筠&#39;], [&#39;景晶&#39;], [&#39;孙志茹&#39;, &#39;张志强&#39;], [&#39;鲍国海&#39;], [&#39;肖红&#39;], [&#39;邱均平&#39;, &#39;苏金燕&#39;, &#39;熊尊妍&#39;], [&#39;王巧玲&#39;, &#39;钟永恒&#39;, &#39;江洪&#39;], [&#39;陈侠&#39;, &#39;王立荣&#39;, &#39;王惠翔&#39;], [&#39;廖胜姣&#39;, &#39;肖仙桃&#39;], [&#39;岳洪江&#39;, &#39;刘思峰&#39;, &#39;梁立明&#39;], [&#39;鲍国海&#39;], [&#39;汤京华&#39;, &#39;青海&#39;], [&#39;王吉武&#39;, &#39;黄鲁成&#39;, &#39;卢文光&#39;], [&#39;陈侠&#39;, &#39;王惠翔&#39;, &#39;梁滨&#39;], [&#39;刘君&#39;, &#39;金梅&#39;], [&#39;鲍国海&#39;], [&#39;张康生&#39;], [&#39;汪静媛&#39;], [&#39;范丽雯&#39;, &#39;孙良吉&#39;, &#39;陈继东&#39;], [&#39;董琳&#39;, &#39;刘清&#39;], [&#39;董琳&#39;, &#39;刘清&#39;], [&#39;张明&#39;, &#39;仲东亭&#39;], [&#39;卢福泉&#39;], [&#39;赵波&#39;, &#39;周传敬&#39;], [&#39;陈大明&#39;, &#39;肖宏&#39;], [&#39;化柏林&#39;], [&#39;晏尔伽&#39;, &#39;朱庆华&#39;], [&#39;周春雷&#39;, &#39;王伟军&#39;, &#39;成江东&#39;], [&#39;曹晓萍&#39;, &#39;张芳琴&#39;], [&#39;陈清文&#39;, &#39;黄田青&#39;], [&#39;王静&#39;, &#39;王宏鑫&#39;], [&#39;张界明&#39;], [&#39;陈发俊&#39;, &#39;史玉民&#39;, &#39;徐飞&#39;], [&#39;化柏林&#39;], [&#39;陈春&#39;, &#39;肖仙桃&#39;, &#39;孙成权&#39;], [&#39;化柏林&#39;], [&#39;杨广锋&#39;], [&#39;周宇梅&#39;, &#39;王丽琳&#39;], [&#39;万明钢&#39;, &#39;赵国军&#39;, &#39;杨俊龙&#39;], [&#39;“21世纪中国管理学发展研究”课题组&#39;, &#39;黄速建&#39;, &#39;黄群慧&#39;, &#39;张蒽&#39;, &#39;钟宏武&#39;, &#39;焦淑艳&#39;, &#39;朱昊伟&#39;], [&#39;邓尚民&#39;, &#39;孙玉伟&#39;], [&#39;陈太洋&#39;], [&#39;李长玲&#39;, &#39;化柏林&#39;], [&#39;季山&#39;, &#39;胡致强&#39;], [&#39;万明钢&#39;, &#39;王舟&#39;], [&#39;黄紫菲&#39;], [&#39;周凤华&#39;, &#39;朱雪忠&#39;], [&#39;王晓光&#39;], [&#39;郑文晖&#39;], [&#39;姜春林&#39;], [&#39;禇金涛&#39;], [&#39;肖仙桃&#39;, &#39;孙成权&#39;, &#39;赵波&#39;, &#39;田晓阳&#39;, &#39;郑玉荣&#39;, &#39;赵勇&#39;, &#39;阎惠红&#39;], [&#39;张维&#39;, &#39;李帅&#39;, &#39;熊熊&#39;, &#39;邱勇&#39;, &#39;黄华卿&#39;, &#39;钮元新&#39;, &#39;邢恩泉&#39;], [&#39;邱均平&#39;, &#39;马瑞敏&#39;], [&#39;王娟&#39;, &#39;佐斌&#39;], [&#39;燕辉&#39;], [&#39;“21世纪中国管理学发展研究”课题组&#39;], [&#39;袁顺波&#39;, &#39;董文鸳&#39;], [&#39;王曰芬&#39;, &#39;路菲&#39;, &#39;吴小雷&#39;], [&#39;朱少强&#39;, &#39;邱均平&#39;], [&#39;王曰芬&#39;, &#39;颜端武&#39;, &#39;路菲&#39;], [&#39;万锦堃&#39;, &#39;花平寰&#39;, &#39;孙秀坤&#39;], [&#39;方志蓉&#39;], [&#39;张德存&#39;], [&#39;邱均平&#39;, &#39;张凯勇&#39;], [&#39;徐云&#39;], [&#39;徐云&#39;], [&#39;雷洪德&#39;], [&#39;闫惠红&#39;, &#39;肖仙桃&#39;, &#39;孙成权&#39;], [&#39;赵蓉英&#39;], [&#39;孙继林&#39;], [&#39;严贝妮&#39;], [&#39;牟华&#39;, &#39;侯延香&#39;], [&#39;马建华&#39;], [&#39;张薇薇&#39;], [&#39;刘作仪&#39;], [&#39;乔文明&#39;, &#39;索大武&#39;], [&#39;刘玉照&#39;, &#39;孟献智&#39;], [&#39;陈维军&#39;], [&#39;党亚茹&#39;], [&#39;张建华&#39;, &#39;胡晓云&#39;, &#39;刘霞&#39;, &#39;刘贤龙&#39;, &#39;胡国亮&#39;], [&#39;刘君&#39;], [&#39;安雪慧&#39;], [&#39;刘磊&#39;], [&#39;邹常诗&#39;], [&#39;陈杰&#39;]]listlist鲍国海    11邱均平    10黄鲁成     8姜春林     8兰月新     8张志强     6刘云      5冯瑶      5任增元     5沈君      5Name: 0, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># #### 年份和期刊统计</span></span><br><span class="line">WXdata.Source.value_counts()[:<span class="number">10</span>]</span><br><span class="line">WXdata.Year.value_counts().plot(kind=<span class="string">&#x27;barh&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>现代情报        75情报科学        74情报杂志        58图书情报工作      50中国科技期刊研究    37科技管理研究      28图书馆工作与研究    18图书馆理论与实践    17情报理论与实践     15新世纪图书馆      15Name: Source, dtype: int64&lt;AxesSubplot:&gt;</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442629.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ## 知识图谱和科研管理</span></span><br><span class="line"><span class="comment"># ### 科研管理评价</span></span><br><span class="line">NKYWX=pd.read_excel(<span class="string">&#x27;PyDm_data.xlsx&#x27;</span>,<span class="string">&#x27;NKYWX&#x27;</span>);</span><br><span class="line">NKYWX.shape</span><br><span class="line">NKYWX.columns</span><br><span class="line">NKYWX.iloc[:,:<span class="number">2</span>].head()</span><br></pre></td></tr></table></figure><pre><code>(4368, 8)Index([&#39;Title&#39;, &#39;Author&#39;, &#39;Organ&#39;, &#39;Source&#39;, &#39;Keyword&#39;, &#39;FirstDuty&#39;, &#39;Fund&#39;, &#39;Year&#39;], dtype=&#39;object&#39;)</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Title</th>      <th>Author</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>乡村振兴的战略关键点及其路径</td>      <td>刘合光;</td>    </tr>    <tr>      <th>1</th>      <td>转基因玉米和转基因大豆盲样检测方法</td>      <td>李丽娜;金龙国;谢传晓;刘昌林;</td>    </tr>    <tr>      <th>2</th>      <td>桔梗的体外抗氧化活性及总多酚和黄酮苷元含量分析</td>      <td>朴向民;于营;Sin-Hee Han;Sang-Won Lee;王英平;郭靖;</td>    </tr>    <tr>      <th>3</th>      <td>未培养微生物分离培养技术研究进展</td>      <td>邢磊;赵圣国;郑楠;李松励;王加启;</td>    </tr>    <tr>      <th>4</th>      <td>食用植物油中转基因成分检测技术研究进展</td>      <td>李允静;肖芳;邵林;武玉花;万丹凤;吴刚;</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NKYDW=pd.read_excel(<span class="string">&#x27;PyDm_data.xlsx&#x27;</span>,<span class="string">&#x27;NKYDW&#x27;</span>);</span><br><span class="line">NKYDW.head()</span><br><span class="line"><span class="comment">#fund=pd.read_excel(&#x27;PyDm_data.xlsx&#x27;,&#x27;fund&#x27;);</span></span><br><span class="line"><span class="comment">#fund.基金名称.head()</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>单位</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>作物科学研究所</td>    </tr>    <tr>      <th>1</th>      <td>植物保护研究所</td>    </tr>    <tr>      <th>2</th>      <td>蔬菜花卉研究所</td>    </tr>    <tr>      <th>3</th>      <td>农业环境与可持续发展研究所</td>    </tr>    <tr>      <th>4</th>      <td>北京畜牧兽医研究所</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">organ=list_split(NKYWX[<span class="string">&#x27;Organ&#x27;</span>],<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">data1=pd.DataFrame([[i,search_university(organ,i)] <span class="keyword">for</span> i <span class="keyword">in</span> NKYDW[<span class="string">&#x27;单位&#x27;</span>]])</span><br><span class="line">data1.rename(columns=&#123;<span class="number">0</span>:<span class="string">&#x27;单位&#x27;</span>,<span class="number">1</span>:<span class="string">&#x27;频数&#x27;</span>&#125;,inplace=<span class="literal">True</span>)</span><br><span class="line">data1.sort_values(by=<span class="string">&#x27;频数&#x27;</span>,ascending = <span class="literal">False</span>)[:<span class="number">8</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>单位</th>      <th>频数</th>    </tr>  </thead>  <tbody>    <tr>      <th>10</th>      <td>农业资源与农业区划研究所</td>      <td>323</td>    </tr>    <tr>      <th>20</th>      <td>果树研究所</td>      <td>310</td>    </tr>    <tr>      <th>11</th>      <td>农业信息研究所</td>      <td>253</td>    </tr>    <tr>      <th>4</th>      <td>北京畜牧兽医研究所</td>      <td>245</td>    </tr>    <tr>      <th>9</th>      <td>农业经济与发展研究所</td>      <td>243</td>    </tr>    <tr>      <th>0</th>      <td>作物科学研究所</td>      <td>221</td>    </tr>    <tr>      <th>1</th>      <td>植物保护研究所</td>      <td>219</td>    </tr>    <tr>      <th>28</th>      <td>特产研究所</td>      <td>187</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jijin=list_split(NKYWX[<span class="string">&#x27;Fund&#x27;</span>].dropna(axis=<span class="number">0</span>,how=<span class="string">&#x27;all&#x27;</span>).tolist(),<span class="string">&#x27;;;&#x27;</span>)</span><br><span class="line">data2=pd.DataFrame([[i,search_university(jijin,i)] <span class="keyword">for</span> i <span class="keyword">in</span> fund[<span class="string">&#x27;基金名称&#x27;</span>]])</span><br><span class="line">data2.rename(columns=&#123;<span class="number">0</span>:<span class="string">&#x27;学校名称&#x27;</span>,<span class="number">1</span>:<span class="string">&#x27;频数&#x27;</span>&#125;,inplace=<span class="literal">True</span>)</span><br><span class="line">data2.sort_values(by=<span class="string">&#x27;频数&#x27;</span>,ascending = <span class="literal">False</span>)[:<span class="number">12</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学校名称</th>      <th>频数</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>国家自然科学基金</td>      <td>1043</td>    </tr>    <tr>      <th>3</th>      <td>国家科技支撑计划</td>      <td>263</td>    </tr>    <tr>      <th>5</th>      <td>国家社会科学基金</td>      <td>45</td>    </tr>    <tr>      <th>6</th>      <td>国家重点基础研究发展计划(973计划)</td>      <td>25</td>    </tr>    <tr>      <th>1</th>      <td>国家高技术研究发展计划(863计划)</td>      <td>23</td>    </tr>    <tr>      <th>20</th>      <td>农业部软科学研究项目</td>      <td>12</td>    </tr>    <tr>      <th>72</th>      <td>农业部“948”项目</td>      <td>9</td>    </tr>    <tr>      <th>46</th>      <td>国家留学基金</td>      <td>5</td>    </tr>    <tr>      <th>26</th>      <td>国家星火计划</td>      <td>4</td>    </tr>    <tr>      <th>38</th>      <td>农业科技成果转化资金</td>      <td>3</td>    </tr>    <tr>      <th>47</th>      <td>高等学校博士学科点专项科研基金</td>      <td>2</td>    </tr>    <tr>      <th>7</th>      <td>攀登计划</td>      <td>1</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">author=list_replace(NKYWX[<span class="string">&#x27;Author&#x27;</span>].dropna(axis=<span class="number">0</span>,how=<span class="string">&#x27;all&#x27;</span>).tolist(),<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">author1=list_split(author,<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">author2=<span class="built_in">sum</span>(author1,[])</span><br><span class="line">pd.DataFrame(author2)[<span class="number">0</span>].value_counts()[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><pre><code>刁其玉    49李俊     26张杰     25王静     25王磊     24Name: 0, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keyword=list_split(NKYWX[<span class="string">&#x27;Keyword&#x27;</span>].dropna(axis=<span class="number">0</span>,how=<span class="string">&#x27;all&#x27;</span>).tolist(),<span class="string">&#x27;;;&#x27;</span>)</span><br><span class="line">keyword1=<span class="built_in">sum</span>(keyword,[])</span><br><span class="line">pd.DataFrame(keyword1)[<span class="number">0</span>].value_counts()[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><pre><code>产量    92棉花    85玉米    56品质    55小麦    47Name: 0, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NKYWX.Source.value_counts()[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><pre><code>动物营养学报      116中国农业科学      112中国预防兽医学报     77中国畜牧兽医       76世界农业         74Name: Source, dtype: int64</code></pre><h1 id="第8章-社会网络分析方法"><a href="#第8章-社会网络分析方法" class="headerlink" title="第8章 社会网络分析方法"></a>第8章 社会网络分析方法</h1><h2 id="社会网络的初步印象"><a href="#社会网络的初步印象" class="headerlink" title="社会网络的初步印象"></a>社会网络的初步印象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 社会网络分析概念</span></span><br><span class="line"><span class="comment">### 社会网络分析库</span></span><br><span class="line"><span class="comment">## 社会网络图的构建</span></span><br><span class="line"><span class="comment">### 社会网络数据形式</span></span><br><span class="line"><span class="comment">#### 以连线的形式构建网络</span></span><br><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line">nG=nx.Graph();nG</span><br><span class="line">nG.add_node(<span class="string">&#x27;JFK&#x27;</span>)</span><br><span class="line">nG.add_nodes_from([<span class="string">&#x27;SFO&#x27;</span>,<span class="string">&#x27;LAX&#x27;</span>,<span class="string">&#x27;ATL&#x27;</span>,<span class="string">&#x27;FLO&#x27;</span>,<span class="string">&#x27;DFW&#x27;</span>,<span class="string">&#x27;HNL&#x27;</span>])</span><br><span class="line">nG.number_of_nodes()</span><br></pre></td></tr></table></figure><pre><code>&lt;networkx.classes.graph.Graph at 0x12650e80&gt;7</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nG.add_edges_from([(<span class="string">&#x27;JFK&#x27;</span>, <span class="string">&#x27;SFO&#x27;</span>), (<span class="string">&#x27;JFK&#x27;</span>, <span class="string">&#x27;LAX&#x27;</span>), (<span class="string">&#x27;LAX&#x27;</span>, <span class="string">&#x27;ATL&#x27;</span>),(<span class="string">&#x27;FLO&#x27;</span>,<span class="string">&#x27;ATL&#x27;</span>),(<span class="string">&#x27;ATL&#x27;</span>,<span class="string">&#x27;JFK&#x27;</span>),(<span class="string">&#x27;FLO&#x27;</span>,<span class="string">&#x27;JFK&#x27;</span>),(<span class="string">&#x27;DFW&#x27;</span>,<span class="string">&#x27;HNL&#x27;</span>)])</span><br><span class="line">nG.add_edges_from([(<span class="string">&#x27;OKC&#x27;</span>,<span class="string">&#x27;DFW&#x27;</span>),(<span class="string">&#x27;OGG&#x27;</span>,<span class="string">&#x27;DFW&#x27;</span>),(<span class="string">&#x27;OGG&#x27;</span>,<span class="string">&#x27;LAX&#x27;</span>)])</span><br><span class="line">nG.number_of_edges()</span><br></pre></td></tr></table></figure><pre><code>10</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nG.nodes()</span><br><span class="line">nG.edges()</span><br><span class="line"></span><br><span class="line">nx.draw(nG, with_labels=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>NodeView((&#39;JFK&#39;, &#39;SFO&#39;, &#39;LAX&#39;, &#39;ATL&#39;, &#39;FLO&#39;, &#39;DFW&#39;, &#39;HNL&#39;, &#39;OKC&#39;, &#39;OGG&#39;))EdgeView([(&#39;JFK&#39;, &#39;SFO&#39;), (&#39;JFK&#39;, &#39;LAX&#39;), (&#39;JFK&#39;, &#39;ATL&#39;), (&#39;JFK&#39;, &#39;FLO&#39;), (&#39;LAX&#39;, &#39;ATL&#39;), (&#39;LAX&#39;, &#39;OGG&#39;), (&#39;ATL&#39;, &#39;FLO&#39;), (&#39;DFW&#39;, &#39;HNL&#39;), (&#39;DFW&#39;, &#39;OKC&#39;), (&#39;DFW&#39;, &#39;OGG&#39;)])</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442016.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># #### 以矩阵的形式构建网络</span></span><br><span class="line">NXdata=pd.read_excel(<span class="string">&#x27;PyDm_data.xlsx&#x27;</span>,<span class="string">&#x27;NXdata&#x27;</span>,index_col=<span class="number">0</span>)</span><br><span class="line">NXdata</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>JFK</th>      <th>SFO</th>      <th>LAX</th>      <th>ATL</th>      <th>FLO</th>      <th>DFW</th>      <th>HNL</th>      <th>OKC</th>      <th>OGG</th>    </tr>  </thead>  <tbody>    <tr>      <th>JFK</th>      <td>0</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>SFO</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>LAX</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>ATL</th>      <td>1</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>FLO</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>DFW</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>HNL</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>OKC</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>OGG</th>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nf=nx.from_pandas_adjacency(NXdata)</span><br><span class="line">nx.draw(nf,with_labels=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101443674.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># #### 社会网络图的布局</span></span><br><span class="line">nx.draw(nG,pos=nx.circular_layout(nG), with_labels=<span class="literal">True</span>)</span><br><span class="line">nx.draw(nG,pos=nx.kamada_kawai_layout(nG), with_labels=<span class="literal">True</span>)</span><br><span class="line">nx.draw(nG,pos=nx.random_layout(nG), with_labels=<span class="literal">True</span>)</span><br><span class="line">nx.draw(nG,pos=nx.spectral_layout(nG), with_labels=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442141.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 网络统计量</span></span><br><span class="line"><span class="comment">#### 网络汇总描述</span></span><br><span class="line">nx.info(nG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># #### 密度</span></span><br><span class="line">nx.density(nG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># #### 直径</span></span><br><span class="line">nx.diameter(nG)</span><br></pre></td></tr></table></figure><pre><code>&#39;Graph with 9 nodes and 10 edges&#39;0.27777777777777785</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 聚类系数与相邻节点</span></span><br><span class="line">nx.transitivity(nG)</span><br><span class="line">nx.clustering(nG)</span><br><span class="line"><span class="built_in">list</span>(nG.neighbors(<span class="string">&#x27;ATL&#x27;</span>))</span><br></pre></td></tr></table></figure><pre><code>0.35294117647058826&#123;&#39;JFK&#39;: 0.3333333333333333, &#39;SFO&#39;: 0, &#39;LAX&#39;: 0.3333333333333333, &#39;ATL&#39;: 0.6666666666666666, &#39;FLO&#39;: 1.0, &#39;DFW&#39;: 0, &#39;HNL&#39;: 0, &#39;OKC&#39;: 0, &#39;OGG&#39;: 0&#125;[&#39;LAX&#39;, &#39;FLO&#39;, &#39;JFK&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># #### 中心性</span></span><br><span class="line">nx.degree_centrality(nG)</span><br><span class="line">nx.betweenness_centrality(nG)</span><br><span class="line">nx.closeness_centrality(nG)</span><br></pre></td></tr></table></figure><pre><code>&#123;&#39;JFK&#39;: 0.5, &#39;SFO&#39;: 0.125, &#39;LAX&#39;: 0.375, &#39;ATL&#39;: 0.375, &#39;FLO&#39;: 0.25, &#39;DFW&#39;: 0.375, &#39;HNL&#39;: 0.125, &#39;OKC&#39;: 0.125, &#39;OGG&#39;: 0.25&#125;&#123;&#39;JFK&#39;: 0.33928571428571425, &#39;SFO&#39;: 0.0, &#39;LAX&#39;: 0.5714285714285714, &#39;ATL&#39;: 0.08928571428571427, &#39;FLO&#39;: 0.0, &#39;DFW&#39;: 0.46428571428571425, &#39;HNL&#39;: 0.0, &#39;OKC&#39;: 0.0, &#39;OGG&#39;: 0.5357142857142857&#125;&#123;&#39;JFK&#39;: 0.47058823529411764, &#39;SFO&#39;: 0.3333333333333333, &#39;LAX&#39;: 0.5333333333333333, &#39;ATL&#39;: 0.4444444444444444, &#39;FLO&#39;: 0.34782608695652173, &#39;DFW&#39;: 0.42105263157894735, &#39;HNL&#39;: 0.3076923076923077, &#39;OKC&#39;: 0.3076923076923077, &#39;OGG&#39;: 0.5&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># #### 最短路径</span></span><br><span class="line"><span class="built_in">len</span>(nx.shortest_path(nG,<span class="string">&#x27;ATL&#x27;</span>,<span class="string">&#x27;SFO&#x27;</span>))</span><br></pre></td></tr></table></figure><pre><code>3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 知识图谱应用</span></span><br><span class="line"><span class="comment"># #### 图谱共现矩阵</span></span><br><span class="line"><span class="comment"># #### 共显矩阵网络图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">occurence</span>(<span class="params">data,document</span>):</span>  <span class="comment">#生成共现矩阵</span></span><br><span class="line">    empty1=[];empty2=[];empty3=[]</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> document:</span><br><span class="line">                <span class="keyword">if</span>  [a <span class="keyword">in</span> i <span class="keyword">for</span> i <span class="keyword">in</span> x].count(<span class="literal">True</span>) &gt;<span class="number">0</span> <span class="keyword">and</span> [b <span class="keyword">in</span> i <span class="keyword">for</span> i <span class="keyword">in</span> x].count(<span class="literal">True</span>) &gt;<span class="number">0</span>:</span><br><span class="line">                        count += <span class="number">1</span></span><br><span class="line">            empty1.append(a);empty2.append(b);empty3.append(count)</span><br><span class="line">    df=pd.DataFrame(&#123;<span class="string">&#x27;from&#x27;</span>:empty1,<span class="string">&#x27;to&#x27;</span>:empty2,<span class="string">&#x27;weight&#x27;</span>:empty3&#125;)</span><br><span class="line">    G=nx.from_pandas_edgelist(df, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;to&#x27;</span>, <span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> (nx.to_pandas_adjacency(G, dtype=<span class="built_in">int</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">##提取上章文献数据的高频数据</span></span><br><span class="line">organ=list_split(WXdata[<span class="string">&#x27;Organ&#x27;</span>],<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">data1=pd.DataFrame([[i,search_university(organ,i)] <span class="keyword">for</span> i <span class="keyword">in</span> university[<span class="string">&#x27;学校名称&#x27;</span>]])</span><br><span class="line">data1.rename(columns=&#123;<span class="number">0</span>:<span class="string">&#x27;学校名称&#x27;</span>,<span class="number">1</span>:<span class="string">&#x27;频数&#x27;</span>&#125;,inplace=<span class="literal">True</span>)</span><br><span class="line">keyword=list_split(WXdata[<span class="string">&#x27;Keyword&#x27;</span>].dropna(axis=<span class="number">0</span>,how=<span class="string">&#x27;all&#x27;</span>).tolist(),<span class="string">&#x27;;;&#x27;</span>)</span><br><span class="line">keyword1=<span class="built_in">sum</span>(keyword,[])</span><br><span class="line">author=list_replace(WXdata[<span class="string">&#x27;Author&#x27;</span>].dropna(axis=<span class="number">0</span>,how=<span class="string">&#x27;all&#x27;</span>).tolist(),<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">author1=list_split(author,<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">author2=<span class="built_in">sum</span>(author1,[])</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取前30名的高频数据</span></span><br><span class="line">data_author=pd.DataFrame(author2)[<span class="number">0</span>].value_counts()[:<span class="number">30</span>].index.tolist();data_author</span><br><span class="line">data_keyword=pd.DataFrame(keyword1)[<span class="number">0</span>].value_counts()[<span class="number">0</span>:<span class="number">30</span>].index.tolist();data_keyword</span><br><span class="line">data_university=data1.sort_values(by=<span class="string">&#x27;频数&#x27;</span>,ascending = <span class="literal">False</span>)[<span class="number">0</span>:<span class="number">30</span>][<span class="string">&#x27;学校名称&#x27;</span>].tolist()</span><br></pre></td></tr></table></figure><pre><code>[&#39;鲍国海&#39;, &#39;邱均平&#39;, &#39;黄鲁成&#39;, &#39;姜春林&#39;, &#39;兰月新&#39;, &#39;张志强&#39;, &#39;刘云&#39;, &#39;冯瑶&#39;, &#39;任增元&#39;, &#39;沈君&#39;, &#39;蔡文伯&#39;, &#39;朱庆华&#39;, &#39;刘娅&#39;, &#39;俞立平&#39;, &#39;肖仙桃&#39;, &#39;王曰芬&#39;, &#39;魏瑞斌&#39;, &#39;李欣&#39;, &#39;武夷山&#39;, &#39;王晴&#39;, &#39;孙玉伟&#39;, &#39;吴小节&#39;, &#39;李昊青&#39;, &#39;刘则渊&#39;, &#39;化柏林&#39;, &#39;王超&#39;, &#39;董琳&#39;, &#39;黄英君&#39;, &#39;仉晓红&#39;, &#39;王国华&#39;][&#39;文献计量&#39;, &#39;文献计量分析&#39;, &#39;文献计量学&#39;, &#39;知识图谱&#39;, &#39;统计分析&#39;, &#39;计量分析&#39;, &#39;研究热点&#39;, &#39;共词分析&#39;, &#39;CNKI&#39;, &#39;可视化&#39;, &#39;研究进展&#39;, &#39;社会网络分析&#39;, &#39;文献计量法&#39;, &#39;图书馆&#39;, &#39;CSSCI&#39;, &#39;引文分析&#39;, &#39;内容分析&#39;, &#39;聚类分析&#39;, &#39;文献计量指标&#39;, &#39;Web of Science&#39;, &#39;中国&#39;, &#39;CiteSpace&#39;, &#39;研究现状&#39;, &#39;综述&#39;, &#39;SCI&#39;, &#39;开放存取&#39;, &#39;文献&#39;, &#39;研究前沿&#39;, &#39;大数据&#39;, &#39;科技期刊&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Matrix1=occurence(data_author,author1);Matrix1</span><br><span class="line">Matrix2=occurence(data_university,organ)</span><br><span class="line">Matrix3=occurence(data_keyword,keyword)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>鲍国海</th>      <th>邱均平</th>      <th>黄鲁成</th>      <th>姜春林</th>      <th>兰月新</th>      <th>张志强</th>      <th>刘云</th>      <th>冯瑶</th>      <th>任增元</th>      <th>沈君</th>      <th>...</th>      <th>孙玉伟</th>      <th>吴小节</th>      <th>李昊青</th>      <th>刘则渊</th>      <th>化柏林</th>      <th>王超</th>      <th>董琳</th>      <th>黄英君</th>      <th>仉晓红</th>      <th>王国华</th>    </tr>  </thead>  <tbody>    <tr>      <th>鲍国海</th>      <td>11</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>邱均平</th>      <td>0</td>      <td>10</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>黄鲁成</th>      <td>0</td>      <td>0</td>      <td>8</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>姜春林</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>8</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>兰月新</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>8</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>张志强</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>6</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>刘云</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>5</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>冯瑶</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>5</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>任增元</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>5</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>沈君</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>5</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>蔡文伯</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>朱庆华</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>刘娅</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>俞立平</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>肖仙桃</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>王曰芬</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>魏瑞斌</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>李欣</th>      <td>0</td>      <td>0</td>      <td>4</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>武夷山</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>王晴</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>孙玉伟</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>4</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>吴小节</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>4</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>李昊青</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>4</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>刘则渊</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>4</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>化柏林</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>4</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>王超</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>4</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>董琳</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>4</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>黄英君</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>4</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>仉晓红</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>4</td>      <td>0</td>    </tr>    <tr>      <th>王国华</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>3</td>    </tr>  </tbody></table><p>30 rows × 30 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line">graph1=nx.from_pandas_adjacency(Matrix1)</span><br><span class="line">nx.draw(graph1,with_labels=<span class="literal">True</span>,node_color=<span class="string">&#x27;yellow&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442329.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph2=nx.from_pandas_adjacency(Matrix2)</span><br><span class="line">nx.draw(graph2,with_labels=<span class="literal">True</span>,node_color=<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">graph3=nx.from_pandas_adjacency(Matrix3)</span><br><span class="line">nx.draw(graph3,with_labels=<span class="literal">True</span>,node_color=<span class="string">&#x27;yellow&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101442352.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.cluster.hierarchy <span class="keyword">as</span> sch</span><br><span class="line">H1=sch.linkage(Matrix3,method=<span class="string">&#x27;ward&#x27;</span>);</span><br><span class="line">sch.dendrogram(H1,labels=Matrix3.index,orientation=<span class="string">&#x27;right&#x27;</span>);</span><br><span class="line"><span class="comment">## Load R dataset</span></span><br><span class="line"><span class="comment">#import statsmodels.api as sm</span></span><br><span class="line"><span class="comment">#sm.datasets.get_rdataset(&quot;datasets&quot;, &quot;USJudgeRatings&quot;).data</span></span><br><span class="line"><span class="comment">#sm.datasets.get_rdataset(&quot;cluster.datasets&quot;, &quot;all.us.city.crime.1970&quot;).data</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112101443081.png" alt="png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python数据挖掘方法与应用&quot;&gt;&lt;a href=&quot;#Python数据挖掘方法与应用&quot; class=&quot;headerlink&quot; title=&quot;Python数据挖掘方法与应用&quot;&gt;&lt;/a&gt;Python数据挖掘方法与应用&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://rs</summary>
      
    
    
    
    <category term="Python数据挖掘方法与应用" scheme="https://zhangkh.top/categories/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%96%B9%E6%B3%95%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="Python数据挖掘方法与应用" scheme="https://zhangkh.top/tags/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%96%B9%E6%B3%95%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>第10章-数据的在线分析</title>
    <link href="https://zhangkh.top/f49b880f.html"/>
    <id>https://zhangkh.top/f49b880f.html</id>
    <published>2021-12-07T08:20:11.000Z</published>
    <updated>2021-12-07T09:05:29.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第10章-数据在线分析及可视化"><a href="#第10章-数据在线分析及可视化" class="headerlink" title="第10章 数据在线分析及可视化"></a>第10章 数据在线分析及可视化</h1><h2 id="10-1-Tushare数据的可视化分析"><a href="#10-1-Tushare数据的可视化分析" class="headerlink" title="10.1 Tushare数据的可视化分析"></a>10.1 Tushare数据的可视化分析</h2><h3 id="10-1-1-股市基本数据的获取与分析"><a href="#10-1-1-股市基本数据的获取与分析" class="headerlink" title="10.1.1 股市基本数据的获取与分析"></a>10.1.1 股市基本数据的获取与分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!pip install tushare --upgrade</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#import tushare as ts    #调用 tushare 包</span></span><br></pre></td></tr></table></figure><p>10.1.1.1 上市公司的基本信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#s_b=ts.get_stock_basics()</span></span><br><span class="line"><span class="comment">#s_b=ts.get_stock_basics(); #在线获取股票信息，每次读取数据可能不一样</span></span><br><span class="line"><span class="comment">#s_b.info(); #sb</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd        <span class="comment">#读取已保存的本地股票信息</span></span><br><span class="line">s_b=pd.read_excel(<span class="string">&#x27;./data/tushare.xlsx&#x27;</span>,<span class="string">&#x27;stock_basics&#x27;</span>,index_col=<span class="number">0</span>); </span><br><span class="line">s_b.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;Int64Index: 3951 entries, 688586 to 688519Data columns (total 22 columns): #   Column            Non-Null Count  Dtype  ---  ------            --------------  -----   0   name              3951 non-null   object  1   industry          3947 non-null   object  2   area              3947 non-null   object  3   pe                3951 non-null   float64 4   outstanding       3951 non-null   float64 5   totals            3951 non-null   float64 6   totalAssets       3951 non-null   float64 7   liquidAssets      3951 non-null   float64 8   fixedAssets       3951 non-null   float64 9   reserved          3951 non-null   float64 10  reservedPerShare  3951 non-null   float64 11  esp               3951 non-null   float64 12  bvps              3951 non-null   float64 13  pb                3951 non-null   float64 14  timeToMarket      3951 non-null   int64   15  undp              3951 non-null   float64 16  perundp           3951 non-null   float64 17  rev               3951 non-null   float64 18  profit            3951 non-null   float64 19  gpr               3951 non-null   float64 20  npr               3951 non-null   float64 21  holders           3951 non-null   int64  dtypes: float64(17), int64(2), object(3)memory usage: 709.9+ KB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s_b<span class="comment">#.iloc[:6,:9]  #显示前6行7列数据</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>industry</th>      <th>area</th>      <th>pe</th>      <th>outstanding</th>      <th>totals</th>      <th>totalAssets</th>      <th>liquidAssets</th>      <th>fixedAssets</th>      <th>reserved</th>      <th>...</th>      <th>bvps</th>      <th>pb</th>      <th>timeToMarket</th>      <th>undp</th>      <th>perundp</th>      <th>rev</th>      <th>profit</th>      <th>gpr</th>      <th>npr</th>      <th>holders</th>    </tr>    <tr>      <th>code</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>688586</th>      <td>N江航</td>      <td>航空</td>      <td>安徽</td>      <td>77.57</td>      <td>0.88</td>      <td>4.04</td>      <td>18.43</td>      <td>11.58</td>      <td>5.23</td>      <td>3.91</td>      <td>...</td>      <td>4.59</td>      <td>8.80</td>      <td>20200731</td>      <td>1.83</td>      <td>0.45</td>      <td>0.00</td>      <td>0.00</td>      <td>46.08</td>      <td>29.69</td>      <td>59169</td>    </tr>    <tr>      <th>688311</th>      <td>N盟升</td>      <td>元器件</td>      <td>四川</td>      <td>238.24</td>      <td>0.26</td>      <td>1.15</td>      <td>8.70</td>      <td>5.51</td>      <td>0.56</td>      <td>3.20</td>      <td>...</td>      <td>14.02</td>      <td>9.75</td>      <td>20200731</td>      <td>1.39</td>      <td>1.21</td>      <td>0.00</td>      <td>0.00</td>      <td>72.47</td>      <td>27.74</td>      <td>26472</td>    </tr>    <tr>      <th>605222</th>      <td>N起帆</td>      <td>电气设备</td>      <td>上海</td>      <td>35.53</td>      <td>0.50</td>      <td>4.01</td>      <td>47.26</td>      <td>39.48</td>      <td>5.80</td>      <td>2.81</td>      <td>...</td>      <td>6.38</td>      <td>4.16</td>      <td>20200731</td>      <td>9.74</td>      <td>2.43</td>      <td>0.00</td>      <td>0.00</td>      <td>10.08</td>      <td>4.23</td>      <td>52755</td>    </tr>    <tr>      <th>601456</th>      <td>N国联</td>      <td>证券</td>      <td>江苏</td>      <td>15.87</td>      <td>4.76</td>      <td>23.78</td>      <td>374.70</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>...</td>      <td>4.30</td>      <td>1.42</td>      <td>20200731</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>46.32</td>      <td>416247</td>    </tr>    <tr>      <th>2991</th>      <td>N甘源</td>      <td>食品</td>      <td>江西</td>      <td>35.54</td>      <td>0.23</td>      <td>0.93</td>      <td>8.18</td>      <td>3.82</td>      <td>2.75</td>      <td>1.45</td>      <td>...</td>      <td>14.78</td>      <td>3.78</td>      <td>20200731</td>      <td>2.84</td>      <td>3.05</td>      <td>0.00</td>      <td>0.00</td>      <td>39.32</td>      <td>15.04</td>      <td>49829</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>688335</th>      <td>复洁环保</td>      <td>环境保护</td>      <td>上海</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>4.05</td>      <td>3.71</td>      <td>0.10</td>      <td>0.83</td>      <td>...</td>      <td>0.00</td>      <td>0.00</td>      <td>0</td>      <td>1.04</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>34.42</td>      <td>6.97</td>      <td>0</td>    </tr>    <tr>      <th>688338</th>      <td>赛科希德</td>      <td>生物制药</td>      <td>北京</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>4.27</td>      <td>3.82</td>      <td>0.39</td>      <td>1.32</td>      <td>...</td>      <td>0.00</td>      <td>0.00</td>      <td>0</td>      <td>1.62</td>      <td>0.00</td>      <td>14.73</td>      <td>25.26</td>      <td>59.41</td>      <td>30.95</td>      <td>0</td>    </tr>    <tr>      <th>688339</th>      <td>亿华通</td>      <td>电气设备</td>      <td>北京</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>16.83</td>      <td>11.81</td>      <td>1.81</td>      <td>8.85</td>      <td>...</td>      <td>0.00</td>      <td>0.00</td>      <td>0</td>      <td>1.09</td>      <td>0.00</td>      <td>50.25</td>      <td>176.50</td>      <td>45.12</td>      <td>11.55</td>      <td>0</td>    </tr>    <tr>      <th>688379</th>      <td>华光新材</td>      <td>小金属</td>      <td>浙江</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>7.29</td>      <td>5.24</td>      <td>1.52</td>      <td>1.08</td>      <td>...</td>      <td>0.00</td>      <td>0.00</td>      <td>0</td>      <td>3.07</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>15.68</td>      <td>5.17</td>      <td>0</td>    </tr>    <tr>      <th>688519</th>      <td>南亚新材</td>      <td>元器件</td>      <td>上海</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>19.09</td>      <td>13.46</td>      <td>4.63</td>      <td>2.00</td>      <td>...</td>      <td>0.00</td>      <td>0.00</td>      <td>0</td>      <td>2.96</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>15.99</td>      <td>7.28</td>      <td>0</td>    </tr>  </tbody></table><p>3951 rows × 22 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#s_b.to_csv(&#x27;stock_basics.csv&#x27;)                   #保存数据到csv表格中</span></span><br><span class="line"><span class="comment">#s_b=pd.read_csv(&#x27;stock_basics.csv&#x27;,index_col=0) #从csv文档中读取数据</span></span><br></pre></td></tr></table></figure><p>10.1.1.2 股市基本数据的分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s_b_c=s_b.industry.value_counts(); s_b_c</span><br></pre></td></tr></table></figure><pre><code>软件服务    215元器件     196电气设备    186化工原料    175专用机械    151       ... 铁路        5林业        4机场        4商品城       3电器连锁      2Name: industry, Length: 110, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame <span class="keyword">as</span> DF  <span class="comment">#设置结果以数据框形式输出</span></span><br><span class="line">DF(s_b_c)   <span class="comment">#pd.DataFrame(s_b_c)  </span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>industry</th>    </tr>  </thead>  <tbody>    <tr>      <th>软件服务</th>      <td>215</td>    </tr>    <tr>      <th>元器件</th>      <td>196</td>    </tr>    <tr>      <th>电气设备</th>      <td>186</td>    </tr>    <tr>      <th>化工原料</th>      <td>175</td>    </tr>    <tr>      <th>专用机械</th>      <td>151</td>    </tr>    <tr>      <th>...</th>      <td>...</td>    </tr>    <tr>      <th>铁路</th>      <td>5</td>    </tr>    <tr>      <th>林业</th>      <td>4</td>    </tr>    <tr>      <th>机场</th>      <td>4</td>    </tr>    <tr>      <th>商品城</th>      <td>3</td>    </tr>    <tr>      <th>电器连锁</th>      <td>2</td>    </tr>  </tbody></table><p>110 rows × 1 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%config InlineBackend.figure_format=<span class="string">&#x27;retina&#x27;</span> <span class="comment">#提高图形显示的清晰度</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt            </span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>];  <span class="comment">#中文字为黑体</span></span><br><span class="line">s_b_c[:<span class="number">10</span>].plot(kind=<span class="string">&#x27;barh&#x27;</span>);                <span class="comment">#前10个行业水平条图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071621461.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按行业(industry)计算平均收益率(esp)并排序</span></span><br><span class="line">i_e=s_b.groupby([<span class="string">&#x27;industry&#x27;</span>])[<span class="string">&#x27;esp&#x27;</span>].mean().sort_values();</span><br><span class="line">DF(i_e)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>esp</th>    </tr>    <tr>      <th>industry</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>空运</th>      <td>-0.243875</td>    </tr>    <tr>      <th>旅游服务</th>      <td>-0.129538</td>    </tr>    <tr>      <th>公路</th>      <td>-0.111286</td>    </tr>    <tr>      <th>旅游景点</th>      <td>-0.101167</td>    </tr>    <tr>      <th>酒店餐饮</th>      <td>-0.090100</td>    </tr>    <tr>      <th>...</th>      <td>...</td>    </tr>    <tr>      <th>饲料</th>      <td>0.249765</td>    </tr>    <tr>      <th>银行</th>      <td>0.324250</td>    </tr>    <tr>      <th>船舶</th>      <td>0.331857</td>    </tr>    <tr>      <th>保险</th>      <td>0.695143</td>    </tr>    <tr>      <th>白酒</th>      <td>1.517105</td>    </tr>  </tbody></table><p>110 rows × 1 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DF(i_e.head(<span class="number">10</span>))  <span class="comment">#收益率最差的10个行业</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>esp</th>    </tr>    <tr>      <th>industry</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>空运</th>      <td>-0.243875</td>    </tr>    <tr>      <th>旅游服务</th>      <td>-0.129538</td>    </tr>    <tr>      <th>公路</th>      <td>-0.111286</td>    </tr>    <tr>      <th>旅游景点</th>      <td>-0.101167</td>    </tr>    <tr>      <th>酒店餐饮</th>      <td>-0.090100</td>    </tr>    <tr>      <th>石油加工</th>      <td>-0.085556</td>    </tr>    <tr>      <th>公共交通</th>      <td>-0.060375</td>    </tr>    <tr>      <th>林业</th>      <td>-0.045250</td>    </tr>    <tr>      <th>路桥</th>      <td>-0.039789</td>    </tr>    <tr>      <th>汽车整车</th>      <td>-0.025348</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span>;          <span class="comment">#正常显示图中负号</span></span><br><span class="line">i_e.head(<span class="number">10</span>).plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071621458.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DF(i_e.tail(<span class="number">10</span>))   <span class="comment">#收益率最好的10个行业</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>esp</th>    </tr>    <tr>      <th>industry</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>农药化肥</th>      <td>0.151171</td>    </tr>    <tr>      <th>园区开发</th>      <td>0.153625</td>    </tr>    <tr>      <th>食品</th>      <td>0.154523</td>    </tr>    <tr>      <th>医药商业</th>      <td>0.195538</td>    </tr>    <tr>      <th>农业综合</th>      <td>0.230633</td>    </tr>    <tr>      <th>饲料</th>      <td>0.249765</td>    </tr>    <tr>      <th>银行</th>      <td>0.324250</td>    </tr>    <tr>      <th>船舶</th>      <td>0.331857</td>    </tr>    <tr>      <th>保险</th>      <td>0.695143</td>    </tr>    <tr>      <th>白酒</th>      <td>1.517105</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i_e.tail(<span class="number">10</span>).plot(kind=<span class="string">&#x27;barh&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071621519.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按地区(area)和行业(industry)计算平均收益率(esp)并排序</span></span><br><span class="line">a_i_e=s_b.groupby([<span class="string">&#x27;area&#x27;</span>,<span class="string">&#x27;industry&#x27;</span>])[<span class="string">&#x27;esp&#x27;</span>].mean().sort_values();</span><br><span class="line">DF(a_i_e)  </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>esp</th>    </tr>    <tr>      <th>area</th>      <th>industry</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>江西</th>      <th>公共交通</th>      <td>-0.6700</td>    </tr>    <tr>      <th>新疆</th>      <th>服饰</th>      <td>-0.6300</td>    </tr>    <tr>      <th>湖北</th>      <th>旅游服务</th>      <td>-0.5660</td>    </tr>    <tr>      <th>辽宁</th>      <th>石油加工</th>      <td>-0.5550</td>    </tr>    <tr>      <th>湖南</th>      <th>小金属</th>      <td>-0.5270</td>    </tr>    <tr>      <th>...</th>      <th>...</th>      <td>...</td>    </tr>    <tr>      <th>山西</th>      <th>白酒</th>      <td>1.4100</td>    </tr>    <tr>      <th>深圳</th>      <th>保险</th>      <td>1.4700</td>    </tr>    <tr>      <th>江苏</th>      <th>白酒</th>      <td>1.5595</td>    </tr>    <tr>      <th>北京</th>      <th>家用电器</th>      <td>2.2600</td>    </tr>    <tr>      <th>贵州</th>      <th>白酒</th>      <td>17.9920</td>    </tr>  </tbody></table><p>1359 rows × 1 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GD_e1=DF(a_i_e[<span class="string">&#x27;广东&#x27;</span>].head(<span class="number">10</span>)); GD_e1  <span class="comment">#广东省收益率最差的10个行业</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>esp</th>    </tr>    <tr>      <th>industry</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>空运</th>      <td>-0.430000</td>    </tr>    <tr>      <th>家居用品</th>      <td>-0.145222</td>    </tr>    <tr>      <th>装修装饰</th>      <td>-0.109000</td>    </tr>    <tr>      <th>百货</th>      <td>-0.105000</td>    </tr>    <tr>      <th>酒店餐饮</th>      <td>-0.092000</td>    </tr>    <tr>      <th>玻璃</th>      <td>-0.087000</td>    </tr>    <tr>      <th>化纤</th>      <td>-0.082000</td>    </tr>    <tr>      <th>综合类</th>      <td>-0.067667</td>    </tr>    <tr>      <th>建筑工程</th>      <td>-0.065250</td>    </tr>    <tr>      <th>石油加工</th>      <td>-0.061000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GD_e2=DF(a_i_e[<span class="string">&#x27;广东&#x27;</span>].tail(<span class="number">10</span>)); GD_e2 <span class="comment">#广东省收益率最好的10个行业</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>esp</th>    </tr>    <tr>      <th>industry</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>农业综合</th>      <td>0.17450</td>    </tr>    <tr>      <th>火力发电</th>      <td>0.17575</td>    </tr>    <tr>      <th>化学制药</th>      <td>0.18720</td>    </tr>    <tr>      <th>水泥</th>      <td>0.27100</td>    </tr>    <tr>      <th>电信运营</th>      <td>0.32100</td>    </tr>    <tr>      <th>乳制品</th>      <td>0.38200</td>    </tr>    <tr>      <th>医药商业</th>      <td>0.42700</td>    </tr>    <tr>      <th>多元金融</th>      <td>0.64650</td>    </tr>    <tr>      <th>饲料</th>      <td>0.69900</td>    </tr>    <tr>      <th>船舶</th>      <td>1.13850</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GD_e12=pd.concat([GD_e1,GD_e2]); GD_e12  <span class="comment">#广东省收益率最差和最好的10个行业合并</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>esp</th>    </tr>    <tr>      <th>industry</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>空运</th>      <td>-0.430000</td>    </tr>    <tr>      <th>家居用品</th>      <td>-0.145222</td>    </tr>    <tr>      <th>装修装饰</th>      <td>-0.109000</td>    </tr>    <tr>      <th>百货</th>      <td>-0.105000</td>    </tr>    <tr>      <th>酒店餐饮</th>      <td>-0.092000</td>    </tr>    <tr>      <th>玻璃</th>      <td>-0.087000</td>    </tr>    <tr>      <th>化纤</th>      <td>-0.082000</td>    </tr>    <tr>      <th>综合类</th>      <td>-0.067667</td>    </tr>    <tr>      <th>建筑工程</th>      <td>-0.065250</td>    </tr>    <tr>      <th>石油加工</th>      <td>-0.061000</td>    </tr>    <tr>      <th>农业综合</th>      <td>0.174500</td>    </tr>    <tr>      <th>火力发电</th>      <td>0.175750</td>    </tr>    <tr>      <th>化学制药</th>      <td>0.187200</td>    </tr>    <tr>      <th>水泥</th>      <td>0.271000</td>    </tr>    <tr>      <th>电信运营</th>      <td>0.321000</td>    </tr>    <tr>      <th>乳制品</th>      <td>0.382000</td>    </tr>    <tr>      <th>医药商业</th>      <td>0.427000</td>    </tr>    <tr>      <th>多元金融</th>      <td>0.646500</td>    </tr>    <tr>      <th>饲料</th>      <td>0.699000</td>    </tr>    <tr>      <th>船舶</th>      <td>1.138500</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GD_e12.plot(kind=<span class="string">&#x27;bar&#x27;</span>).axhline(y=<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071620620.png" alt="png"></p><p>10.1.1.3 新股发行数据的分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#n_s=ts.new_stocks(); n_s.info()</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n_s=pd.read_excel(<span class="string">&#x27;./data/tushare.xlsx&#x27;</span>,<span class="string">&#x27;new_stocks&#x27;</span>,index_col=<span class="number">0</span>); n_s.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;Int64Index: 450 entries, 0 to 449Data columns (total 12 columns): #   Column      Non-Null Count  Dtype  ---  ------      --------------  -----   0   code        450 non-null    int64   1   xcode       450 non-null    int64   2   name        450 non-null    object  3   ipo_date    450 non-null    object  4   issue_date  407 non-null    object  5   amount      450 non-null    int64   6   markets     450 non-null    int64   7   price       450 non-null    float64 8   pe          450 non-null    float64 9   limit       450 non-null    float64 10  funds       450 non-null    float64 11  ballot      450 non-null    float64dtypes: float64(5), int64(4), object(3)memory usage: 45.7+ KB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n_s<span class="comment">#.iloc[:6,:7]  #显示前6行7列数据</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>code</th>      <th>xcode</th>      <th>name</th>      <th>ipo_date</th>      <th>issue_date</th>      <th>amount</th>      <th>markets</th>      <th>price</th>      <th>pe</th>      <th>limit</th>      <th>funds</th>      <th>ballot</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>605008</td>      <td>707008</td>      <td>长鸿高科</td>      <td>2020-08-12</td>      <td>NaN</td>      <td>4600</td>      <td>1380</td>      <td>0.00</td>      <td>0.00</td>      <td>1.30</td>      <td>4.848</td>      <td>0.00</td>    </tr>    <tr>      <th>1</th>      <td>300872</td>      <td>300872</td>      <td>天阳科技</td>      <td>2020-08-12</td>      <td>NaN</td>      <td>5620</td>      <td>1602</td>      <td>0.00</td>      <td>0.00</td>      <td>1.60</td>      <td>6.656</td>      <td>0.00</td>    </tr>    <tr>      <th>2</th>      <td>300873</td>      <td>300873</td>      <td>海晨股份</td>      <td>2020-08-12</td>      <td>NaN</td>      <td>3333</td>      <td>950</td>      <td>0.00</td>      <td>0.00</td>      <td>0.95</td>      <td>7.301</td>      <td>0.00</td>    </tr>    <tr>      <th>3</th>      <td>300876</td>      <td>300876</td>      <td>蒙泰高新</td>      <td>2020-08-12</td>      <td>NaN</td>      <td>2400</td>      <td>684</td>      <td>0.00</td>      <td>0.00</td>      <td>0.65</td>      <td>4.353</td>      <td>0.00</td>    </tr>    <tr>      <th>4</th>      <td>300871</td>      <td>300871</td>      <td>回盛生物</td>      <td>2020-08-11</td>      <td>NaN</td>      <td>2770</td>      <td>789</td>      <td>0.00</td>      <td>0.00</td>      <td>0.75</td>      <td>6.548</td>      <td>0.00</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>445</th>      <td>2935</td>      <td>2935</td>      <td>天奥电子</td>      <td>2018-08-23</td>      <td>2018-09-03</td>      <td>2667</td>      <td>2400</td>      <td>19.38</td>      <td>22.99</td>      <td>0.80</td>      <td>5.169</td>      <td>0.03</td>    </tr>    <tr>      <th>446</th>      <td>601068</td>      <td>780068</td>      <td>中铝国际</td>      <td>2018-08-21</td>      <td>2018-08-31</td>      <td>29591</td>      <td>26632</td>      <td>3.45</td>      <td>31.86</td>      <td>8.80</td>      <td>10.209</td>      <td>0.15</td>    </tr>    <tr>      <th>447</th>      <td>603192</td>      <td>732192</td>      <td>汇得科技</td>      <td>2018-08-16</td>      <td>2018-08-28</td>      <td>2667</td>      <td>2400</td>      <td>19.60</td>      <td>22.99</td>      <td>1.00</td>      <td>5.227</td>      <td>0.03</td>    </tr>    <tr>      <th>448</th>      <td>2933</td>      <td>2933</td>      <td>新兴装备</td>      <td>2018-08-15</td>      <td>2018-08-28</td>      <td>2935</td>      <td>2642</td>      <td>22.45</td>      <td>22.99</td>      <td>1.15</td>      <td>6.589</td>      <td>0.03</td>    </tr>    <tr>      <th>449</th>      <td>603590</td>      <td>732590</td>      <td>康辰药业</td>      <td>2018-08-14</td>      <td>2018-08-27</td>      <td>4000</td>      <td>3600</td>      <td>24.34</td>      <td>22.99</td>      <td>1.60</td>      <td>9.736</td>      <td>0.04</td>    </tr>  </tbody></table><p>450 rows × 12 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#n_s.to_csv(&#x27;new_stocks.csv&#x27;)                     #保存数据到csv表格中</span></span><br><span class="line"><span class="comment">#n_s=pd.read_csv(&#x27;new_stocks.csv&#x27;,index_col=0)   #从csv文件中读取数据</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n_s20=n_s.loc[n_s.ipo_date&gt;=<span class="string">&#x27;2020-01-01&#x27;</span>,]; n_s20.iloc[:,:<span class="number">7</span>]  <span class="comment">#2020年发行的新股</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>code</th>      <th>xcode</th>      <th>name</th>      <th>ipo_date</th>      <th>issue_date</th>      <th>amount</th>      <th>markets</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>605008</td>      <td>707008</td>      <td>长鸿高科</td>      <td>2020-08-12</td>      <td>NaN</td>      <td>4600</td>      <td>1380</td>    </tr>    <tr>      <th>1</th>      <td>300872</td>      <td>300872</td>      <td>天阳科技</td>      <td>2020-08-12</td>      <td>NaN</td>      <td>5620</td>      <td>1602</td>    </tr>    <tr>      <th>2</th>      <td>300873</td>      <td>300873</td>      <td>海晨股份</td>      <td>2020-08-12</td>      <td>NaN</td>      <td>3333</td>      <td>950</td>    </tr>    <tr>      <th>3</th>      <td>300876</td>      <td>300876</td>      <td>蒙泰高新</td>      <td>2020-08-12</td>      <td>NaN</td>      <td>2400</td>      <td>684</td>    </tr>    <tr>      <th>4</th>      <td>300871</td>      <td>300871</td>      <td>回盛生物</td>      <td>2020-08-11</td>      <td>NaN</td>      <td>2770</td>      <td>789</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>207</th>      <td>601816</td>      <td>780816</td>      <td>京沪高铁</td>      <td>2020-01-06</td>      <td>2020-01-16</td>      <td>628563</td>      <td>234379</td>    </tr>    <tr>      <th>208</th>      <td>300813</td>      <td>300813</td>      <td>泰林生物</td>      <td>2020-01-03</td>      <td>2020-01-14</td>      <td>1300</td>      <td>1300</td>    </tr>    <tr>      <th>209</th>      <td>2971</td>      <td>2971</td>      <td>和远气体</td>      <td>2020-01-02</td>      <td>2020-01-13</td>      <td>4000</td>      <td>3600</td>    </tr>    <tr>      <th>210</th>      <td>688178</td>      <td>787178</td>      <td>万德斯</td>      <td>2020-01-02</td>      <td>2020-01-14</td>      <td>2125</td>      <td>808</td>    </tr>    <tr>      <th>211</th>      <td>603551</td>      <td>732551</td>      <td>奥普家居</td>      <td>2020-01-02</td>      <td>2020-01-15</td>      <td>4001</td>      <td>3601</td>    </tr>  </tbody></table><p>212 rows × 7 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2020年发行量最大的10支新股</span></span><br><span class="line">n_s20.sort_values(by=<span class="string">&#x27;amount&#x27;</span>,ascending=<span class="literal">False</span>).iloc[:<span class="number">10</span>,:<span class="number">7</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>code</th>      <th>xcode</th>      <th>name</th>      <th>ipo_date</th>      <th>issue_date</th>      <th>amount</th>      <th>markets</th>    </tr>  </thead>  <tbody>    <tr>      <th>207</th>      <td>601816</td>      <td>780816</td>      <td>京沪高铁</td>      <td>2020-01-06</td>      <td>2020-01-16</td>      <td>628563</td>      <td>234379</td>    </tr>    <tr>      <th>74</th>      <td>688981</td>      <td>787981</td>      <td>中芯国际</td>      <td>2020-07-07</td>      <td>2020-07-16</td>      <td>193846</td>      <td>25284</td>    </tr>    <tr>      <th>121</th>      <td>600918</td>      <td>730918</td>      <td>中泰证券</td>      <td>2020-05-20</td>      <td>2020-06-03</td>      <td>69686</td>      <td>62718</td>    </tr>    <tr>      <th>152</th>      <td>688126</td>      <td>787126</td>      <td>沪硅产业</td>      <td>2020-04-09</td>      <td>2020-04-20</td>      <td>62007</td>      <td>13457</td>    </tr>    <tr>      <th>134</th>      <td>601778</td>      <td>780778</td>      <td>晶科科技</td>      <td>2020-05-06</td>      <td>2020-05-19</td>      <td>59459</td>      <td>53513</td>    </tr>    <tr>      <th>52</th>      <td>601456</td>      <td>780456</td>      <td>国联证券</td>      <td>2020-07-21</td>      <td>2020-07-31</td>      <td>47572</td>      <td>42815</td>    </tr>    <tr>      <th>120</th>      <td>601827</td>      <td>780827</td>      <td>三峰环境</td>      <td>2020-05-21</td>      <td>2020-06-05</td>      <td>37827</td>      <td>34044</td>    </tr>    <tr>      <th>181</th>      <td>688396</td>      <td>787396</td>      <td>华润微</td>      <td>2020-02-12</td>      <td>2020-02-27</td>      <td>33694</td>      <td>6153</td>    </tr>    <tr>      <th>21</th>      <td>688055</td>      <td>787055</td>      <td>龙腾光电</td>      <td>2020-08-06</td>      <td>NaN</td>      <td>33333</td>      <td>5667</td>    </tr>    <tr>      <th>113</th>      <td>688599</td>      <td>787599</td>      <td>天合光能</td>      <td>2020-05-29</td>      <td>2020-06-10</td>      <td>31020</td>      <td>8903</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2020年中签率最高的10支新股</span></span><br><span class="line">n_s20.sort_values(by=<span class="string">&#x27;ballot&#x27;</span>).iloc[-<span class="number">10</span>:,[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>]] </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>code</th>      <th>xcode</th>      <th>name</th>      <th>ipo_date</th>      <th>issue_date</th>      <th>amount</th>      <th>ballot</th>    </tr>  </thead>  <tbody>    <tr>      <th>152</th>      <td>688126</td>      <td>787126</td>      <td>沪硅产业</td>      <td>2020-04-09</td>      <td>2020-04-20</td>      <td>62007</td>      <td>0.10</td>    </tr>    <tr>      <th>174</th>      <td>300821</td>      <td>300821</td>      <td>东岳硅材</td>      <td>2020-03-03</td>      <td>2020-03-12</td>      <td>30000</td>      <td>0.11</td>    </tr>    <tr>      <th>150</th>      <td>601609</td>      <td>780609</td>      <td>金田铜业</td>      <td>2020-04-10</td>      <td>2020-04-22</td>      <td>24200</td>      <td>0.12</td>    </tr>    <tr>      <th>179</th>      <td>601696</td>      <td>780696</td>      <td>中银证券</td>      <td>2020-02-13</td>      <td>2020-02-26</td>      <td>27800</td>      <td>0.13</td>    </tr>    <tr>      <th>120</th>      <td>601827</td>      <td>780827</td>      <td>三峰环境</td>      <td>2020-05-21</td>      <td>2020-06-05</td>      <td>37827</td>      <td>0.15</td>    </tr>    <tr>      <th>52</th>      <td>601456</td>      <td>780456</td>      <td>国联证券</td>      <td>2020-07-21</td>      <td>2020-07-31</td>      <td>47572</td>      <td>0.15</td>    </tr>    <tr>      <th>74</th>      <td>688981</td>      <td>787981</td>      <td>中芯国际</td>      <td>2020-07-07</td>      <td>2020-07-16</td>      <td>193846</td>      <td>0.21</td>    </tr>    <tr>      <th>134</th>      <td>601778</td>      <td>780778</td>      <td>晶科科技</td>      <td>2020-05-06</td>      <td>2020-05-19</td>      <td>59459</td>      <td>0.22</td>    </tr>    <tr>      <th>121</th>      <td>600918</td>      <td>730918</td>      <td>中泰证券</td>      <td>2020-05-20</td>      <td>2020-06-03</td>      <td>69686</td>      <td>0.24</td>    </tr>    <tr>      <th>207</th>      <td>601816</td>      <td>780816</td>      <td>京沪高铁</td>      <td>2020-01-06</td>      <td>2020-01-16</td>      <td>628563</td>      <td>0.79</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(n_s20.amount, n_s20.ballot,<span class="string">&#x27;o&#x27;</span>); <span class="comment">#发行量和中签率之间的散点图 </span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071620623.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n_s20.amount.corr(n_s20.ballot) <span class="comment">#发行量和中签率之间的相关系数</span></span><br></pre></td></tr></table></figure><pre><code>0.9320352728928714</code></pre><h3 id="10-1-2-证券交易数据的获取与分析"><a href="#10-1-2-证券交易数据的获取与分析" class="headerlink" title="10.1.2 证券交易数据的获取与分析"></a>10.1.2 证券交易数据的获取与分析</h3><p>10.1.2.1 历史行情数据分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h_s=pd.read_excel(<span class="string">&#x27;data/tushare.xlsx&#x27;</span>,<span class="string">&#x27;hist_data&#x27;</span>,index_col=<span class="number">0</span>); h_s.info()</span><br><span class="line"><span class="comment">#h_s=ts.get_hist_data(&#x27;hs300&#x27;); h_s.info()  #在线获取沪深300指数数据</span></span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;Index: 605 entries, 2020-08-04 to 2018-02-05Data columns (total 13 columns): #   Column        Non-Null Count  Dtype  ---  ------        --------------  -----   0   open          605 non-null    float64 1   high          605 non-null    float64 2   close         605 non-null    float64 3   low           605 non-null    float64 4   volume        605 non-null    float64 5   price_change  605 non-null    float64 6   p_change      605 non-null    float64 7   ma5           605 non-null    float64 8   ma10          605 non-null    float64 9   ma20          605 non-null    float64 10  v_ma5         605 non-null    float64 11  v_ma10        605 non-null    float64 12  v_ma20        605 non-null    float64dtypes: float64(13)memory usage: 66.2+ KB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h_s<span class="comment">#.iloc[:6,:7]   #显示前6行7列数据</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>open</th>      <th>high</th>      <th>close</th>      <th>low</th>      <th>volume</th>      <th>price_change</th>      <th>p_change</th>      <th>ma5</th>      <th>ma10</th>      <th>ma20</th>      <th>v_ma5</th>      <th>v_ma10</th>      <th>v_ma20</th>    </tr>    <tr>      <th>date</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2020-08-04</th>      <td>4778.49</td>      <td>4807.08</td>      <td>4775.80</td>      <td>4747.77</td>      <td>2399749.75</td>      <td>4.49</td>      <td>0.09</td>      <td>4715.464</td>      <td>4660.651</td>      <td>4690.541</td>      <td>1986506.22</td>      <td>2029861.14</td>      <td>2437863.12</td>    </tr>    <tr>      <th>2020-08-03</th>      <td>4735.90</td>      <td>4771.37</td>      <td>4771.31</td>      <td>4720.03</td>      <td>2147762.50</td>      <td>76.26</td>      <td>1.62</td>      <td>4673.956</td>      <td>4652.175</td>      <td>4686.658</td>      <td>1832093.27</td>      <td>1990301.82</td>      <td>2520879.91</td>    </tr>    <tr>      <th>2020-07-31</th>      <td>4652.18</td>      <td>4741.81</td>      <td>4695.05</td>      <td>4621.96</td>      <td>1848390.25</td>      <td>38.90</td>      <td>0.83</td>      <td>4625.384</td>      <td>4643.074</td>      <td>4681.597</td>      <td>1745381.87</td>      <td>2021594.50</td>      <td>2616402.29</td>    </tr>    <tr>      <th>2020-07-30</th>      <td>4689.76</td>      <td>4704.63</td>      <td>4656.15</td>      <td>4649.77</td>      <td>1669675.62</td>      <td>-22.86</td>      <td>-0.49</td>      <td>4587.492</td>      <td>4628.039</td>      <td>4667.824</td>      <td>1863514.22</td>      <td>2044131.04</td>      <td>2669225.56</td>    </tr>    <tr>      <th>2020-07-29</th>      <td>4559.16</td>      <td>4680.56</td>      <td>4679.01</td>      <td>4548.85</td>      <td>1866953.00</td>      <td>110.75</td>      <td>2.42</td>      <td>4598.750</td>      <td>4614.049</td>      <td>4651.809</td>      <td>1998208.25</td>      <td>2161820.60</td>      <td>2712211.46</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2018-02-09</th>      <td>3896.17</td>      <td>3911.29</td>      <td>3840.65</td>      <td>3759.15</td>      <td>2063498.25</td>      <td>-171.40</td>      <td>-4.27</td>      <td>4065.248</td>      <td>4065.248</td>      <td>4065.248</td>      <td>1890011.10</td>      <td>1890011.10</td>      <td>1890011.10</td>    </tr>    <tr>      <th>2018-02-08</th>      <td>4022.88</td>      <td>4071.67</td>      <td>4012.05</td>      <td>3974.68</td>      <td>1592699.88</td>      <td>-38.45</td>      <td>-0.95</td>      <td>4121.398</td>      <td>4121.398</td>      <td>4121.398</td>      <td>1846639.32</td>      <td>1846639.32</td>      <td>1846639.32</td>    </tr>    <tr>      <th>2018-02-07</th>      <td>4205.74</td>      <td>4212.57</td>      <td>4050.50</td>      <td>4048.42</td>      <td>2031274.88</td>      <td>-98.39</td>      <td>-2.37</td>      <td>4157.847</td>      <td>4157.847</td>      <td>4157.847</td>      <td>1931285.79</td>      <td>1931285.79</td>      <td>1931285.79</td>    </tr>    <tr>      <th>2018-02-06</th>      <td>4182.33</td>      <td>4211.52</td>      <td>4148.89</td>      <td>4131.56</td>      <td>2149104.50</td>      <td>-125.26</td>      <td>-2.93</td>      <td>4211.520</td>      <td>4211.520</td>      <td>4211.520</td>      <td>1881291.25</td>      <td>1881291.25</td>      <td>1881291.25</td>    </tr>    <tr>      <th>2018-02-05</th>      <td>4204.46</td>      <td>4274.15</td>      <td>4274.15</td>      <td>4200.14</td>      <td>1613478.00</td>      <td>2.92</td>      <td>0.07</td>      <td>4274.150</td>      <td>4274.150</td>      <td>4274.150</td>      <td>1613478.00</td>      <td>1613478.00</td>      <td>1613478.00</td>    </tr>  </tbody></table><p>605 rows × 13 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h_s.sort_index(inplace=<span class="literal">True</span>); <span class="comment">#按时间重新排序 </span></span><br><span class="line">h_s<span class="comment">#.iloc[:6,:7]      #显示排序后数据的前6行7列</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>open</th>      <th>high</th>      <th>close</th>      <th>low</th>      <th>volume</th>      <th>price_change</th>      <th>p_change</th>      <th>ma5</th>      <th>ma10</th>      <th>ma20</th>      <th>v_ma5</th>      <th>v_ma10</th>      <th>v_ma20</th>    </tr>    <tr>      <th>date</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2018-02-05</th>      <td>4204.46</td>      <td>4274.15</td>      <td>4274.15</td>      <td>4200.14</td>      <td>1613478.00</td>      <td>2.92</td>      <td>0.07</td>      <td>4274.150</td>      <td>4274.150</td>      <td>4274.150</td>      <td>1613478.00</td>      <td>1613478.00</td>      <td>1613478.00</td>    </tr>    <tr>      <th>2018-02-06</th>      <td>4182.33</td>      <td>4211.52</td>      <td>4148.89</td>      <td>4131.56</td>      <td>2149104.50</td>      <td>-125.26</td>      <td>-2.93</td>      <td>4211.520</td>      <td>4211.520</td>      <td>4211.520</td>      <td>1881291.25</td>      <td>1881291.25</td>      <td>1881291.25</td>    </tr>    <tr>      <th>2018-02-07</th>      <td>4205.74</td>      <td>4212.57</td>      <td>4050.50</td>      <td>4048.42</td>      <td>2031274.88</td>      <td>-98.39</td>      <td>-2.37</td>      <td>4157.847</td>      <td>4157.847</td>      <td>4157.847</td>      <td>1931285.79</td>      <td>1931285.79</td>      <td>1931285.79</td>    </tr>    <tr>      <th>2018-02-08</th>      <td>4022.88</td>      <td>4071.67</td>      <td>4012.05</td>      <td>3974.68</td>      <td>1592699.88</td>      <td>-38.45</td>      <td>-0.95</td>      <td>4121.398</td>      <td>4121.398</td>      <td>4121.398</td>      <td>1846639.32</td>      <td>1846639.32</td>      <td>1846639.32</td>    </tr>    <tr>      <th>2018-02-09</th>      <td>3896.17</td>      <td>3911.29</td>      <td>3840.65</td>      <td>3759.15</td>      <td>2063498.25</td>      <td>-171.40</td>      <td>-4.27</td>      <td>4065.248</td>      <td>4065.248</td>      <td>4065.248</td>      <td>1890011.10</td>      <td>1890011.10</td>      <td>1890011.10</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2020-07-29</th>      <td>4559.16</td>      <td>4680.56</td>      <td>4679.01</td>      <td>4548.85</td>      <td>1866953.00</td>      <td>110.75</td>      <td>2.42</td>      <td>4598.750</td>      <td>4614.049</td>      <td>4651.809</td>      <td>1998208.25</td>      <td>2161820.60</td>      <td>2712211.46</td>    </tr>    <tr>      <th>2020-07-30</th>      <td>4689.76</td>      <td>4704.63</td>      <td>4656.15</td>      <td>4649.77</td>      <td>1669675.62</td>      <td>-22.86</td>      <td>-0.49</td>      <td>4587.492</td>      <td>4628.039</td>      <td>4667.824</td>      <td>1863514.22</td>      <td>2044131.04</td>      <td>2669225.56</td>    </tr>    <tr>      <th>2020-07-31</th>      <td>4652.18</td>      <td>4741.81</td>      <td>4695.05</td>      <td>4621.96</td>      <td>1848390.25</td>      <td>38.90</td>      <td>0.83</td>      <td>4625.384</td>      <td>4643.074</td>      <td>4681.597</td>      <td>1745381.87</td>      <td>2021594.50</td>      <td>2616402.29</td>    </tr>    <tr>      <th>2020-08-03</th>      <td>4735.90</td>      <td>4771.37</td>      <td>4771.31</td>      <td>4720.03</td>      <td>2147762.50</td>      <td>76.26</td>      <td>1.62</td>      <td>4673.956</td>      <td>4652.175</td>      <td>4686.658</td>      <td>1832093.27</td>      <td>1990301.82</td>      <td>2520879.91</td>    </tr>    <tr>      <th>2020-08-04</th>      <td>4778.49</td>      <td>4807.08</td>      <td>4775.80</td>      <td>4747.77</td>      <td>2399749.75</td>      <td>4.49</td>      <td>0.09</td>      <td>4715.464</td>      <td>4660.651</td>      <td>4690.541</td>      <td>1986506.22</td>      <td>2029861.14</td>      <td>2437863.12</td>    </tr>  </tbody></table><p>605 rows × 13 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h_s[<span class="string">&#x27;close&#x27;</span>].plot(figsize=(<span class="number">10</span>,<span class="number">6</span>));</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071621983.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h_s[<span class="string">&#x27;price_change&#x27;</span>].plot(figsize=(<span class="number">10</span>,<span class="number">6</span>)).axhline(y=<span class="number">0</span>,color=<span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071620495.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h_s[[<span class="string">&#x27;close&#x27;</span>,<span class="string">&#x27;ma5&#x27;</span>,<span class="string">&#x27;ma10&#x27;</span>,<span class="string">&#x27;ma20&#x27;</span>]].plot(figsize=(<span class="number">10</span>,<span class="number">6</span>));</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071620735.png" alt="png"></p><p>10.1.2.2 公司盈利能力分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取本地2020年第1季度的盈利能力数据  </span></span><br><span class="line"><span class="comment">#p_d=ts.get_profit_data(2020,1); p_d.info() #在线获取2020年第1季度的盈利能力数据</span></span><br><span class="line">p_d=pd.read_excel(<span class="string">&#x27;data/tushare.xlsx&#x27;</span>,<span class="string">&#x27;profit_data&#x27;</span>,index_col=<span class="number">0</span>); p_d.info()  </span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;Int64Index: 3920 entries, 0 to 3919Data columns (total 9 columns): #   Column             Non-Null Count  Dtype  ---  ------             --------------  -----   0   code               3920 non-null   int64   1   name               3920 non-null   object  2   roe                3881 non-null   float64 3   net_profit_ratio   3914 non-null   float64 4   gross_profit_rate  3888 non-null   float64 5   net_profits        3920 non-null   float64 6   eps                3664 non-null   float64 7   business_income    3919 non-null   float64 8   bips               3663 non-null   float64dtypes: float64(7), int64(1), object(1)memory usage: 306.2+ KB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p_d.columns=[<span class="string">&#x27;代码&#x27;</span>,<span class="string">&#x27;名称&#x27;</span>,<span class="string">&#x27;净收益率&#x27;</span>,<span class="string">&#x27;净利润率&#x27;</span>,<span class="string">&#x27;毛利润率&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;净利润额&#x27;</span>, <span class="string">&#x27;每股收益&#x27;</span>,<span class="string">&#x27;营业收入&#x27;</span>,<span class="string">&#x27;主营收入&#x27;</span>]</span><br><span class="line">p_d[<span class="string">&#x27;代码&#x27;</span>] = p_d[<span class="string">&#x27;代码&#x27;</span>].astype(<span class="built_in">str</span>) <span class="comment">#强制代码列为字符串</span></span><br><span class="line">p_d.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>代码</th>      <th>名称</th>      <th>净收益率</th>      <th>净利润率</th>      <th>毛利润率</th>      <th>净利润额</th>      <th>每股收益</th>      <th>营业收入</th>      <th>主营收入</th>    </tr>    <tr>      <th>0</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2260</td>      <td>*ST德奥</td>      <td>58.16</td>      <td>68.55</td>      <td>20.6704</td>      <td>33.7153</td>      <td>NaN</td>      <td>49.1790</td>      <td>NaN</td>    </tr>    <tr>      <th>1</th>      <td>2069</td>      <td>獐子岛</td>      <td>52.87</td>      <td>0.93</td>      <td>8.7116</td>      <td>3.7139</td>      <td>0.0052</td>      <td>398.4875</td>      <td>0.5603</td>    </tr>    <tr>      <th>2</th>      <td>600961</td>      <td>株冶集团</td>      <td>40.07</td>      <td>1.21</td>      <td>4.6506</td>      <td>41.7089</td>      <td>0.0790</td>      <td>3422.5768</td>      <td>6.4888</td>    </tr>    <tr>      <th>3</th>      <td>2605</td>      <td>姚记科技</td>      <td>33.05</td>      <td>124.13</td>      <td>67.3586</td>      <td>663.4285</td>      <td>1.6588</td>      <td>534.4203</td>      <td>1.3362</td>    </tr>    <tr>      <th>4</th>      <td>2437</td>      <td>誉衡药业</td>      <td>30.17</td>      <td>113.35</td>      <td>67.9203</td>      <td>658.6003</td>      <td>NaN</td>      <td>581.0199</td>      <td>NaN</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p_d.describe() <span class="comment">#基本统计分析</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>净收益率</th>      <th>净利润率</th>      <th>毛利润率</th>      <th>净利润额</th>      <th>每股收益</th>      <th>营业收入</th>      <th>主营收入</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>3881.000000</td>      <td>3914.000000</td>      <td>3888.000000</td>      <td>3920.000000</td>      <td>3664.000000</td>      <td>3919.000000</td>      <td>3663.000000</td>    </tr>    <tr>      <th>mean</th>      <td>-0.160925</td>      <td>-135.851091</td>      <td>27.095283</td>      <td>231.583835</td>      <td>0.071447</td>      <td>2737.076361</td>      <td>1.288017</td>    </tr>    <tr>      <th>std</th>      <td>24.390056</td>      <td>4323.334538</td>      <td>42.017779</td>      <td>2918.191181</td>      <td>0.270705</td>      <td>18093.421193</td>      <td>2.396955</td>    </tr>    <tr>      <th>min</th>      <td>-1304.670000</td>      <td>-183209.980000</td>      <td>-1588.817500</td>      <td>-19782.000000</td>      <td>-0.783000</td>      <td>0.000000</td>      <td>0.000000</td>    </tr>    <tr>      <th>25%</th>      <td>-0.590000</td>      <td>-4.027500</td>      <td>15.640475</td>      <td>-7.755225</td>      <td>-0.016900</td>      <td>127.088650</td>      <td>0.310550</td>    </tr>    <tr>      <th>50%</th>      <td>0.810000</td>      <td>3.970000</td>      <td>26.367100</td>      <td>14.218500</td>      <td>0.031800</td>      <td>333.993000</td>      <td>0.697500</td>    </tr>    <tr>      <th>75%</th>      <td>2.120000</td>      <td>12.267500</td>      <td>39.588375</td>      <td>63.354925</td>      <td>0.112125</td>      <td>1003.509400</td>      <td>1.386550</td>    </tr>    <tr>      <th>max</th>      <td>58.160000</td>      <td>858.670000</td>      <td>107.953300</td>      <td>84494.000000</td>      <td>10.423300</td>      <td>555502.000000</td>      <td>46.692000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p_d.corr()   <span class="comment">#相关性分析</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>净收益率</th>      <th>净利润率</th>      <th>毛利润率</th>      <th>净利润额</th>      <th>每股收益</th>      <th>营业收入</th>      <th>主营收入</th>    </tr>  </thead>  <tbody>    <tr>      <th>净收益率</th>      <td>1.000000</td>      <td>0.015184</td>      <td>0.063490</td>      <td>0.018065</td>      <td>0.220348</td>      <td>0.009420</td>      <td>0.079012</td>    </tr>    <tr>      <th>净利润率</th>      <td>0.015184</td>      <td>1.000000</td>      <td>0.006839</td>      <td>0.004677</td>      <td>0.046043</td>      <td>0.005054</td>      <td>0.017930</td>    </tr>    <tr>      <th>毛利润率</th>      <td>0.063490</td>      <td>0.006839</td>      <td>1.000000</td>      <td>0.034764</td>      <td>0.195615</td>      <td>-0.021009</td>      <td>-0.061525</td>    </tr>    <tr>      <th>净利润额</th>      <td>0.018065</td>      <td>0.004677</td>      <td>0.034764</td>      <td>1.000000</td>      <td>0.156741</td>      <td>0.419270</td>      <td>0.048213</td>    </tr>    <tr>      <th>每股收益</th>      <td>0.220348</td>      <td>0.046043</td>      <td>0.195615</td>      <td>0.156741</td>      <td>1.000000</td>      <td>0.091409</td>      <td>0.339545</td>    </tr>    <tr>      <th>营业收入</th>      <td>0.009420</td>      <td>0.005054</td>      <td>-0.021009</td>      <td>0.419270</td>      <td>0.091409</td>      <td>1.000000</td>      <td>0.242651</td>    </tr>    <tr>      <th>主营收入</th>      <td>0.079012</td>      <td>0.017930</td>      <td>-0.061525</td>      <td>0.048213</td>      <td>0.339545</td>      <td>0.242651</td>      <td>1.000000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.plotting.scatter_matrix(p_d,figsize=(<span class="number">10</span>,<span class="number">8</span>));     <span class="comment">#矩阵散点图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071620737.png" alt="png"></p><h3 id="10-1-3-Tushare数据的保存及扩展"><a href="#10-1-3-Tushare数据的保存及扩展" class="headerlink" title="10.1.3 Tushare数据的保存及扩展"></a>10.1.3 Tushare数据的保存及扩展</h3><p>10.1.3.1 Tushare数据的保存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#xlsx = pd.ExcelWriter(&#x27;tushare.xlsx&#x27;)</span></span><br><span class="line"><span class="comment">#s_b.to_excel(xlsx,&#x27;stock_basics&#x27;)    #沪深上市公司的基本信息</span></span><br><span class="line"><span class="comment">#n_s.to_excel(xlsx,&#x27;new_stocks&#x27;)      #新股发行数据</span></span><br><span class="line"><span class="comment">#h_s.to_excel(xlsx,&#x27;hist_data&#x27;)       #沪深300近三年历史行情数据</span></span><br><span class="line"><span class="comment">#p_d.to_excel(xlsx,&#x27;profit_data&#x27;)     #公司盈利能力数据</span></span><br><span class="line"><span class="comment">#xlsx.save()</span></span><br></pre></td></tr></table></figure><p>10.1.3.2 Tushare平台的扩展</p><h2 id="10-2-新浪财经数据的获取与分析"><a href="#10-2-新浪财经数据的获取与分析" class="headerlink" title="10.2 新浪财经数据的获取与分析"></a>10.2 新浪财经数据的获取与分析</h2><h3 id="10-2-1-国内生产总值的复制与分析"><a href="#10-2-1-国内生产总值的复制与分析" class="headerlink" title="10.2.1 国内生产总值的复制与分析"></a>10.2.1 国内生产总值的复制与分析</h3><p>10.2.1.1 国内生产总值的复制与分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> IFrame</span><br><span class="line">IFrame(<span class="string">&quot;http://finance.sina.com.cn/mac&quot;</span>,width=<span class="number">960</span>,height=<span class="number">560</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe</span><br><span class="line">    width=&quot;960&quot;</span><br><span class="line">    height=&quot;560&quot;</span><br><span class="line">    src=&quot;http://finance.sina.com.cn/mac&quot;</span><br><span class="line">    frameborder=&quot;0&quot;</span><br><span class="line">    allowfullscreen</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#GDP=pd.read_clipboard(index_col=0);GDP </span></span><br><span class="line">GDP=pd.read_table(<span class="string">&#x27;data/GDP.txt&#x27;</span>,index_col=<span class="number">0</span>,encoding=<span class="string">&#x27;GBK&#x27;</span>);GDP</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>国内生产总值(亿元)</th>      <th>人均国内生产总值(元)</th>    </tr>    <tr>      <th>年份</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2020</th>      <td>1015986.20</td>      <td>72000.00</td>    </tr>    <tr>      <th>2019</th>      <td>990865.11</td>      <td>70891.78</td>    </tr>    <tr>      <th>2018</th>      <td>919281.10</td>      <td>66005.70</td>    </tr>    <tr>      <th>2017</th>      <td>832035.90</td>      <td>60014.00</td>    </tr>    <tr>      <th>2016</th>      <td>746395.10</td>      <td>54139.00</td>    </tr>    <tr>      <th>2015</th>      <td>688858.20</td>      <td>50237.00</td>    </tr>    <tr>      <th>2014</th>      <td>643563.10</td>      <td>47173.00</td>    </tr>    <tr>      <th>2013</th>      <td>592963.20</td>      <td>43684.00</td>    </tr>    <tr>      <th>2012</th>      <td>538580.00</td>      <td>39874.00</td>    </tr>    <tr>      <th>2011</th>      <td>487940.20</td>      <td>36302.00</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GDP.plot();</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071620732.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GDP.sort_index(inplace=<span class="literal">True</span>); GDP   <span class="comment">#按年份排序</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>国内生产总值(亿元)</th>      <th>人均国内生产总值(元)</th>    </tr>    <tr>      <th>年份</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2011</th>      <td>487940.20</td>      <td>36302.00</td>    </tr>    <tr>      <th>2012</th>      <td>538580.00</td>      <td>39874.00</td>    </tr>    <tr>      <th>2013</th>      <td>592963.20</td>      <td>43684.00</td>    </tr>    <tr>      <th>2014</th>      <td>643563.10</td>      <td>47173.00</td>    </tr>    <tr>      <th>2015</th>      <td>688858.20</td>      <td>50237.00</td>    </tr>    <tr>      <th>2016</th>      <td>746395.10</td>      <td>54139.00</td>    </tr>    <tr>      <th>2017</th>      <td>832035.90</td>      <td>60014.00</td>    </tr>    <tr>      <th>2018</th>      <td>919281.10</td>      <td>66005.70</td>    </tr>    <tr>      <th>2019</th>      <td>990865.11</td>      <td>70891.78</td>    </tr>    <tr>      <th>2020</th>      <td>1015986.20</td>      <td>72000.00</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt            </span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>];  <span class="comment">#中文字为黑体</span></span><br><span class="line">GDP.plot(kind=<span class="string">&#x27;bar&#x27;</span>,y=[<span class="string">&#x27;国内生产总值(亿元)&#x27;</span>,<span class="string">&#x27;人均国内生产总值(元)&#x27;</span>],</span><br><span class="line">         secondary_y=[<span class="string">&#x27;人均国内生产总值(元)&#x27;</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071622787.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> CurrentConfig,NotebookType   <span class="comment">#在NoteBook中设置pyecharts绘图</span></span><br><span class="line">CurrentConfig.NOTEBOOK_TYPE = NotebookType.JUPYTER_LAB     <span class="comment">#在Jupyterlab中显示pyecharts图</span></span><br><span class="line"><span class="keyword">import</span> pyecharts.options <span class="keyword">as</span> opts                           <span class="comment">#加载pyecharts全局参数</span></span><br><span class="line">figsize=opts.InitOpts(width=<span class="string">&#x27;600px&#x27;</span>,height=<span class="string">&#x27;400px&#x27;</span>,bg_color=<span class="string">&#x27;white&#x27;</span>) <span class="comment">#设置图形大小和背景色 </span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar  <span class="comment">#加载pyecharts绘制条图（Bar）函数</span></span><br><span class="line">Bar().load_javascript()           <span class="comment">#制图前需加载一次JavaScript函数！！</span></span><br></pre></td></tr></table></figure><pre><code>&lt;pyecharts.render.display.Javascript at 0xd6a4a60&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(Bar(figsize)</span><br><span class="line">     .add_xaxis(<span class="built_in">list</span>(GDP.index))</span><br><span class="line">     .add_yaxis(<span class="string">&#x27;国内生产总值(亿元)&#x27;</span>,<span class="built_in">list</span>(GDP[<span class="string">&#x27;国内生产总值(亿元)&#x27;</span>]))     </span><br><span class="line">     .render_notebook()   </span><br><span class="line">)</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="d3bb575a341b41fb86f903e36a1c7caa" class="chart-container" style="width:600px; height:400px;"></div>    <script>        var chart_d3bb575a341b41fb86f903e36a1c7caa = echarts.init(            document.getElementById('d3bb575a341b41fb86f903e36a1c7caa'), 'white', {renderer: 'canvas'});        var option_d3bb575a341b41fb86f903e36a1c7caa = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "bar",            "name": "\u56fd\u5185\u751f\u4ea7\u603b\u503c(\u4ebf\u5143)",            "legendHoverLink": true,            "data": [                487940.2,                538580.0,                592963.2,                643563.1,                688858.2,                746395.1,                832035.9,                919281.1,                990865.11,                1015986.2            ],            "showBackground": false,            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        }    ],    "legend": [        {            "data": [                "\u56fd\u5185\u751f\u4ea7\u603b\u503c(\u4ebf\u5143)"            ],            "selected": {                "\u56fd\u5185\u751f\u4ea7\u603b\u503c(\u4ebf\u5143)": true            }        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                2011,                2012,                2013,                2014,                2015,                2016,                2017,                2018,                2019,                2020            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ]};        chart_d3bb575a341b41fb86f903e36a1c7caa.setOption(option_d3bb575a341b41fb86f903e36a1c7caa);    </script></body></html><p>10.2.1.2 存贷款基准利率的走势分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Rate=pd.read_clipboard(index_col=0);Rate</span></span><br><span class="line">Rate=pd.read_table(<span class="string">&#x27;data/Rate.txt&#x27;</span>,index_col=<span class="number">0</span>,encoding=<span class="string">&#x27;GBK&#x27;</span>);Rate</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>存款利率(%)</th>      <th>贷款利率(%)</th>    </tr>    <tr>      <th>调整时间</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2015-10-24</th>      <td>1.50</td>      <td>4.35</td>    </tr>    <tr>      <th>2015-08-26</th>      <td>1.75</td>      <td>4.60</td>    </tr>    <tr>      <th>2015-06-28</th>      <td>2.00</td>      <td>4.85</td>    </tr>    <tr>      <th>2015-05-11</th>      <td>2.25</td>      <td>5.10</td>    </tr>    <tr>      <th>2015-03-01</th>      <td>2.50</td>      <td>5.35</td>    </tr>    <tr>      <th>2014-11-22</th>      <td>2.75</td>      <td>5.60</td>    </tr>    <tr>      <th>2012-07-06</th>      <td>3.00</td>      <td>6.00</td>    </tr>    <tr>      <th>2012-06-08</th>      <td>3.25</td>      <td>6.31</td>    </tr>    <tr>      <th>2011-07-07</th>      <td>3.50</td>      <td>6.56</td>    </tr>    <tr>      <th>2011-04-06</th>      <td>3.25</td>      <td>6.31</td>    </tr>    <tr>      <th>2011-02-09</th>      <td>3.00</td>      <td>6.06</td>    </tr>    <tr>      <th>2010-12-26</th>      <td>2.75</td>      <td>5.81</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rate.sort_index(inplace=<span class="literal">True</span>); Rate  <span class="comment">#按日期排序</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>存款利率(%)</th>      <th>贷款利率(%)</th>    </tr>    <tr>      <th>调整时间</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2010-12-26</th>      <td>2.75</td>      <td>5.81</td>    </tr>    <tr>      <th>2011-02-09</th>      <td>3.00</td>      <td>6.06</td>    </tr>    <tr>      <th>2011-04-06</th>      <td>3.25</td>      <td>6.31</td>    </tr>    <tr>      <th>2011-07-07</th>      <td>3.50</td>      <td>6.56</td>    </tr>    <tr>      <th>2012-06-08</th>      <td>3.25</td>      <td>6.31</td>    </tr>    <tr>      <th>2012-07-06</th>      <td>3.00</td>      <td>6.00</td>    </tr>    <tr>      <th>2014-11-22</th>      <td>2.75</td>      <td>5.60</td>    </tr>    <tr>      <th>2015-03-01</th>      <td>2.50</td>      <td>5.35</td>    </tr>    <tr>      <th>2015-05-11</th>      <td>2.25</td>      <td>5.10</td>    </tr>    <tr>      <th>2015-06-28</th>      <td>2.00</td>      <td>4.85</td>    </tr>    <tr>      <th>2015-08-26</th>      <td>1.75</td>      <td>4.60</td>    </tr>    <tr>      <th>2015-10-24</th>      <td>1.50</td>      <td>4.35</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Line  <span class="comment">#加载pyecharts绘制线图（Line）函数</span></span><br><span class="line">(Line(figsize)</span><br><span class="line">     .add_xaxis(<span class="built_in">list</span>(Rate.index))</span><br><span class="line">     .add_yaxis(<span class="string">&#x27;存款利率(%)&#x27;</span>,<span class="built_in">list</span>(Rate[<span class="string">&#x27;存款利率(%)&#x27;</span>]))</span><br><span class="line">     .add_yaxis(<span class="string">&#x27;贷款利率(%)&#x27;</span>,<span class="built_in">list</span>(Rate[<span class="string">&#x27;贷款利率(%)&#x27;</span>]))</span><br><span class="line">     .render_notebook()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="ee47b5dfa0f341be9d27e7004db2a509" class="chart-container" style="width:600px; height:400px;"></div>    <script>        var chart_ee47b5dfa0f341be9d27e7004db2a509 = echarts.init(            document.getElementById('ee47b5dfa0f341be9d27e7004db2a509'), 'white', {renderer: 'canvas'});        var option_ee47b5dfa0f341be9d27e7004db2a509 = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "line",            "name": "\u5b58\u6b3e\u5229\u7387(%)",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2010-12-26",                    2.75                ],                [                    "2011-02-09",                    3.0                ],                [                    "2011-04-06",                    3.25                ],                [                    "2011-07-07",                    3.5                ],                [                    "2012-06-08",                    3.25                ],                [                    "2012-07-06",                    3.0                ],                [                    "2014-11-22",                    2.75                ],                [                    "2015-03-01",                    2.5                ],                [                    "2015-05-11",                    2.25                ],                [                    "2015-06-28",                    2.0                ],                [                    "2015-08-26",                    1.75                ],                [                    "2015-10-24",                    1.5                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "\u8d37\u6b3e\u5229\u7387(%)",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2010-12-26",                    5.81                ],                [                    "2011-02-09",                    6.06                ],                [                    "2011-04-06",                    6.31                ],                [                    "2011-07-07",                    6.56                ],                [                    "2012-06-08",                    6.31                ],                [                    "2012-07-06",                    6.0                ],                [                    "2014-11-22",                    5.6                ],                [                    "2015-03-01",                    5.35                ],                [                    "2015-05-11",                    5.1                ],                [                    "2015-06-28",                    4.85                ],                [                    "2015-08-26",                    4.6                ],                [                    "2015-10-24",                    4.35                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        }    ],    "legend": [        {            "data": [                "\u5b58\u6b3e\u5229\u7387(%)",                "\u8d37\u6b3e\u5229\u7387(%)"            ],            "selected": {                "\u5b58\u6b3e\u5229\u7387(%)": true,                "\u8d37\u6b3e\u5229\u7387(%)": true            }        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "2010-12-26",                "2011-02-09",                "2011-04-06",                "2011-07-07",                "2012-06-08",                "2012-07-06",                "2014-11-22",                "2015-03-01",                "2015-05-11",                "2015-06-28",                "2015-08-26",                "2015-10-24"            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ]};        chart_ee47b5dfa0f341be9d27e7004db2a509.setOption(option_ee47b5dfa0f341be9d27e7004db2a509);    </script></body></html><h3 id="10-2-2-板块行情数据的抓取与分析"><a href="#10-2-2-板块行情数据的抓取与分析" class="headerlink" title="10.2.2 板块行情数据的抓取与分析"></a>10.2.2 板块行情数据的抓取与分析</h3><p>10.2.2.1 次新股数据的复制方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#new_stock=pd.read_clipboard(index_col=0);new_stock</span></span><br></pre></td></tr></table></figure><p>10.2.2.2 次新股数据的基本分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#new_stock.sort_values(by=&#x27;涨跌额&#x27;,ascending=False).head(10) #涨幅前十的新股</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#new_stock.to_csv(&#x27;new_stock.csv&#x27;)                     #保存数据到csv表格中</span></span><br><span class="line"><span class="comment">#new_stock=pd.read_csv(&#x27;new_stock.csv&#x27;,index_col=0)   #从csv文档中读取数据</span></span><br></pre></td></tr></table></figure><h2 id="10-3-中商情报数据的可视化分析"><a href="#10-3-中商情报数据的可视化分析" class="headerlink" title="10.3  中商情报数据的可视化分析"></a>10.3  中商情报数据的可视化分析</h2><h3 id="10-3-1-宏观经济数据爬取与分析"><a href="#10-3-1-宏观经济数据爬取与分析" class="headerlink" title="10.3.1 宏观经济数据爬取与分析"></a>10.3.1 宏观经济数据爬取与分析</h3><p>10.3.1.1 行政区划数据的抓取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests                                   <span class="comment">#加载爬虫库</span></span><br><span class="line">url=<span class="string">&#x27;https://s.askci.com/data/year&#x27;</span>               <span class="comment">#综合数据之行政区划页</span></span><br><span class="line">html = requests.get(url).content.decode(<span class="string">&#x27;utf-8&#x27;</span>); <span class="comment">#获取网页信息</span></span><br><span class="line">html[:<span class="number">10</span>]                                        <span class="comment">#显示网页信息，前300个字符</span></span><br></pre></td></tr></table></figure><pre><code>&#39;\ufeff&lt;!doctype&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取第1页表格数据：行政区划，依次类推 [0,1,2,3,4]</span></span><br><span class="line">admin=pd.read_html(html,header=<span class="number">0</span>,index_col=<span class="number">0</span>)[<span class="number">0</span>]; admin</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>2018</th>      <th>2017</th>      <th>2016</th>      <th>2015</th>      <th>2014</th>      <th>2013</th>      <th>2012</th>    </tr>    <tr>      <th>指标</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>地级区划数(个)</th>      <td>333</td>      <td>334</td>      <td>334</td>      <td>334</td>      <td>333</td>      <td>333</td>      <td>333</td>    </tr>    <tr>      <th>地级市数(个)</th>      <td>293</td>      <td>294</td>      <td>293</td>      <td>291</td>      <td>288</td>      <td>286</td>      <td>285</td>    </tr>    <tr>      <th>县级区划数(个)</th>      <td>2851</td>      <td>2851</td>      <td>2851</td>      <td>2850</td>      <td>2854</td>      <td>2853</td>      <td>2852</td>    </tr>    <tr>      <th>市辖区数(个)</th>      <td>970</td>      <td>962</td>      <td>954</td>      <td>921</td>      <td>897</td>      <td>872</td>      <td>860</td>    </tr>    <tr>      <th>县级市数(个)</th>      <td>375</td>      <td>363</td>      <td>360</td>      <td>361</td>      <td>361</td>      <td>368</td>      <td>368</td>    </tr>    <tr>      <th>县数(个)</th>      <td>1335</td>      <td>1355</td>      <td>1366</td>      <td>1397</td>      <td>1425</td>      <td>1442</td>      <td>1453</td>    </tr>    <tr>      <th>自治县数(个)</th>      <td>117</td>      <td>117</td>      <td>117</td>      <td>117</td>      <td>117</td>      <td>117</td>      <td>117</td>    </tr>    <tr>      <th>乡镇级区划数(个)</th>      <td>39945</td>      <td>39888</td>      <td>39862</td>      <td>39789</td>      <td>40381</td>      <td>40497</td>      <td>40446</td>    </tr>    <tr>      <th>镇数(个)</th>      <td>21297</td>      <td>21116</td>      <td>20883</td>      <td>20515</td>      <td>20401</td>      <td>20117</td>      <td>19881</td>    </tr>    <tr>      <th>乡数(个)</th>      <td>10253</td>      <td>10529</td>      <td>10872</td>      <td>11315</td>      <td>12282</td>      <td>12812</td>      <td>13281</td>    </tr>    <tr>      <th>街道办事处(个)</th>      <td>8393</td>      <td>8241</td>      <td>8105</td>      <td>7957</td>      <td>7696</td>      <td>7566</td>      <td>7282</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin[:<span class="number">1</span>].T.plot(kind=<span class="string">&#x27;bar&#x27;</span>,ylim=[<span class="number">0</span>,<span class="number">500</span>]); <span class="comment">#地级区划数图</span></span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071620776.png" alt="png"><br>​    </p><p>10.3.1.2 国内生产总值数据的抓取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url=<span class="string">&#x27;https://s.askci.com/data/year/a02/&#x27;</span>   <span class="comment">#国民经济核算之国内生产总值页</span></span><br><span class="line">html = requests.get(url).content.decode(<span class="string">&#x27;utf-8&#x27;</span>); </span><br><span class="line">gdp=pd.read_html(html,header=<span class="number">0</span>,index_col=<span class="number">0</span>)[<span class="number">0</span>]; gdp</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>2018</th>      <th>2017</th>      <th>2016</th>      <th>2015</th>      <th>2014</th>      <th>2013</th>      <th>2012</th>    </tr>    <tr>      <th>指标</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>国民总收入(亿元)</th>      <td>896915.6</td>      <td>820099.5</td>      <td>737074.0</td>      <td>683390.5</td>      <td>642097.6</td>      <td>588141.2</td>      <td>537329.0</td>    </tr>    <tr>      <th>国内生产总值(亿元)</th>      <td>900309.5</td>      <td>820754.3</td>      <td>740060.8</td>      <td>685992.9</td>      <td>641280.6</td>      <td>592963.2</td>      <td>538580.0</td>    </tr>    <tr>      <th>第一产业增加值(亿元)</th>      <td>64734.0</td>      <td>62099.5</td>      <td>60139.2</td>      <td>57774.6</td>      <td>55626.3</td>      <td>53028.1</td>      <td>49084.5</td>    </tr>    <tr>      <th>第二产业增加值(亿元)</th>      <td>366000.9</td>      <td>332742.7</td>      <td>296547.7</td>      <td>282040.3</td>      <td>277571.8</td>      <td>261956.1</td>      <td>244643.3</td>    </tr>    <tr>      <th>第三产业增加值(亿元)</th>      <td>469574.6</td>      <td>425912.1</td>      <td>383373.9</td>      <td>346178.0</td>      <td>308082.5</td>      <td>277979.1</td>      <td>244852.2</td>    </tr>    <tr>      <th>人均国内生产总值(元)</th>      <td>64644.0</td>      <td>59201.0</td>      <td>53680.0</td>      <td>50028.0</td>      <td>47005.0</td>      <td>43684.0</td>      <td>39874.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdp[:<span class="number">2</span>].T.plot(kind=<span class="string">&#x27;bar&#x27;</span>); <span class="comment">#国民总收入和国内生产总值</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071620420.png" alt="png"></p><h3 id="10-3-2-A股股票信息的爬取与分析"><a href="#10-3-2-A股股票信息的爬取与分析" class="headerlink" title="10.3.2 A股股票信息的爬取与分析"></a>10.3.2 A股股票信息的爬取与分析</h3><p>10.3.2.1 A股收益数据的抓取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;https://s.askci.com/stock/a&#x27;</span>  <span class="comment">#A股信息</span></span><br><span class="line">html = requests.get(url).content.decode(<span class="string">&#x27;utf-8&#x27;</span>); </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.read_html(html,header=<span class="number">0</span>)[<span class="number">0</span>] <span class="comment"># 获取第1个表格数据：A股公司营业收入排行榜(2019年)</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>排名</th>      <th>股票代码</th>      <th>企业简称</th>      <th>营业收入（亿元）</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>600028</td>      <td>中国石化</td>      <td>21059.84</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>601857</td>      <td>中国石油</td>      <td>19338.36</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>601668</td>      <td>中国建筑</td>      <td>16150.23</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>601318</td>      <td>中国平安</td>      <td>12183.15</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>601390</td>      <td>中国中铁</td>      <td>9714.05</td>    </tr>    <tr>      <th>5</th>      <td>6</td>      <td>601186</td>      <td>中国铁建</td>      <td>9103.25</td>    </tr>    <tr>      <th>6</th>      <td>7</td>      <td>601398</td>      <td>工商银行</td>      <td>8826.65</td>    </tr>    <tr>      <th>7</th>      <td>8</td>      <td>601628</td>      <td>中国人寿</td>      <td>8249.61</td>    </tr>    <tr>      <th>8</th>      <td>9</td>      <td>601939</td>      <td>建设银行</td>      <td>7558.58</td>    </tr>    <tr>      <th>9</th>      <td>10</td>      <td>600104</td>      <td>上汽集团</td>      <td>7230.43</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取第2个表格数据：A股公司净利润排行榜(2019年)</span></span><br><span class="line">pd.read_html(html,header=<span class="number">0</span>)[<span class="number">1</span>] </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>排名</th>      <th>股票代码</th>      <th>企业简称</th>      <th>净利润（亿元）</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>601398</td>      <td>工商银行</td>      <td>3176.85</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>601939</td>      <td>建设银行</td>      <td>2735.79</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>601288</td>      <td>农业银行</td>      <td>2164.00</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>601988</td>      <td>中国银行</td>      <td>2050.96</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>601318</td>      <td>中国平安</td>      <td>1593.59</td>    </tr>    <tr>      <th>5</th>      <td>6</td>      <td>600036</td>      <td>招商银行</td>      <td>979.59</td>    </tr>    <tr>      <th>6</th>      <td>7</td>      <td>601328</td>      <td>交通银行</td>      <td>795.70</td>    </tr>    <tr>      <th>7</th>      <td>8</td>      <td>601668</td>      <td>中国建筑</td>      <td>709.50</td>    </tr>    <tr>      <th>8</th>      <td>9</td>      <td>601166</td>      <td>兴业银行</td>      <td>676.81</td>    </tr>    <tr>      <th>9</th>      <td>10</td>      <td>601658</td>      <td>邮储银行</td>      <td>643.18</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取第3个表格数据：A股公司利润总额排行榜(2019年)</span></span><br><span class="line">pd.read_html(html,header=<span class="number">0</span>)[<span class="number">2</span>] </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>排名</th>      <th>股票代码</th>      <th>企业简称</th>      <th>利润总额（亿元）</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>601398</td>      <td>工商银行</td>      <td>3921.26</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>601939</td>      <td>建设银行</td>      <td>3366.16</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>601288</td>      <td>农业银行</td>      <td>2650.50</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>601988</td>      <td>中国银行</td>      <td>2463.78</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>601318</td>      <td>中国平安</td>      <td>1877.64</td>    </tr>    <tr>      <th>5</th>      <td>6</td>      <td>600036</td>      <td>招商银行</td>      <td>1224.40</td>    </tr>    <tr>      <th>6</th>      <td>7</td>      <td>601668</td>      <td>中国建筑</td>      <td>942.91</td>    </tr>    <tr>      <th>7</th>      <td>8</td>      <td>601328</td>      <td>交通银行</td>      <td>864.25</td>    </tr>    <tr>      <th>8</th>      <td>9</td>      <td>2</td>      <td>万科A</td>      <td>796.76</td>    </tr>    <tr>      <th>9</th>      <td>10</td>      <td>601166</td>      <td>兴业银行</td>      <td>766.37</td>    </tr>  </tbody></table></div><p>10.3.2.2  A股股票信息的爬取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建获取当前页的第4个表格数据的函数，其中i表示第i页，即取pageNum=i,以此类推！</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stock</span>(<span class="params">i</span>):</span> </span><br><span class="line">    url=<span class="string">&#x27;https://s.askci.com/stock/a/0-0?reportTime=2020-03-31&amp;pageNum=&#x27;</span> </span><br><span class="line">    html = requests.get(url+<span class="built_in">str</span>(i)).content.decode(<span class="string">&#x27;utf-8&#x27;</span>); </span><br><span class="line">    data=pd.read_html(html,header=<span class="number">0</span>)[<span class="number">3</span>] </span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stock1=get_stock(<span class="number">1</span>);stock1      <span class="comment">#第1页A股信息</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>序号</th>      <th>股票代码</th>      <th>股票简称</th>      <th>公司名称</th>      <th>省份</th>      <th>城市</th>      <th>主营业务收入(202003)</th>      <th>净利润(202003)</th>      <th>员工人数</th>      <th>上市日期</th>      <th>招股书</th>      <th>公司财报</th>      <th>行业分类</th>      <th>产品类型</th>      <th>主营业务</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>1</td>      <td>平安银行</td>      <td>平安银行股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>379.26亿</td>      <td>85.48亿</td>      <td>36676</td>      <td>1991-04-03</td>      <td>--</td>      <td>NaN</td>      <td>银行</td>      <td>商业银行业务</td>      <td>经有关监管机构批准的各项商业银行业务。</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>2</td>      <td>万科A</td>      <td>万科企业股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>477.74亿</td>      <td>24.30亿</td>      <td>140565</td>      <td>1991-01-29</td>      <td>--</td>      <td>NaN</td>      <td>房地产开发</td>      <td>房地产、物业管理、投资咨询</td>      <td>房地产开发和物业服务。</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>4</td>      <td>国华网安</td>      <td>深圳国华网安科技股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>2325.30万</td>      <td>357.53万</td>      <td>264</td>      <td>1991-01-14</td>      <td>--</td>      <td>NaN</td>      <td>生物医药</td>      <td>移动应用安全服务、移动互联网游戏</td>      <td>移动应用安全服务业务。</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>5</td>      <td>ST星源</td>      <td>深圳世纪星源股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>4570.29万</td>      <td>-2235.80万</td>      <td>629</td>      <td>1990-12-10</td>      <td>--</td>      <td>NaN</td>      <td>环保工程、物业管理</td>      <td>酒店经营、物业管理、环保业务</td>      <td>绿色低碳城市社区建设相关的服务业务。</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>6</td>      <td>深振业A</td>      <td>深圳市振业(集团)股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>6.52亿</td>      <td>1.41亿</td>      <td>397</td>      <td>1992-04-27</td>      <td>--</td>      <td>NaN</td>      <td>房地产开发</td>      <td>房地产</td>      <td>从事房地产开发与销售。</td>    </tr>    <tr>      <th>5</th>      <td>6</td>      <td>7</td>      <td>*ST全新</td>      <td>深圳市全新好股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>876.49万</td>      <td>-2281.79万</td>      <td>76</td>      <td>1992-04-13</td>      <td>--</td>      <td>NaN</td>      <td>物业经营</td>      <td>物业管理及停车费、房屋租赁、一次性口罩、纳米胶囊、杀菌纸巾</td>      <td>物业管理和房屋租赁业等</td>    </tr>    <tr>      <th>6</th>      <td>7</td>      <td>8</td>      <td>神州高铁</td>      <td>神州高铁技术股份有限公司</td>      <td>北京</td>      <td>北京市</td>      <td>1.19亿</td>      <td>-1.08亿</td>      <td>2394</td>      <td>1992-05-07</td>      <td>--</td>      <td>NaN</td>      <td>轨道交通设备</td>      <td>轨道交通</td>      <td>专业致力于提供轨道交通运营检修装备与数据、线路运营、维保服务。</td>    </tr>    <tr>      <th>7</th>      <td>8</td>      <td>9</td>      <td>中国宝安</td>      <td>中国宝安集团股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>16.28亿</td>      <td>1.14亿</td>      <td>13345</td>      <td>1991-06-25</td>      <td>--</td>      <td>NaN</td>      <td>综合</td>      <td>高新技术产业、生物医药、房地产</td>      <td>高新技术产业、生物医药产业、房地产及其他产业。</td>    </tr>    <tr>      <th>8</th>      <td>9</td>      <td>10</td>      <td>美丽生态</td>      <td>深圳美丽生态股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>7026.79万</td>      <td>-1174.96万</td>      <td>278</td>      <td>1995-10-27</td>      <td>--</td>      <td>NaN</td>      <td>园林工程</td>      <td>燃气销售服务、园林建设、园林设计、苗木销售</td>      <td>工程施工、园林绿化及环境综合整治。</td>    </tr>    <tr>      <th>9</th>      <td>10</td>      <td>11</td>      <td>深物业A</td>      <td>深圳市物业发展(集团)股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>8.62亿</td>      <td>1.28亿</td>      <td>8035</td>      <td>1992-03-30</td>      <td>--</td>      <td>NaN</td>      <td>房地产开发</td>      <td>产城空间开发、物业管理服务、产业生态运营、餐饮业务、工程监理业务</td>      <td>从事房地产开发经营，兼营物业管理、房屋租赁、出租车客运、餐饮服务等。</td>    </tr>    <tr>      <th>10</th>      <td>11</td>      <td>12</td>      <td>南玻A</td>      <td>中国南玻集团股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>17.34亿</td>      <td>1.12亿</td>      <td>10558</td>      <td>1992-02-28</td>      <td>--</td>      <td>NaN</td>      <td>玻璃</td>      <td>玻璃业务、电子玻璃及显示器件业务、太阳能及其他业务</td>      <td>研发、生产制造和销售优质浮法玻璃和工程玻璃、太阳能玻璃和硅材料、光伏电池和组件等可再生能源产...</td>    </tr>    <tr>      <th>11</th>      <td>12</td>      <td>14</td>      <td>沙河股份</td>      <td>沙河实业股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>8687.30万</td>      <td>983.82万</td>      <td>153</td>      <td>1992-06-02</td>      <td>--</td>      <td>NaN</td>      <td>房地产开发</td>      <td>房地产销售</td>      <td>从事房地产开发与经营、现代服务型产业用房运营与管理。</td>    </tr>    <tr>      <th>12</th>      <td>13</td>      <td>16</td>      <td>深康佳A</td>      <td>康佳集团股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>78.07亿</td>      <td>-2.74亿</td>      <td>17216</td>      <td>1992-03-27</td>      <td>--</td>      <td>NaN</td>      <td>电视机</td>      <td>工贸业务、彩电业务、环保业务、白电业务、半导体业务</td>      <td>消费类电子业务、工贸业务、环保业务、半导体业务。</td>    </tr>    <tr>      <th>13</th>      <td>14</td>      <td>17</td>      <td>深中华A</td>      <td>深圳中华自行车(集团)股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>743.44万</td>      <td>-73.30万</td>      <td>65</td>      <td>1992-03-31</td>      <td>--</td>      <td>NaN</td>      <td>自行车</td>      <td>自行车及零配件销售、锂电池材料、珠宝黄金</td>      <td>自行车及锂电池材料业务、珠宝黄金业务。</td>    </tr>    <tr>      <th>14</th>      <td>15</td>      <td>19</td>      <td>深粮控股</td>      <td>深圳市深粮控股股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>16.94亿</td>      <td>8628.35万</td>      <td>1246</td>      <td>1992-10-12</td>      <td>--</td>      <td>NaN</td>      <td>软饮料</td>      <td>食品和饮料及茶加工、粮油贸易及加工、粮油仓储物流及服务</td>      <td>批发零售业务、食品加工制造业务、租赁及商务服务业务。</td>    </tr>    <tr>      <th>15</th>      <td>16</td>      <td>20</td>      <td>深华发A</td>      <td>深圳中恒华发股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>8780.06万</td>      <td>-40.07万</td>      <td>1132</td>      <td>1992-04-28</td>      <td>--</td>      <td>NaN</td>      <td>电子零部件</td>      <td>显示器、注塑件、EPS产品、物业租赁、废料收入、水电费及其他</td>      <td>精密注塑件的加工、销售;液晶显示器的加工、销售;轻型包装材料的加工、销售以及物业租赁业务。</td>    </tr>    <tr>      <th>16</th>      <td>17</td>      <td>21</td>      <td>深科技</td>      <td>深圳长城开发科技股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>33.23亿</td>      <td>1.04亿</td>      <td>27051</td>      <td>1994-02-02</td>      <td>--</td>      <td>NaN</td>      <td>PC、服务器及硬件</td>      <td>存储半导体业务、自有产品、高端制造</td>      <td>致力于为全球客户提供技术研发、工艺设计、生产加工、采购管理、物流支持等电子产品制造服务。</td>    </tr>    <tr>      <th>17</th>      <td>18</td>      <td>23</td>      <td>深天地A</td>      <td>深圳市天地(集团)股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>1.67亿</td>      <td>-1308.50万</td>      <td>984</td>      <td>1993-04-29</td>      <td>--</td>      <td>NaN</td>      <td>商品混凝土</td>      <td>房地产、工业、租赁</td>      <td>商品混凝土的生产和销售、房地产的开发及物业管理等。</td>    </tr>    <tr>      <th>18</th>      <td>19</td>      <td>25</td>      <td>特力A</td>      <td>深圳市特力(集团)股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>8552.04万</td>      <td>496.65万</td>      <td>302</td>      <td>1993-06-21</td>      <td>--</td>      <td>NaN</td>      <td>汽车销售</td>      <td>汽车销售、汽车维修及检测、珠宝批发及零售、物业租赁及服务</td>      <td>汽车销售、汽车检测、维修及配件销售；资源性资产管理；珠宝服务业务。</td>    </tr>    <tr>      <th>19</th>      <td>20</td>      <td>26</td>      <td>飞亚达</td>      <td>飞亚达精密科技股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>5.88亿</td>      <td>-1297.48万</td>      <td>4901</td>      <td>1993-06-03</td>      <td>--</td>      <td>NaN</td>      <td>珠宝首饰</td>      <td>手表品牌业务、手表零售服务业务、精密科技业务、租赁业务</td>      <td>主要从事钟表及其零配件的设计、开发、制造、销售和维修业务，包括"飞亚达"表的产品经营和世界名...</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stock1.to_csv(<span class="string">&#x27;A股信息1.csv&#x27;</span>,index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment">#保存第1页A股信息</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stock = get_stock(<span class="number">1</span>)    <span class="comment">#获取第1页数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">5</span>):   <span class="comment">#获取2到5页数据,共有202页数据，全部爬取需长时间</span></span><br><span class="line">    stock = pd.concat([stock,get_stock(i)])   <span class="comment">#拼接表格数据</span></span><br><span class="line">stock</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>序号</th>      <th>股票代码</th>      <th>股票简称</th>      <th>公司名称</th>      <th>省份</th>      <th>城市</th>      <th>主营业务收入(202003)</th>      <th>净利润(202003)</th>      <th>员工人数</th>      <th>上市日期</th>      <th>招股书</th>      <th>公司财报</th>      <th>行业分类</th>      <th>产品类型</th>      <th>主营业务</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>1</td>      <td>平安银行</td>      <td>平安银行股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>379.26亿</td>      <td>85.48亿</td>      <td>36676</td>      <td>1991-04-03</td>      <td>--</td>      <td>NaN</td>      <td>银行</td>      <td>商业银行业务</td>      <td>经有关监管机构批准的各项商业银行业务。</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>2</td>      <td>万科A</td>      <td>万科企业股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>477.74亿</td>      <td>24.30亿</td>      <td>140565</td>      <td>1991-01-29</td>      <td>--</td>      <td>NaN</td>      <td>房地产开发</td>      <td>房地产、物业管理、投资咨询</td>      <td>房地产开发和物业服务。</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>4</td>      <td>国华网安</td>      <td>深圳国华网安科技股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>2325.30万</td>      <td>357.53万</td>      <td>264</td>      <td>1991-01-14</td>      <td>--</td>      <td>NaN</td>      <td>生物医药</td>      <td>移动应用安全服务、移动互联网游戏</td>      <td>移动应用安全服务业务。</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>5</td>      <td>ST星源</td>      <td>深圳世纪星源股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>4570.29万</td>      <td>-2235.80万</td>      <td>629</td>      <td>1990-12-10</td>      <td>--</td>      <td>NaN</td>      <td>环保工程、物业管理</td>      <td>酒店经营、物业管理、环保业务</td>      <td>绿色低碳城市社区建设相关的服务业务。</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>6</td>      <td>深振业A</td>      <td>深圳市振业(集团)股份有限公司</td>      <td>广东</td>      <td>深圳市</td>      <td>6.52亿</td>      <td>1.41亿</td>      <td>397</td>      <td>1992-04-27</td>      <td>--</td>      <td>NaN</td>      <td>房地产开发</td>      <td>房地产</td>      <td>从事房地产开发与销售。</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>15</th>      <td>76</td>      <td>404</td>      <td>长虹华意</td>      <td>长虹华意压缩机股份有限公司</td>      <td>江西</td>      <td>景德镇市</td>      <td>20.96亿</td>      <td>2571.95万</td>      <td>7788</td>      <td>1996-06-19</td>      <td>--</td>      <td>NaN</td>      <td>压缩机</td>      <td>压缩机 、原材料及配件、智能扫地机 、电池</td>      <td>冰箱压缩机、商用压缩机的研发、生产和销售。</td>    </tr>    <tr>      <th>16</th>      <td>77</td>      <td>407</td>      <td>胜利股份</td>      <td>山东胜利股份有限公司</td>      <td>山东</td>      <td>济南市</td>      <td>8.63亿</td>      <td>2883.14万</td>      <td>2071</td>      <td>1996-07-03</td>      <td>--</td>      <td>NaN</td>      <td>燃气</td>      <td>天然气终端销售、天然气贸易、管道制造、油品贸易</td>      <td>清洁能源天然气业务推广和应用。</td>    </tr>    <tr>      <th>17</th>      <td>78</td>      <td>408</td>      <td>藏格控股</td>      <td>藏格控股股份有限公司</td>      <td>青海</td>      <td>海西蒙古族藏族自治州</td>      <td>2.72亿</td>      <td>-2.69亿</td>      <td>1603</td>      <td>1996-06-28</td>      <td>--</td>      <td>NaN</td>      <td>钾肥</td>      <td>生产农用复合肥料、贸易业务</td>      <td>钾肥(氯化钾)的生产和销售。</td>    </tr>    <tr>      <th>18</th>      <td>79</td>      <td>409</td>      <td>云鼎科技</td>      <td>云鼎科技股份有限公司</td>      <td>山东</td>      <td>济南市</td>      <td>6.03亿</td>      <td>-1501.08万</td>      <td>381</td>      <td>1996-06-27</td>      <td>--</td>      <td>NaN</td>      <td>综合</td>      <td>黄金、生物制药、特种轮胎、专利技术实施、中药材加工零售、商业贸易</td>      <td>信息化技术服务和煤气化技术推广业务。</td>    </tr>    <tr>      <th>19</th>      <td>80</td>      <td>410</td>      <td>ST沈机</td>      <td>沈阳机床股份有限公司</td>      <td>辽宁</td>      <td>沈阳市</td>      <td>2.06亿</td>      <td>-2.28亿</td>      <td>4597</td>      <td>1996-07-18</td>      <td>--</td>      <td>NaN</td>      <td>机床设备</td>      <td>机床、机床配套</td>      <td>产品研发、机床制造、销售服务、行业解决方案、机床零部件配套等。</td>    </tr>  </tbody></table><p>80 rows × 15 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#stock.to_csv(&#x27;上市公司信息.csv&#x27;, index=False, encoding=&#x27;utf-8&#x27;)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第10章-数据在线分析及可视化&quot;&gt;&lt;a href=&quot;#第10章-数据在线分析及可视化&quot; class=&quot;headerlink&quot; title=&quot;第10章 数据在线分析及可视化&quot;&gt;&lt;/a&gt;第10章 数据在线分析及可视化&lt;/h1&gt;&lt;h2 id=&quot;10-1-Tushare数</summary>
      
    
    
    
    <category term="《数据可视化》——基于Python的应用" scheme="https://zhangkh.top/categories/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%8B%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="《数据可视化》——基于Python的应用" scheme="https://zhangkh.top/tags/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%8B%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>第9章-数据的决策分析</title>
    <link href="https://zhangkh.top/ff635cd4.html"/>
    <id>https://zhangkh.top/ff635cd4.html</id>
    <published>2021-12-07T08:16:32.000Z</published>
    <updated>2021-12-07T08:24:24.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-9-章-数据的决策分析及可视化"><a href="#第-9-章-数据的决策分析及可视化" class="headerlink" title="第 9 章 数据的决策分析及可视化"></a>第 9 章 数据的决策分析及可视化</h1><h2 id="9-1-确定性分析"><a href="#9-1-确定性分析" class="headerlink" title="9.1 确定性分析"></a>9.1 确定性分析</h2><h3 id="9-1-1-单目标求解及图示"><a href="#9-1-1-单目标求解及图示" class="headerlink" title="9.1.1 单目标求解及图示"></a>9.1.1 单目标求解及图示</h3><p>（1）读取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">Tv=pd.read_excel(<span class="string">&#x27;DaPy_data.xlsx&#x27;</span>,<span class="string">&#x27;Target&#x27;</span>,index_col=<span class="number">0</span>); Tv <span class="comment">#目标值 </span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>设备投资</th>      <th>单件成本</th>      <th>年销售量</th>      <th>销售单价</th>    </tr>    <tr>      <th>方案</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>方案1</th>      <td>1500000</td>      <td>1700</td>      <td>8000</td>      <td>2900</td>    </tr>    <tr>      <th>方案2</th>      <td>2000000</td>      <td>1550</td>      <td>8000</td>      <td>2900</td>    </tr>    <tr>      <th>方案3</th>      <td>2500000</td>      <td>1400</td>      <td>8000</td>      <td>2900</td>    </tr>  </tbody></table></div><p>（2）计算年收益金额</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tv[<span class="string">&#x27;年收益&#x27;</span>]=Tv.年销售量*(Tv.销售单价-Tv.单件成本)-Tv.设备投资;Tv </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>设备投资</th>      <th>单件成本</th>      <th>年销售量</th>      <th>销售单价</th>      <th>年收益</th>    </tr>    <tr>      <th>方案</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>方案1</th>      <td>1500000</td>      <td>1700</td>      <td>8000</td>      <td>2900</td>      <td>8100000</td>    </tr>    <tr>      <th>方案2</th>      <td>2000000</td>      <td>1550</td>      <td>8000</td>      <td>2900</td>      <td>8800000</td>    </tr>    <tr>      <th>方案3</th>      <td>2500000</td>      <td>1400</td>      <td>8000</td>      <td>2900</td>      <td>9500000</td>    </tr>  </tbody></table></div><p>（3）年收益的直观分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt            </span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>]; </span><br><span class="line"><span class="comment">#plt.rcParams[&#x27;figure.dpi&#x27;]=90  #分辨率</span></span><br><span class="line">Tv[<span class="string">&#x27;年收益&#x27;</span>].plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071617764.png" alt="png"></p><p>（4）确定最佳方案：收益率最大者为最佳方案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tv[<span class="string">&#x27;年收益&#x27;</span>].idxmax()</span><br></pre></td></tr></table></figure><pre><code>&#39;方案3&#39;</code></pre><h3 id="9-1-2-多目标求解及图示"><a href="#9-1-2-多目标求解及图示" class="headerlink" title="9.1.2 多目标求解及图示"></a>9.1.2 多目标求解及图示</h3><p>（1）计算理想值:      </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ev=[<span class="built_in">min</span>(Tv.设备投资), <span class="built_in">min</span>(Tv.单件成本), <span class="built_in">max</span>(Tv.年销售量), <span class="built_in">max</span>(Tv.销售单价), </span><br><span class="line">    <span class="built_in">max</span>(Tv.年收益)]; Ev <span class="comment">#理想值 </span></span><br></pre></td></tr></table></figure><pre><code>[1500000, 1400, 8000, 2900, 9500000]</code></pre><p>（2）计算差距: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tv_Ev2=((Tv-Ev))**<span class="number">2</span>    <span class="comment">#差值的平方 </span></span><br><span class="line">Tv_Ev2</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>设备投资</th>      <th>单件成本</th>      <th>年销售量</th>      <th>销售单价</th>      <th>年收益</th>    </tr>    <tr>      <th>方案</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>方案1</th>      <td>0</td>      <td>90000</td>      <td>0</td>      <td>0</td>      <td>1960000000000</td>    </tr>    <tr>      <th>方案2</th>      <td>250000000000</td>      <td>22500</td>      <td>0</td>      <td>0</td>      <td>490000000000</td>    </tr>    <tr>      <th>方案3</th>      <td>1000000000000</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dv=(Tv_Ev2).<span class="built_in">sum</span>(<span class="number">1</span>); Dv   <span class="comment">#差距</span></span><br></pre></td></tr></table></figure><pre><code>方案方案1    1960000090000方案2     740000022500方案3    1000000000000dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tv[<span class="string">&#x27;差距&#x27;</span>]=Dv; Tv</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>设备投资</th>      <th>单件成本</th>      <th>年销售量</th>      <th>销售单价</th>      <th>年收益</th>      <th>差距</th>    </tr>    <tr>      <th>方案</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>方案1</th>      <td>1500000</td>      <td>1700</td>      <td>8000</td>      <td>2900</td>      <td>8100000</td>      <td>1960000090000</td>    </tr>    <tr>      <th>方案2</th>      <td>2000000</td>      <td>1550</td>      <td>8000</td>      <td>2900</td>      <td>8800000</td>      <td>740000022500</td>    </tr>    <tr>      <th>方案3</th>      <td>2500000</td>      <td>1400</td>      <td>8000</td>      <td>2900</td>      <td>9500000</td>      <td>1000000000000</td>    </tr>  </tbody></table></div><p>（3）差距的直观分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dv.plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071617268.png" alt="png"></p><p>（4）确定最佳方案: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dv.idxmin() </span><br></pre></td></tr></table></figure><pre><code>&#39;方案2&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(&#123;<span class="string">&#x27;单目标&#x27;</span>:Tv[<span class="string">&#x27;年收益&#x27;</span>],<span class="string">&#x27;单目标方案&#x27;</span>:Tv[<span class="string">&#x27;年收益&#x27;</span>]==Tv[<span class="string">&#x27;年收益&#x27;</span>].<span class="built_in">max</span>(),</span><br><span class="line">              <span class="string">&#x27;多目标&#x27;</span>:Tv[<span class="string">&#x27;差距&#x27;</span>],<span class="string">&#x27;多目标方案&#x27;</span>:Tv[<span class="string">&#x27;差距&#x27;</span>]==Tv[<span class="string">&#x27;差距&#x27;</span>].<span class="built_in">min</span>()&#125;)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>单目标</th>      <th>单目标方案</th>      <th>多目标</th>      <th>多目标方案</th>    </tr>    <tr>      <th>方案</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>方案1</th>      <td>8100000</td>      <td>False</td>      <td>1960000090000</td>      <td>False</td>    </tr>    <tr>      <th>方案2</th>      <td>8800000</td>      <td>False</td>      <td>740000022500</td>      <td>True</td>    </tr>    <tr>      <th>方案3</th>      <td>9500000</td>      <td>True</td>      <td>1000000000000</td>      <td>False</td>    </tr>  </tbody></table></div><h2 id="9-2-不确定性决策分析"><a href="#9-2-不确定性决策分析" class="headerlink" title="9.2 不确定性决策分析"></a>9.2 不确定性决策分析</h2><h3 id="9-2-1-分析方法简介"><a href="#9-2-1-分析方法简介" class="headerlink" title="9.2.1 分析方法简介"></a>9.2.1 分析方法简介</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PLm=pd.DataFrame();    <span class="comment">#构建损益矩阵 ProfitLoss matrix </span></span><br><span class="line">PLm[<span class="string">&#x27;畅销&#x27;</span>]= <span class="number">12000</span>*(Tv.销售单价-Tv.单件成本)-Tv.设备投资; </span><br><span class="line">PLm[<span class="string">&#x27;一般&#x27;</span>]= <span class="number">8000</span>*(Tv.销售单价-Tv.单件成本)-Tv.设备投资; </span><br><span class="line">PLm[<span class="string">&#x27;滞销&#x27;</span>]= <span class="number">1500</span>*(Tv.销售单价-Tv.单件成本)-Tv.设备投资;</span><br><span class="line">PLm </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>畅销</th>      <th>一般</th>      <th>滞销</th>    </tr>    <tr>      <th>方案</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>方案1</th>      <td>12900000</td>      <td>8100000</td>      <td>300000</td>    </tr>    <tr>      <th>方案2</th>      <td>14200000</td>      <td>8800000</td>      <td>25000</td>    </tr>    <tr>      <th>方案3</th>      <td>15500000</td>      <td>9500000</td>      <td>-250000</td>    </tr>  </tbody></table></div><h3 id="9-2-2-不确定分析原则"><a href="#9-2-2-不确定分析原则" class="headerlink" title="9.2.2  不确定分析原则"></a>9.2.2  不确定分析原则</h3><p>9.2.2.1 乐观原则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lg=PLm.<span class="built_in">max</span>(axis=<span class="number">1</span>);lg  <span class="comment">#每列最大者</span></span><br></pre></td></tr></table></figure><pre><code>方案方案1    12900000方案2    14200000方案3    15500000dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BQD=PLm.copy();PLm</span><br><span class="line">BQD[<span class="string">&#x27;乐观&#x27;</span>]=lg; BQD</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>畅销</th>      <th>一般</th>      <th>滞销</th>      <th>乐观</th>    </tr>    <tr>      <th>方案</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>方案1</th>      <td>12900000</td>      <td>8100000</td>      <td>300000</td>      <td>12900000</td>    </tr>    <tr>      <th>方案2</th>      <td>14200000</td>      <td>8800000</td>      <td>25000</td>      <td>14200000</td>    </tr>    <tr>      <th>方案3</th>      <td>15500000</td>      <td>9500000</td>      <td>-250000</td>      <td>15500000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lg.plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071617783.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lg.idxmax() </span><br></pre></td></tr></table></figure><pre><code>&#39;方案3&#39;</code></pre><p>9.2.2.2 悲观原则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bg=PLm.<span class="built_in">min</span>(<span class="number">1</span>); bg</span><br></pre></td></tr></table></figure><pre><code>方案方案1    300000方案2     25000方案3   -250000dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BQD[<span class="string">&#x27;悲观&#x27;</span>]=bg; BQD</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>畅销</th>      <th>一般</th>      <th>滞销</th>      <th>乐观</th>      <th>悲观</th>    </tr>    <tr>      <th>方案</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>方案1</th>      <td>12900000</td>      <td>8100000</td>      <td>300000</td>      <td>12900000</td>      <td>300000</td>    </tr>    <tr>      <th>方案2</th>      <td>14200000</td>      <td>8800000</td>      <td>25000</td>      <td>14200000</td>      <td>25000</td>    </tr>    <tr>      <th>方案3</th>      <td>15500000</td>      <td>9500000</td>      <td>-250000</td>      <td>15500000</td>      <td>-250000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span>;  <span class="comment">#正常显示图中负号</span></span><br><span class="line">bg.plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071617777.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bg.idxmax() </span><br></pre></td></tr></table></figure><pre><code>&#39;方案1&#39;</code></pre><p>9.2.2.3 折中原则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">0.35</span> </span><br><span class="line">zz= a*lg + (<span class="number">1</span>-a)*bg; zz</span><br></pre></td></tr></table></figure><pre><code>方案方案1    4710000.0方案2    4986250.0方案3    5262500.0dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BQD[<span class="string">&#x27;折中&#x27;</span>]=zz; BQD</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>畅销</th>      <th>一般</th>      <th>滞销</th>      <th>乐观</th>      <th>悲观</th>      <th>折中</th>    </tr>    <tr>      <th>方案</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>方案1</th>      <td>12900000</td>      <td>8100000</td>      <td>300000</td>      <td>12900000</td>      <td>300000</td>      <td>4710000.0</td>    </tr>    <tr>      <th>方案2</th>      <td>14200000</td>      <td>8800000</td>      <td>25000</td>      <td>14200000</td>      <td>25000</td>      <td>4986250.0</td>    </tr>    <tr>      <th>方案3</th>      <td>15500000</td>      <td>9500000</td>      <td>-250000</td>      <td>15500000</td>      <td>-250000</td>      <td>5262500.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zz.plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071617889.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zz.idxmax() </span><br></pre></td></tr></table></figure><pre><code>&#39;方案3&#39;</code></pre><p>9.2.2.4 后悔原则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rm=PLm.<span class="built_in">max</span>()-PLm;Rm  <span class="comment">#构建后悔矩阵 Regret matrix </span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>畅销</th>      <th>一般</th>      <th>滞销</th>    </tr>    <tr>      <th>方案</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>方案1</th>      <td>2600000</td>      <td>1400000</td>      <td>0</td>    </tr>    <tr>      <th>方案2</th>      <td>1300000</td>      <td>700000</td>      <td>275000</td>    </tr>    <tr>      <th>方案3</th>      <td>0</td>      <td>0</td>      <td>550000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hh=Rm.<span class="built_in">max</span>(<span class="number">1</span>);hh </span><br></pre></td></tr></table></figure><pre><code>方案方案1    2600000方案2    1300000方案3     550000dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BQD[<span class="string">&#x27;后悔&#x27;</span>]=hh; BQD</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>畅销</th>      <th>一般</th>      <th>滞销</th>      <th>乐观</th>      <th>悲观</th>      <th>折中</th>      <th>后悔</th>    </tr>    <tr>      <th>方案</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>方案1</th>      <td>12900000</td>      <td>8100000</td>      <td>300000</td>      <td>12900000</td>      <td>300000</td>      <td>4710000.0</td>      <td>2600000</td>    </tr>    <tr>      <th>方案2</th>      <td>14200000</td>      <td>8800000</td>      <td>25000</td>      <td>14200000</td>      <td>25000</td>      <td>4986250.0</td>      <td>1300000</td>    </tr>    <tr>      <th>方案3</th>      <td>15500000</td>      <td>9500000</td>      <td>-250000</td>      <td>15500000</td>      <td>-250000</td>      <td>5262500.0</td>      <td>550000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hh.plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071617896.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hh.idxmin() </span><br></pre></td></tr></table></figure><pre><code>&#39;方案3&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(&#123;<span class="string">&#x27;乐观&#x27;</span>:lg,<span class="string">&#x27;乐观方案&#x27;</span>:lg==lg.<span class="built_in">max</span>(),<span class="string">&#x27;悲观&#x27;</span>:bg,<span class="string">&#x27;悲观方案&#x27;</span>:bg==bg.<span class="built_in">max</span>(),</span><br><span class="line">              <span class="string">&#x27;折中&#x27;</span>:zz,<span class="string">&#x27;折中方案&#x27;</span>:zz==zz.<span class="built_in">max</span>(),<span class="string">&#x27;后悔&#x27;</span>:hh,<span class="string">&#x27;后悔方案&#x27;</span>:hh==hh.<span class="built_in">min</span>()&#125;)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>乐观</th>      <th>乐观方案</th>      <th>悲观</th>      <th>悲观方案</th>      <th>折中</th>      <th>折中方案</th>      <th>后悔</th>      <th>后悔方案</th>    </tr>    <tr>      <th>方案</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>方案1</th>      <td>12900000</td>      <td>False</td>      <td>300000</td>      <td>True</td>      <td>4710000.0</td>      <td>False</td>      <td>2600000</td>      <td>False</td>    </tr>    <tr>      <th>方案2</th>      <td>14200000</td>      <td>False</td>      <td>25000</td>      <td>False</td>      <td>4986250.0</td>      <td>False</td>      <td>1300000</td>      <td>False</td>    </tr>    <tr>      <th>方案3</th>      <td>15500000</td>      <td>True</td>      <td>-250000</td>      <td>False</td>      <td>5262500.0</td>      <td>True</td>      <td>550000</td>      <td>True</td>    </tr>  </tbody></table></div><h2 id="9-3-概率型风险分析"><a href="#9-3-概率型风险分析" class="headerlink" title="9.3  概率型风险分析"></a>9.3  概率型风险分析</h2><h3 id="9-3-1-期望值法及直观分析"><a href="#9-3-1-期望值法及直观分析" class="headerlink" title="9.3.1 期望值法及直观分析"></a>9.3.1 期望值法及直观分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">probE=[<span class="number">0.1</span>,<span class="number">0.65</span>,<span class="number">0.25</span>]; <span class="comment">#初始概率 </span></span><br><span class="line">qw=(probE*PLm).<span class="built_in">sum</span>(<span class="number">1</span>); qw</span><br></pre></td></tr></table></figure><pre><code>方案方案1    6630000.0方案2    7146250.0方案3    7662500.0dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qw.plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071618510.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qw.idxmax()</span><br></pre></td></tr></table></figure><pre><code>&#39;方案3&#39;</code></pre><h3 id="9-3-2-后悔期望值法及直观分析"><a href="#9-3-2-后悔期望值法及直观分析" class="headerlink" title="9.3.2 后悔期望值法及直观分析"></a>9.3.2 后悔期望值法及直观分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rm</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>畅销</th>      <th>一般</th>      <th>滞销</th>    </tr>    <tr>      <th>方案</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>方案1</th>      <td>2600000</td>      <td>1400000</td>      <td>0</td>    </tr>    <tr>      <th>方案2</th>      <td>1300000</td>      <td>700000</td>      <td>275000</td>    </tr>    <tr>      <th>方案3</th>      <td>0</td>      <td>0</td>      <td>550000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">probE=[<span class="number">0.1</span>,<span class="number">0.65</span>,<span class="number">0.25</span>]; </span><br><span class="line">hhqw=(probE*Rm).<span class="built_in">sum</span>(<span class="number">1</span>); hhqw</span><br></pre></td></tr></table></figure><pre><code>方案方案1    1170000.0方案2     653750.0方案3     137500.0dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hhqw.plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071617263.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hhqw.idxmin()</span><br></pre></td></tr></table></figure><pre><code>&#39;方案3&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(&#123;<span class="string">&#x27;期望值&#x27;</span>:qw,<span class="string">&#x27;期望方案&#x27;</span>:qw==qw.<span class="built_in">max</span>(),</span><br><span class="line">              <span class="string">&#x27;后悔期望值&#x27;</span>:qw,<span class="string">&#x27;后悔期望方案&#x27;</span>:hhqw==hhqw.<span class="built_in">min</span>()&#125;)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>期望值</th>      <th>期望方案</th>      <th>后悔期望值</th>      <th>后悔期望方案</th>    </tr>    <tr>      <th>方案</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>方案1</th>      <td>6630000.0</td>      <td>False</td>      <td>6630000.0</td>      <td>False</td>    </tr>    <tr>      <th>方案2</th>      <td>7146250.0</td>      <td>False</td>      <td>7146250.0</td>      <td>False</td>    </tr>    <tr>      <th>方案3</th>      <td>7662500.0</td>      <td>True</td>      <td>7662500.0</td>      <td>True</td>    </tr>  </tbody></table></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第-9-章-数据的决策分析及可视化&quot;&gt;&lt;a href=&quot;#第-9-章-数据的决策分析及可视化&quot; class=&quot;headerlink&quot; title=&quot;第 9 章 数据的决策分析及可视化&quot;&gt;&lt;/a&gt;第 9 章 数据的决策分析及可视化&lt;/h1&gt;&lt;h2 id=&quot;9-1-确</summary>
      
    
    
    
    <category term="《数据可视化》——基于Python的应用" scheme="https://zhangkh.top/categories/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%8B%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="《数据可视化》——基于Python的应用" scheme="https://zhangkh.top/tags/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%8B%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>第8章-数据的预测分析</title>
    <link href="https://zhangkh.top/1f321105.html"/>
    <id>https://zhangkh.top/1f321105.html</id>
    <published>2021-12-07T08:10:54.000Z</published>
    <updated>2021-12-07T08:24:24.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第8章-数据的预测分析及可视化"><a href="#第8章-数据的预测分析及可视化" class="headerlink" title="第8章 数据的预测分析及可视化"></a>第8章 数据的预测分析及可视化</h1><h2 id="8-1-动态数列的基本分析"><a href="#8-1-动态数列的基本分析" class="headerlink" title="8.1 动态数列的基本分析"></a>8.1 动态数列的基本分析</h2><h3 id="8-1-1-动态数列的介绍"><a href="#8-1-1-动态数列的介绍" class="headerlink" title="8.1.1 动态数列的介绍"></a>8.1.1 动态数列的介绍</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#%config InlineBackend.figure_format = &#x27;retina&#x27; #可提高图形显示的清晰度</span></span><br></pre></td></tr></table></figure><p>8.1.1.1  动态数列的概念</p><p>8.1.1.2 动态数列的构建</p><p>（1）获取时间序列数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd                     <span class="comment">#加载数据分析包pandas</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.precision&#x27;</span>,<span class="number">4</span>)    <span class="comment">#设置pandas输出精度</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_rows&#x27;</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YQdata=pd.read_excel(<span class="string">&#x27;DaPy_data.xlsx&#x27;</span>,<span class="string">&#x27;YQdata&#x27;</span>,index_col=<span class="number">0</span>)</span><br><span class="line">YQdata</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Q1</th>      <th>Q2</th>      <th>Q3</th>      <th>Q4</th>    </tr>    <tr>      <th>Year</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2001</th>      <td>2.330</td>      <td>2.565</td>      <td>2.687</td>      <td>3.384</td>    </tr>    <tr>      <th>2002</th>      <td>2.536</td>      <td>2.797</td>      <td>2.972</td>      <td>3.728</td>    </tr>    <tr>      <th>2003</th>      <td>2.886</td>      <td>3.101</td>      <td>3.346</td>      <td>4.249</td>    </tr>    <tr>      <th>2004</th>      <td>3.342</td>      <td>3.699</td>      <td>3.956</td>      <td>4.991</td>    </tr>    <tr>      <th>2005</th>      <td>3.912</td>      <td>4.280</td>      <td>4.474</td>      <td>5.828</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2011</th>      <td>9.748</td>      <td>10.901</td>      <td>11.586</td>      <td>15.076</td>    </tr>    <tr>      <th>2012</th>      <td>10.837</td>      <td>11.963</td>      <td>12.574</td>      <td>16.573</td>    </tr>    <tr>      <th>2013</th>      <td>11.886</td>      <td>12.916</td>      <td>13.908</td>      <td>20.092</td>    </tr>    <tr>      <th>2014</th>      <td>12.821</td>      <td>14.083</td>      <td>15.086</td>      <td>21.656</td>    </tr>    <tr>      <th>2015</th>      <td>14.067</td>      <td>17.351</td>      <td>17.316</td>      <td>18.937</td>    </tr>  </tbody></table><p>15 rows × 4 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QTdata=pd.read_excel(<span class="string">&#x27;DaPy_data.xlsx&#x27;</span>,<span class="string">&#x27;QTdata&#x27;</span>,index_col=<span class="number">0</span>)</span><br><span class="line">QTdata</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>GDP</th>    </tr>    <tr>      <th>YQ</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2001Q1</th>      <td>2.330</td>    </tr>    <tr>      <th>2001Q2</th>      <td>2.565</td>    </tr>    <tr>      <th>2001Q3</th>      <td>2.687</td>    </tr>    <tr>      <th>2001Q4</th>      <td>3.384</td>    </tr>    <tr>      <th>2002Q1</th>      <td>2.536</td>    </tr>    <tr>      <th>...</th>      <td>...</td>    </tr>    <tr>      <th>2014Q4</th>      <td>21.656</td>    </tr>    <tr>      <th>2015Q1</th>      <td>14.067</td>    </tr>    <tr>      <th>2015Q2</th>      <td>17.351</td>    </tr>    <tr>      <th>2015Q3</th>      <td>17.316</td>    </tr>    <tr>      <th>2015Q4</th>      <td>18.937</td>    </tr>  </tbody></table><p>60 rows × 1 columns</p></div><p>（2）季度序列数据的图示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QTdata.plot(grid=<span class="literal">True</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071612571.png" alt="png"></p><p>（3）构建年度型序列数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成年度变量 </span></span><br><span class="line">QTdata[<span class="string">&#x27;Year&#x27;</span>]=QTdata.index.<span class="built_in">str</span>[:<span class="number">4</span>];QTdata</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>GDP</th>      <th>Year</th>    </tr>    <tr>      <th>YQ</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2001Q1</th>      <td>2.330</td>      <td>2001</td>    </tr>    <tr>      <th>2001Q2</th>      <td>2.565</td>      <td>2001</td>    </tr>    <tr>      <th>2001Q3</th>      <td>2.687</td>      <td>2001</td>    </tr>    <tr>      <th>2001Q4</th>      <td>3.384</td>      <td>2001</td>    </tr>    <tr>      <th>2002Q1</th>      <td>2.536</td>      <td>2002</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2014Q4</th>      <td>21.656</td>      <td>2014</td>    </tr>    <tr>      <th>2015Q1</th>      <td>14.067</td>      <td>2015</td>    </tr>    <tr>      <th>2015Q2</th>      <td>17.351</td>      <td>2015</td>    </tr>    <tr>      <th>2015Q3</th>      <td>17.316</td>      <td>2015</td>    </tr>    <tr>      <th>2015Q4</th>      <td>18.937</td>      <td>2015</td>    </tr>  </tbody></table><p>60 rows × 2 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#形成年度时序数据 </span></span><br><span class="line">YGDP=QTdata.groupby([<span class="string">&#x27;Year&#x27;</span>])[<span class="string">&#x27;GDP&#x27;</span>].<span class="built_in">sum</span>();YGDP </span><br></pre></td></tr></table></figure><pre><code>Year2001    10.9662002    12.0332003    13.5822004    15.9882005    18.494         ...  2011    47.3112012    51.9472013    58.8022014    63.6462015    67.671Name: GDP, Length: 15, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YGDP.plot(grid=<span class="literal">True</span>);</span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071611636.png" alt="png"><br>​    </p><h3 id="8-1-2-动态数列的分析"><a href="#8-1-2-动态数列的分析" class="headerlink" title="8.1.2 动态数列的分析"></a>8.1.2 动态数列的分析</h3><p>8.1.2.1 绝对动态数列</p><p>（1）定基增长量 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">YGDP</span><br><span class="line">YGDPds=pd.DataFrame(YGDP);  <span class="comment">#构建年度动态序列框</span></span><br><span class="line">YGDPds</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>GDP</th>    </tr>    <tr>      <th>Year</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2001</th>      <td>10.966</td>    </tr>    <tr>      <th>2002</th>      <td>12.033</td>    </tr>    <tr>      <th>2003</th>      <td>13.582</td>    </tr>    <tr>      <th>2004</th>      <td>15.988</td>    </tr>    <tr>      <th>2005</th>      <td>18.494</td>    </tr>    <tr>      <th>...</th>      <td>...</td>    </tr>    <tr>      <th>2011</th>      <td>47.311</td>    </tr>    <tr>      <th>2012</th>      <td>51.947</td>    </tr>    <tr>      <th>2013</th>      <td>58.802</td>    </tr>    <tr>      <th>2014</th>      <td>63.646</td>    </tr>    <tr>      <th>2015</th>      <td>67.671</td>    </tr>  </tbody></table><p>15 rows × 1 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YGDPds[<span class="string">&#x27;定基数&#x27;</span>]= YGDP-YGDP[:<span class="number">1</span>].values; YGDPds </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>GDP</th>      <th>定基数</th>    </tr>    <tr>      <th>Year</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2001</th>      <td>10.966</td>      <td>0.000</td>    </tr>    <tr>      <th>2002</th>      <td>12.033</td>      <td>1.067</td>    </tr>    <tr>      <th>2003</th>      <td>13.582</td>      <td>2.616</td>    </tr>    <tr>      <th>2004</th>      <td>15.988</td>      <td>5.022</td>    </tr>    <tr>      <th>2005</th>      <td>18.494</td>      <td>7.528</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2011</th>      <td>47.311</td>      <td>36.345</td>    </tr>    <tr>      <th>2012</th>      <td>51.947</td>      <td>40.981</td>    </tr>    <tr>      <th>2013</th>      <td>58.802</td>      <td>47.836</td>    </tr>    <tr>      <th>2014</th>      <td>63.646</td>      <td>52.680</td>    </tr>    <tr>      <th>2015</th>      <td>67.671</td>      <td>56.705</td>    </tr>  </tbody></table><p>15 rows × 2 columns</p></div><p>（2）环比增长量 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YGDPds[<span class="string">&#x27;环基数&#x27;</span>]= YGDP-YGDP.shift(<span class="number">1</span>); YGDPds <span class="comment">#shift(1)向下移动1个单位 </span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>GDP</th>      <th>定基数</th>      <th>环基数</th>    </tr>    <tr>      <th>Year</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2001</th>      <td>10.966</td>      <td>0.000</td>      <td>NaN</td>    </tr>    <tr>      <th>2002</th>      <td>12.033</td>      <td>1.067</td>      <td>1.067</td>    </tr>    <tr>      <th>2003</th>      <td>13.582</td>      <td>2.616</td>      <td>1.549</td>    </tr>    <tr>      <th>2004</th>      <td>15.988</td>      <td>5.022</td>      <td>2.406</td>    </tr>    <tr>      <th>2005</th>      <td>18.494</td>      <td>7.528</td>      <td>2.506</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2011</th>      <td>47.311</td>      <td>36.345</td>      <td>7.160</td>    </tr>    <tr>      <th>2012</th>      <td>51.947</td>      <td>40.981</td>      <td>4.636</td>    </tr>    <tr>      <th>2013</th>      <td>58.802</td>      <td>47.836</td>      <td>6.855</td>    </tr>    <tr>      <th>2014</th>      <td>63.646</td>      <td>52.680</td>      <td>4.844</td>    </tr>    <tr>      <th>2015</th>      <td>67.671</td>      <td>56.705</td>      <td>4.025</td>    </tr>  </tbody></table><p>15 rows × 3 columns</p></div><p>8.1.2.2 相对动态数列</p><p>（1）定基发展速度（定基比） </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YGDPds[<span class="string">&#x27;定基比&#x27;</span>]=YGDP/YGDP[:<span class="number">1</span>].values; YGDPds </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>GDP</th>      <th>定基数</th>      <th>环基数</th>      <th>定基比</th>    </tr>    <tr>      <th>Year</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2001</th>      <td>10.966</td>      <td>0.000</td>      <td>NaN</td>      <td>1.0000</td>    </tr>    <tr>      <th>2002</th>      <td>12.033</td>      <td>1.067</td>      <td>1.067</td>      <td>1.0973</td>    </tr>    <tr>      <th>2003</th>      <td>13.582</td>      <td>2.616</td>      <td>1.549</td>      <td>1.2386</td>    </tr>    <tr>      <th>2004</th>      <td>15.988</td>      <td>5.022</td>      <td>2.406</td>      <td>1.4580</td>    </tr>    <tr>      <th>2005</th>      <td>18.494</td>      <td>7.528</td>      <td>2.506</td>      <td>1.6865</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2011</th>      <td>47.311</td>      <td>36.345</td>      <td>7.160</td>      <td>4.3143</td>    </tr>    <tr>      <th>2012</th>      <td>51.947</td>      <td>40.981</td>      <td>4.636</td>      <td>4.7371</td>    </tr>    <tr>      <th>2013</th>      <td>58.802</td>      <td>47.836</td>      <td>6.855</td>      <td>5.3622</td>    </tr>    <tr>      <th>2014</th>      <td>63.646</td>      <td>52.680</td>      <td>4.844</td>      <td>5.8039</td>    </tr>    <tr>      <th>2015</th>      <td>67.671</td>      <td>56.705</td>      <td>4.025</td>      <td>6.1710</td>    </tr>  </tbody></table><p>15 rows × 4 columns</p></div><p>（2）环比发展速度（环基比） </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YGDPds[<span class="string">&#x27;环基比&#x27;</span>]=YGDP/YGDP.shift(<span class="number">1</span>);YGDPds </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>GDP</th>      <th>定基数</th>      <th>环基数</th>      <th>定基比</th>      <th>环基比</th>    </tr>    <tr>      <th>Year</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2001</th>      <td>10.966</td>      <td>0.000</td>      <td>NaN</td>      <td>1.0000</td>      <td>NaN</td>    </tr>    <tr>      <th>2002</th>      <td>12.033</td>      <td>1.067</td>      <td>1.067</td>      <td>1.0973</td>      <td>1.0973</td>    </tr>    <tr>      <th>2003</th>      <td>13.582</td>      <td>2.616</td>      <td>1.549</td>      <td>1.2386</td>      <td>1.1287</td>    </tr>    <tr>      <th>2004</th>      <td>15.988</td>      <td>5.022</td>      <td>2.406</td>      <td>1.4580</td>      <td>1.1771</td>    </tr>    <tr>      <th>2005</th>      <td>18.494</td>      <td>7.528</td>      <td>2.506</td>      <td>1.6865</td>      <td>1.1567</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2011</th>      <td>47.311</td>      <td>36.345</td>      <td>7.160</td>      <td>4.3143</td>      <td>1.1783</td>    </tr>    <tr>      <th>2012</th>      <td>51.947</td>      <td>40.981</td>      <td>4.636</td>      <td>4.7371</td>      <td>1.0980</td>    </tr>    <tr>      <th>2013</th>      <td>58.802</td>      <td>47.836</td>      <td>6.855</td>      <td>5.3622</td>      <td>1.1320</td>    </tr>    <tr>      <th>2014</th>      <td>63.646</td>      <td>52.680</td>      <td>4.844</td>      <td>5.8039</td>      <td>1.0824</td>    </tr>    <tr>      <th>2015</th>      <td>67.671</td>      <td>56.705</td>      <td>4.025</td>      <td>6.1710</td>      <td>1.0632</td>    </tr>  </tbody></table><p>15 rows × 5 columns</p></div><p>8.1.2.3 平均动态数列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">len</span>(YGDP);n</span><br></pre></td></tr></table></figure><pre><code>15</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ADR=(YGDP[-<span class="number">1</span>:].values/YGDP[:<span class="number">1</span>].values)**(<span class="number">1</span>/n)</span><br><span class="line">print(<span class="string">&#x27;\n  平均增长量 = %5.3f&#x27;</span> % ADR)</span><br></pre></td></tr></table></figure><pre><code>  平均增长量 = 1.129</code></pre><h2 id="8-2-动态数列预测分析"><a href="#8-2-动态数列预测分析" class="headerlink" title="8.2 动态数列预测分析"></a>8.2 动态数列预测分析</h2><h3 id="8-2-1-趋势预测模型构建"><a href="#8-2-1-趋势预测模型构建" class="headerlink" title="8.2.1 趋势预测模型构建"></a>8.2.1 趋势预测模型构建</h3><p>8.2.1.1 趋势模型的类型</p><p>（1）一次模型：y = a + bx</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">n=<span class="number">20</span></span><br><span class="line">x=np.arange(n)+<span class="number">1</span>       <span class="comment">#生成1:n的等差数列</span></span><br><span class="line">y=<span class="number">1</span>+<span class="number">2</span>*x    </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line">plt.plot(x,y,<span class="string">&#x27;o-&#x27;</span>);    <span class="comment">#点线图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071612495.png" alt="png"></p><p>（2）对数模型：y = a + b*log x </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y=<span class="number">1</span>+<span class="number">0.2</span>*np.log(x)</span><br><span class="line">plt.plot(x,y,<span class="string">&#x27;o-&#x27;</span>); </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071611651.png" alt="png"></p><p>（3）指数模型：y=ae^(bx) </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y=<span class="number">0.2</span>*np.exp(<span class="number">0.1</span>*x)</span><br><span class="line">plt.plot(x,y,<span class="string">&#x27;o-&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071612246.png" alt="png"></p><p>（4）幂函数：y=ax^b </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y=<span class="number">0.2</span>*x**<span class="number">0.1</span></span><br><span class="line">plt.plot(x,y,<span class="string">&#x27;o-&#x27;</span>); </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071612026.png" alt="png"></p><p>8.2.1.2  最优模型选择准则</p><p>8.2.1.3 趋势模型的建立</p><p>（1）线性模型 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm </span><br><span class="line">Yt=YGDP       <span class="comment">#Yt=YGDP=QTdata.groupby([&#x27;Year&#x27;])[&#x27;GDP&#x27;].sum()</span></span><br><span class="line">plt.plot(Yt,<span class="string">&#x27;.&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0xdc062e0&gt;]</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071612297.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Xt=np.arange(<span class="built_in">len</span>(Yt))+<span class="number">1</span>; <span class="comment">#自变量序列1:n，建模时最好不直接用年份</span></span><br><span class="line">Xt</span><br></pre></td></tr></table></figure><pre><code>array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yt_L1=sm.OLS(Yt,sm.add_constant(Xt)).fit(); </span><br><span class="line">Yt_L1.summary().tables[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>C:\Users\kit\miniconda3\lib\site-packages\scipy\stats\stats.py:1541: UserWarning: kurtosistest only valid for n&gt;=20 ... continuing anyway, n=15  warnings.warn(&quot;kurtosistest only valid for n&gt;=20 ... continuing &quot;</code></pre><table class="simpletable"><tr>    <td></td>       <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  </tr><tr>  <th>const</th> <td>   -0.2149</td> <td>    1.939</td> <td>   -0.111</td> <td> 0.913</td> <td>   -4.404</td> <td>    3.974</td></tr><tr>  <th>x1</th>    <td>    4.3127</td> <td>    0.213</td> <td>   20.224</td> <td> 0.000</td> <td>    3.852</td> <td>    4.773</td></tr></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构建一个简单的趋势函数来进行模型选择。</span></span><br><span class="line"><span class="keyword">import</span> warnings <span class="comment">#忽视警告信息,当例数较少时会有警告 </span></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trendmodel</span>(<span class="params">y,x</span>):</span> <span class="comment">#定义直线回归模型, x为自变量, y为因变量</span></span><br><span class="line">    fm=sm.OLS(y,sm.add_constant(x)).fit() </span><br><span class="line">    sfm=fm.summary2() </span><br><span class="line">    print(<span class="string">&quot;模型检验:\n&quot;</span>,sfm.tables[<span class="number">1</span>]) </span><br><span class="line">    R2=np.corrcoef(x,y)[<span class="number">0</span>,<span class="number">1</span>]**<span class="number">2</span> <span class="comment">#相关系数平方=sfm.tables[0][1][6])</span></span><br><span class="line">    print(<span class="string">&quot;决定系数：%5.4f&quot;</span>%R2)   </span><br><span class="line">    <span class="keyword">return</span> fm.fittedvalues</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L1=trendmodel(Yt,Xt); </span><br><span class="line">plt.plot(Yt,<span class="string">&#x27;o&#x27;</span>,L1,<span class="string">&#x27;r-&#x27;</span>); </span><br></pre></td></tr></table></figure><pre><code>模型检验:         Coef.  Std.Err.        t       P&gt;|t|  [0.025  0.975]const -0.2149    1.9389  -0.1108  9.1344e-01 -4.4035  3.9738x1     4.3127    0.2132  20.2240  3.3003e-11  3.8520  4.7734决定系数：0.9692</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071612232.png" alt="png"></p><p>（2）指数曲线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L2=trendmodel(np.log(Yt),np.log(Xt));      <span class="comment">#对Yt取对数</span></span><br><span class="line">plt.plot(Yt,<span class="string">&#x27;o&#x27;</span>,np.exp(L2),<span class="string">&#x27;r-&#x27;</span>);  <span class="comment">#对Yt的拟合值取反对数</span></span><br></pre></td></tr></table></figure><pre><code>模型检验:         Coef.  Std.Err.        t       P&gt;|t|  [0.025  0.975]const  1.9528    0.1442  13.5470  4.8185e-09  1.6414  2.2642x1     0.7585    0.0718  10.5627  9.4984e-08  0.6033  0.9136决定系数：0.8956</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071611145.png" alt="png"></p><h3 id="8-2-2-平滑预测方法"><a href="#8-2-2-平滑预测方法" class="headerlink" title="8.2.2 平滑预测方法"></a>8.2.2 平滑预测方法</h3><p>8.2.2.1 移动平均预测法 </p><p>（1）简单平均法 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Qt=QTdata.GDP;Qt</span><br></pre></td></tr></table></figure><pre><code>YQ2001Q1     2.3302001Q2     2.5652001Q3     2.6872001Q4     3.3842002Q1     2.536           ...  2014Q4    21.6562015Q1    14.0672015Q2    17.3512015Q3    17.3162015Q4    18.937Name: GDP, Length: 60, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Qt.plot()</span><br></pre></td></tr></table></figure><pre><code>&lt;AxesSubplot:xlabel=&#39;YQ&#39;&gt;</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071612184.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Qt.mean() <span class="comment">#季节数据的平均 </span></span><br></pre></td></tr></table></figure><pre><code>8.571633333333333</code></pre><p>（2）简单移动平均法 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QtM=pd.DataFrame(Qt);QtM</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>GDP</th>    </tr>    <tr>      <th>YQ</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2001Q1</th>      <td>2.330</td>    </tr>    <tr>      <th>2001Q2</th>      <td>2.565</td>    </tr>    <tr>      <th>2001Q3</th>      <td>2.687</td>    </tr>    <tr>      <th>2001Q4</th>      <td>3.384</td>    </tr>    <tr>      <th>2002Q1</th>      <td>2.536</td>    </tr>    <tr>      <th>...</th>      <td>...</td>    </tr>    <tr>      <th>2014Q4</th>      <td>21.656</td>    </tr>    <tr>      <th>2015Q1</th>      <td>14.067</td>    </tr>    <tr>      <th>2015Q2</th>      <td>17.351</td>    </tr>    <tr>      <th>2015Q3</th>      <td>17.316</td>    </tr>    <tr>      <th>2015Q4</th>      <td>18.937</td>    </tr>  </tbody></table><p>60 rows × 1 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QtM[<span class="string">&#x27;M2&#x27;</span>]=Qt.rolling(<span class="number">3</span>).mean(); <span class="comment">#2 阶移动平均 </span></span><br><span class="line">QtM.plot()</span><br></pre></td></tr></table></figure><pre><code>&lt;AxesSubplot:xlabel=&#39;YQ&#39;&gt;</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071612165.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QtM[<span class="string">&#x27;M4&#x27;</span>]=Qt.rolling(<span class="number">5</span>).mean(); <span class="comment">#4 阶移动平均 </span></span><br><span class="line"><span class="comment">#QtM</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QtM.plot();</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071613933.png" alt="png"></p><p>（3）加权移动平均法</p><p>8.2.2.2 指数平滑预测法 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QtE=pd.DataFrame(Qt); </span><br><span class="line">QtE[<span class="string">&#x27;E03&#x27;</span>]=Qt.ewm(alpha=<span class="number">0.3</span>).mean(); <span class="comment">#平滑系数=0.3 </span></span><br><span class="line">QtE.plot()</span><br></pre></td></tr></table></figure><pre><code>&lt;AxesSubplot:xlabel=&#39;YQ&#39;&gt;</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071613693.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QtE[<span class="string">&#x27;E08&#x27;</span>]=Qt.ewm(alpha=<span class="number">0.8</span>).mean(); <span class="comment">#平滑系数=0.8 </span></span><br><span class="line">QtE.plot()</span><br></pre></td></tr></table></figure><pre><code>&lt;AxesSubplot:xlabel=&#39;YQ&#39;&gt;</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071613963.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QtE.plot();</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071613756.png" alt="png"></p><h2 id="8-3-时间序列数据的可视化分析"><a href="#8-3-时间序列数据的可视化分析" class="headerlink" title="8.3  时间序列数据的可视化分析"></a>8.3  时间序列数据的可视化分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">stock=pd.read_excel(<span class="string">&#x27;DaPy_data.xlsx&#x27;</span>,<span class="string">&#x27;Stock&#x27;</span>,index_col=<span class="number">0</span>); </span><br><span class="line">stock.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;DatetimeIndex: 3180 entries, 2005-01-03 to 2017-12-29Data columns (total 6 columns): #   Column    Non-Null Count  Dtype  ---  ------    --------------  -----   0   Open      3165 non-null   float64 1   High      3165 non-null   float64 2   Low       3165 non-null   float64 3   Close     3165 non-null   float64 4   Volume    3165 non-null   float64 5   Adjusted  3165 non-null   float64dtypes: float64(6)memory usage: 173.9 KB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stock</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Open</th>      <th>High</th>      <th>Low</th>      <th>Close</th>      <th>Volume</th>      <th>Adjusted</th>    </tr>    <tr>      <th>date</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2005-01-03</th>      <td>0.7025</td>      <td>0.7173</td>      <td>0.7025</td>      <td>0.7130</td>      <td>0.0000e+00</td>      <td>0.6185</td>    </tr>    <tr>      <th>2005-01-04</th>      <td>0.7099</td>      <td>0.7215</td>      <td>0.6941</td>      <td>0.6960</td>      <td>1.0959e+07</td>      <td>0.6038</td>    </tr>    <tr>      <th>2005-01-05</th>      <td>0.6951</td>      <td>0.7082</td>      <td>0.6951</td>      <td>0.7053</td>      <td>6.1651e+06</td>      <td>0.6118</td>    </tr>    <tr>      <th>2005-01-06</th>      <td>0.7023</td>      <td>0.7065</td>      <td>0.6961</td>      <td>0.6968</td>      <td>9.8460e+06</td>      <td>0.6044</td>    </tr>    <tr>      <th>2005-01-07</th>      <td>0.6960</td>      <td>0.7096</td>      <td>0.6946</td>      <td>0.7020</td>      <td>1.3667e+07</td>      <td>0.6090</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2017-12-25</th>      <td>12.7300</td>      <td>12.7400</td>      <td>12.2500</td>      <td>12.3800</td>      <td>6.5682e+07</td>      <td>12.3800</td>    </tr>    <tr>      <th>2017-12-26</th>      <td>12.4600</td>      <td>12.5400</td>      <td>12.3700</td>      <td>12.5200</td>      <td>3.0913e+07</td>      <td>12.5200</td>    </tr>    <tr>      <th>2017-12-27</th>      <td>12.5400</td>      <td>12.5700</td>      <td>12.1000</td>      <td>12.1800</td>      <td>5.3813e+07</td>      <td>12.1800</td>    </tr>    <tr>      <th>2017-12-28</th>      <td>12.2000</td>      <td>12.2800</td>      <td>12.0600</td>      <td>12.1800</td>      <td>3.3693e+07</td>      <td>12.1800</td>    </tr>    <tr>      <th>2017-12-29</th>      <td>12.1800</td>      <td>12.3300</td>      <td>12.1400</td>      <td>12.2900</td>      <td>2.5372e+07</td>      <td>12.2900</td>    </tr>  </tbody></table><p>3180 rows × 6 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stock=stock.dropna() <span class="comment">#由于数据中有 15 个缺失值，故须删除缺失数据 NA </span></span><br><span class="line">stock<span class="comment">#.info()</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Open</th>      <th>High</th>      <th>Low</th>      <th>Close</th>      <th>Volume</th>      <th>Adjusted</th>    </tr>    <tr>      <th>date</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2005-01-03</th>      <td>0.7025</td>      <td>0.7173</td>      <td>0.7025</td>      <td>0.7130</td>      <td>0.0000e+00</td>      <td>0.6185</td>    </tr>    <tr>      <th>2005-01-04</th>      <td>0.7099</td>      <td>0.7215</td>      <td>0.6941</td>      <td>0.6960</td>      <td>1.0959e+07</td>      <td>0.6038</td>    </tr>    <tr>      <th>2005-01-05</th>      <td>0.6951</td>      <td>0.7082</td>      <td>0.6951</td>      <td>0.7053</td>      <td>6.1651e+06</td>      <td>0.6118</td>    </tr>    <tr>      <th>2005-01-06</th>      <td>0.7023</td>      <td>0.7065</td>      <td>0.6961</td>      <td>0.6968</td>      <td>9.8460e+06</td>      <td>0.6044</td>    </tr>    <tr>      <th>2005-01-07</th>      <td>0.6960</td>      <td>0.7096</td>      <td>0.6946</td>      <td>0.7020</td>      <td>1.3667e+07</td>      <td>0.6090</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2017-12-25</th>      <td>12.7300</td>      <td>12.7400</td>      <td>12.2500</td>      <td>12.3800</td>      <td>6.5682e+07</td>      <td>12.3800</td>    </tr>    <tr>      <th>2017-12-26</th>      <td>12.4600</td>      <td>12.5400</td>      <td>12.3700</td>      <td>12.5200</td>      <td>3.0913e+07</td>      <td>12.5200</td>    </tr>    <tr>      <th>2017-12-27</th>      <td>12.5400</td>      <td>12.5700</td>      <td>12.1000</td>      <td>12.1800</td>      <td>5.3813e+07</td>      <td>12.1800</td>    </tr>    <tr>      <th>2017-12-28</th>      <td>12.2000</td>      <td>12.2800</td>      <td>12.0600</td>      <td>12.1800</td>      <td>3.3693e+07</td>      <td>12.1800</td>    </tr>    <tr>      <th>2017-12-29</th>      <td>12.1800</td>      <td>12.3300</td>      <td>12.1400</td>      <td>12.2900</td>      <td>2.5372e+07</td>      <td>12.2900</td>    </tr>  </tbody></table><p>3165 rows × 6 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stock.describe().<span class="built_in">round</span>(<span class="number">2</span>)  <span class="comment">#round(stock.describe(),3) </span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Open</th>      <th>High</th>      <th>Low</th>      <th>Close</th>      <th>Volume</th>      <th>Adjusted</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>3165.00</td>      <td>3165.00</td>      <td>3165.00</td>      <td>3165.00</td>      <td>3.1650e+03</td>      <td>3165.00</td>    </tr>    <tr>      <th>mean</th>      <td>9.22</td>      <td>9.42</td>      <td>9.05</td>      <td>9.23</td>      <td>7.1767e+07</td>      <td>8.91</td>    </tr>    <tr>      <th>std</th>      <td>4.22</td>      <td>4.31</td>      <td>4.12</td>      <td>4.22</td>      <td>9.3363e+07</td>      <td>4.10</td>    </tr>    <tr>      <th>min</th>      <td>0.70</td>      <td>0.71</td>      <td>0.68</td>      <td>0.70</td>      <td>0.0000e+00</td>      <td>0.60</td>    </tr>    <tr>      <th>25%</th>      <td>6.73</td>      <td>6.89</td>      <td>6.63</td>      <td>6.75</td>      <td>2.2869e+07</td>      <td>6.55</td>    </tr>    <tr>      <th>50%</th>      <td>10.34</td>      <td>10.54</td>      <td>10.15</td>      <td>10.35</td>      <td>4.0174e+07</td>      <td>9.96</td>    </tr>    <tr>      <th>75%</th>      <td>12.03</td>      <td>12.28</td>      <td>11.86</td>      <td>12.05</td>      <td>7.7414e+07</td>      <td>11.67</td>    </tr>    <tr>      <th>max</th>      <td>22.28</td>      <td>23.54</td>      <td>21.75</td>      <td>22.80</td>      <td>8.5600e+08</td>      <td>22.52</td>    </tr>  </tbody></table></div><h3 id="8-3-1-股票数据可视化分析"><a href="#8-3-1-股票数据可视化分析" class="headerlink" title="8.3.1 股票数据可视化分析"></a>8.3.1 股票数据可视化分析</h3><p>8.3.1.1 股票数据的选取与图示 </p><p>（1）数据选取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stock[[<span class="string">&#x27;Close&#x27;</span>,<span class="string">&#x27;Volume&#x27;</span>]]      <span class="comment">#收盘价与成交量数据</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Close</th>      <th>Volume</th>    </tr>    <tr>      <th>date</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2005-01-03</th>      <td>0.7130</td>      <td>0.0000e+00</td>    </tr>    <tr>      <th>2005-01-04</th>      <td>0.6960</td>      <td>1.0959e+07</td>    </tr>    <tr>      <th>2005-01-05</th>      <td>0.7053</td>      <td>6.1651e+06</td>    </tr>    <tr>      <th>2005-01-06</th>      <td>0.6968</td>      <td>9.8460e+06</td>    </tr>    <tr>      <th>2005-01-07</th>      <td>0.7020</td>      <td>1.3667e+07</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2017-12-25</th>      <td>12.3800</td>      <td>6.5682e+07</td>    </tr>    <tr>      <th>2017-12-26</th>      <td>12.5200</td>      <td>3.0913e+07</td>    </tr>    <tr>      <th>2017-12-27</th>      <td>12.1800</td>      <td>5.3813e+07</td>    </tr>    <tr>      <th>2017-12-28</th>      <td>12.1800</td>      <td>3.3693e+07</td>    </tr>    <tr>      <th>2017-12-29</th>      <td>12.2900</td>      <td>2.5372e+07</td>    </tr>  </tbody></table><p>3165 rows × 2 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stock[<span class="string">&#x27;2015&#x27;</span>][<span class="string">&#x27;Close&#x27;</span>]         <span class="comment">#年度收盘价数据</span></span><br></pre></td></tr></table></figure><pre><code>date2015-01-05     9.362015-01-06     9.482015-01-07     9.342015-01-08     9.532015-01-09     9.37              ...  2015-12-25    14.002015-12-28    13.512015-12-29    13.682015-12-30    13.752015-12-31    13.45Name: Close, Length: 244, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stock[<span class="string">&#x27;2017-12&#x27;</span>][<span class="string">&#x27;Close&#x27;</span>]      <span class="comment">#月度价格</span></span><br><span class="line"><span class="comment">#plt.plot(df.index,df.values);  #stock[&#x27;2015&#x27;][&#x27;Close&#x27;].plot();  </span></span><br></pre></td></tr></table></figure><pre><code>date2017-12-01    12.012017-12-04    12.052017-12-05    11.882017-12-06    12.332017-12-07    12.21              ...  2017-12-25    12.382017-12-26    12.522017-12-27    12.182017-12-28    12.182017-12-29    12.29Name: Close, Length: 21, dtype: float64</code></pre><p>（2）价格趋势图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stock[<span class="string">&#x27;Close&#x27;</span>].plot();  <span class="comment">#收盘价数据框图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071613189.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">YC=stock[<span class="string">&#x27;2015&#x27;</span>][<span class="string">&#x27;Close&#x27;</span>];            <span class="comment">#年度收盘价数据</span></span><br><span class="line">YC.index=YC.index.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>);  <span class="comment">#将横坐标设置为年-月格式</span></span><br><span class="line">YC.plot();</span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071611564.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stock[<span class="string">&#x27;Volume&#x27;</span>].hist();  <span class="comment">#成交量分布情况 </span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071611630.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CV=stock[[<span class="string">&#x27;Close&#x27;</span>,<span class="string">&#x27;Volume&#x27;</span>]];CV.plot()         <span class="comment">#收盘价和成交量数据</span></span><br></pre></td></tr></table></figure><pre><code>&lt;AxesSubplot:xlabel=&#39;date&#39;&gt;</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071613849.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CV.index=CV.index.strftime(<span class="string">&#x27;%Y&#x27;</span>);     <span class="comment">#将横坐标设置为年格式</span></span><br><span class="line">CV.plot(secondary_y=<span class="string">&#x27;Volume&#x27;</span>);        <span class="comment">#右坐标轴绘制成交量 </span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071611841.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">YCV=stock[<span class="string">&#x27;2015&#x27;</span>][[<span class="string">&#x27;Close&#x27;</span>,<span class="string">&#x27;Volume&#x27;</span>]]     <span class="comment">#年度收盘价和成交量数据</span></span><br><span class="line">YCV.index=YCV.index.strftime(<span class="string">&#x27;%Y-%m&#x27;</span>); <span class="comment">#将横坐标设置为年-月-日格式</span></span><br><span class="line">YCV.plot(secondary_y=<span class="string">&#x27;Volume&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071611848.png" alt="png"></p><p>8.3.1.2  股票数据的趋势图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SC=stock[<span class="string">&#x27;2015&#x27;</span>][<span class="string">&#x27;Close&#x27;</span>]; SC           <span class="comment">#2015年收盘价数据  </span></span><br></pre></td></tr></table></figure><pre><code>date2015-01-05     9.362015-01-06     9.482015-01-07     9.342015-01-08     9.532015-01-09     9.37              ...  2015-12-25    14.002015-12-28    13.512015-12-29    13.682015-12-30    13.752015-12-31    13.45Name: Close, Length: 244, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SCM=pd.DataFrame(SC);SCM                <span class="comment">#构建数据框</span></span><br><span class="line">SCM[<span class="string">&#x27;MA5&#x27;</span>]=SC.rolling(<span class="number">6</span>).mean();        <span class="comment">#5日移动平均 </span></span><br><span class="line">SCM[<span class="string">&#x27;MA20&#x27;</span>]=SC.rolling(<span class="number">21</span>).mean();      <span class="comment">#20日移动平均 </span></span><br><span class="line">SCM[<span class="string">&#x27;MA60&#x27;</span>]=SC.rolling(<span class="number">61</span>).mean();      <span class="comment">#60日移动平均</span></span><br><span class="line">SCM.index=SCM.index.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>);  <span class="comment">#设定时间轴：月-天</span></span><br><span class="line">SCM.plot(figsize=(<span class="number">10</span>,<span class="number">6</span>),grid=<span class="literal">True</span>); <span class="comment"># 移动平均线 </span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071613677.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SCM.plot(subplots=<span class="literal">False</span>,figsize=(<span class="number">12</span>,<span class="number">7</span>),grid=<span class="literal">True</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071614519.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SCM.plot(subplots=<span class="literal">True</span>,figsize=(<span class="number">12</span>,<span class="number">14</span>),grid=<span class="literal">True</span>); </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071611895.png" alt="png"></p><p>8.3.1.3  股票数据的K线图</p><blockquote><ul><li><a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></li><li><a href="https://blog.csdn.net/qq_41437512/article/details/105319421">https://blog.csdn.net/qq_41437512/article/details/105319421</a></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!pip install mplfinance --upgrade </span></span><br></pre></td></tr></table></figure><p>（1）分析用数据框构建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OHLCV=stock[<span class="string">&#x27;2015-10&#x27;</span>:<span class="string">&#x27;2015-12&#x27;</span>][[<span class="string">&#x27;Open&#x27;</span>,<span class="string">&#x27;High&#x27;</span>,<span class="string">&#x27;Low&#x27;</span>,<span class="string">&#x27;Close&#x27;</span>,<span class="string">&#x27;Volume&#x27;</span>]];OHLCV</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Open</th>      <th>High</th>      <th>Low</th>      <th>Close</th>      <th>Volume</th>    </tr>    <tr>      <th>date</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2015-10-08</th>      <td>12.12</td>      <td>12.94</td>      <td>12.12</td>      <td>12.70</td>      <td>2.0044e+08</td>    </tr>    <tr>      <th>2015-10-09</th>      <td>12.72</td>      <td>13.32</td>      <td>12.61</td>      <td>13.05</td>      <td>2.1790e+08</td>    </tr>    <tr>      <th>2015-10-12</th>      <td>13.10</td>      <td>14.18</td>      <td>13.03</td>      <td>13.90</td>      <td>3.4242e+08</td>    </tr>    <tr>      <th>2015-10-13</th>      <td>13.71</td>      <td>13.93</td>      <td>13.62</td>      <td>13.85</td>      <td>1.9723e+08</td>    </tr>    <tr>      <th>2015-10-14</th>      <td>13.75</td>      <td>14.47</td>      <td>13.74</td>      <td>14.00</td>      <td>3.0091e+08</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2015-12-25</th>      <td>14.00</td>      <td>14.00</td>      <td>14.00</td>      <td>14.00</td>      <td>0.0000e+00</td>    </tr>    <tr>      <th>2015-12-28</th>      <td>13.92</td>      <td>14.00</td>      <td>13.50</td>      <td>13.51</td>      <td>1.1940e+08</td>    </tr>    <tr>      <th>2015-12-29</th>      <td>13.50</td>      <td>13.76</td>      <td>13.38</td>      <td>13.68</td>      <td>7.9428e+07</td>    </tr>    <tr>      <th>2015-12-30</th>      <td>13.69</td>      <td>13.87</td>      <td>13.64</td>      <td>13.75</td>      <td>6.3783e+07</td>    </tr>    <tr>      <th>2015-12-31</th>      <td>13.79</td>      <td>13.79</td>      <td>13.35</td>      <td>13.45</td>      <td>6.9984e+07</td>    </tr>  </tbody></table><p>61 rows × 5 columns</p></div><p>（2）K线图的绘制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> mplfinance <span class="keyword">as</span> mpf         <span class="comment">#加载matplotlib的金融分析模块</span></span><br><span class="line">mpf.plot(OHLCV,<span class="built_in">type</span>=<span class="string">&#x27;ohlc&#x27;</span>);     <span class="comment">#ohlc图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071611048.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mpf.plot(OHLCV,<span class="built_in">type</span>=<span class="string">&#x27;candle&#x27;</span>);   <span class="comment">#candle图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071614180.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mpf.plot(OHLCV,<span class="built_in">type</span>=<span class="string">&#x27;candle&#x27;</span>,volume=<span class="literal">True</span>) <span class="comment">#价格candle图及成交量直方图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071611442.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mpf.plot(OHLCV,<span class="built_in">type</span>=<span class="string">&#x27;candle&#x27;</span>,volume=<span class="literal">True</span>,mav=(<span class="number">3</span>,<span class="number">6</span>)) <span class="comment">#增加3与6日移动平均线</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071611683.png" alt="png"></p><h3 id="8-3-2-股票收益率分析"><a href="#8-3-2-股票收益率分析" class="headerlink" title="8.3.2 股票收益率分析"></a>8.3.2 股票收益率分析</h3><p>8.3.2.1  日收益率的计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Return</span>(<span class="params">Yt</span>):</span>           <span class="comment">#计算收益率函数</span></span><br><span class="line">    Rt=Yt/Yt.shift(<span class="number">1</span>)-<span class="number">1</span>   <span class="comment">#Yt_1=Yt.shift(1)</span></span><br><span class="line">    <span class="keyword">return</span>(Rt)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SA=stock[<span class="string">&#x27;2015&#x27;</span>][<span class="string">&#x27;Adjusted&#x27;</span>]; SA[:<span class="number">10</span>]  <span class="comment">#2015年调整收盘价</span></span><br><span class="line">SA_R=Return(SA); SA_R.plot()</span><br></pre></td></tr></table></figure><pre><code>&lt;AxesSubplot:xlabel=&#39;date&#39;&gt;</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071614879.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SA_R.index=SA_R.index.strftime(<span class="string">&#x27;%m-%d&#x27;</span>);  <span class="comment">#设定时间轴：月-天</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span>; <span class="comment">#正常显示图中正负号</span></span><br><span class="line">plt.stem(SA_R);  <span class="comment">#SA_R.plot(x=SA_R.index).axhline(y=0);</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071614631.png" alt="png"></p><p>8.3.2.2 年度收益率计算 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YR=pd.DataFrame(&#123;<span class="string">&#x27;Year&#x27;</span>:stock.index.year,<span class="string">&#x27;Adjusted&#x27;</span>:</span><br><span class="line">                 Return(stock[<span class="string">&#x27;Adjusted&#x27;</span>])&#125;);YR</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Year</th>      <th>Adjusted</th>    </tr>    <tr>      <th>date</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2005-01-03</th>      <td>2005</td>      <td>NaN</td>    </tr>    <tr>      <th>2005-01-04</th>      <td>2005</td>      <td>-0.0238</td>    </tr>    <tr>      <th>2005-01-05</th>      <td>2005</td>      <td>0.0133</td>    </tr>    <tr>      <th>2005-01-06</th>      <td>2005</td>      <td>-0.0120</td>    </tr>    <tr>      <th>2005-01-07</th>      <td>2005</td>      <td>0.0075</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2017-12-25</th>      <td>2017</td>      <td>-0.0290</td>    </tr>    <tr>      <th>2017-12-26</th>      <td>2017</td>      <td>0.0113</td>    </tr>    <tr>      <th>2017-12-27</th>      <td>2017</td>      <td>-0.0272</td>    </tr>    <tr>      <th>2017-12-28</th>      <td>2017</td>      <td>0.0000</td>    </tr>    <tr>      <th>2017-12-29</th>      <td>2017</td>      <td>0.0090</td>    </tr>  </tbody></table><p>3165 rows × 2 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YRm=YR.groupby([<span class="string">&#x27;Year&#x27;</span>]).mean();YRm   <span class="comment">#年度平均收益率</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Adjusted</th>    </tr>    <tr>      <th>Year</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2005</th>      <td>0.0023</td>    </tr>    <tr>      <th>2006</th>      <td>0.0069</td>    </tr>    <tr>      <th>2007</th>      <td>0.0054</td>    </tr>    <tr>      <th>2008</th>      <td>-0.0021</td>    </tr>    <tr>      <th>2009</th>      <td>0.0027</td>    </tr>    <tr>      <th>...</th>      <td>...</td>    </tr>    <tr>      <th>2013</th>      <td>0.0019</td>    </tr>    <tr>      <th>2014</th>      <td>0.0003</td>    </tr>    <tr>      <th>2015</th>      <td>0.0027</td>    </tr>    <tr>      <th>2016</th>      <td>-0.0004</td>    </tr>    <tr>      <th>2017</th>      <td>0.0005</td>    </tr>  </tbody></table><p>13 rows × 1 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YRm.plot(kind=<span class="string">&#x27;bar&#x27;</span>).axhline(y=<span class="number">0</span>); </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071611263.png" alt="png"></p><p>8.3.2.3 月度收益率计算 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YMR=pd.DataFrame(&#123;<span class="string">&#x27;Year&#x27;</span>:stock.index.year,<span class="string">&#x27;Month&#x27;</span>:stock.index.month,</span><br><span class="line">                  <span class="string">&#x27;Adjusted&#x27;</span>:Return(stock[<span class="string">&#x27;Adjusted&#x27;</span>])&#125;); YMR </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Year</th>      <th>Month</th>      <th>Adjusted</th>    </tr>    <tr>      <th>date</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2005-01-03</th>      <td>2005</td>      <td>1</td>      <td>NaN</td>    </tr>    <tr>      <th>2005-01-04</th>      <td>2005</td>      <td>1</td>      <td>-0.0238</td>    </tr>    <tr>      <th>2005-01-05</th>      <td>2005</td>      <td>1</td>      <td>0.0133</td>    </tr>    <tr>      <th>2005-01-06</th>      <td>2005</td>      <td>1</td>      <td>-0.0120</td>    </tr>    <tr>      <th>2005-01-07</th>      <td>2005</td>      <td>1</td>      <td>0.0075</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2017-12-25</th>      <td>2017</td>      <td>12</td>      <td>-0.0290</td>    </tr>    <tr>      <th>2017-12-26</th>      <td>2017</td>      <td>12</td>      <td>0.0113</td>    </tr>    <tr>      <th>2017-12-27</th>      <td>2017</td>      <td>12</td>      <td>-0.0272</td>    </tr>    <tr>      <th>2017-12-28</th>      <td>2017</td>      <td>12</td>      <td>0.0000</td>    </tr>    <tr>      <th>2017-12-29</th>      <td>2017</td>      <td>12</td>      <td>0.0090</td>    </tr>  </tbody></table><p>3165 rows × 3 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YMRm=YMR.groupby([<span class="string">&#x27;Year&#x27;</span>,<span class="string">&#x27;Month&#x27;</span>]).mean(); YMRm  <span class="comment">#按年度和月度计算平均收益率</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>Adjusted</th>    </tr>    <tr>      <th>Year</th>      <th>Month</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="5" valign="top">2005</th>      <th>1</th>      <td>0.0028</td>    </tr>    <tr>      <th>2</th>      <td>0.0030</td>    </tr>    <tr>      <th>3</th>      <td>0.0066</td>    </tr>    <tr>      <th>4</th>      <td>0.0060</td>    </tr>    <tr>      <th>5</th>      <td>-0.0039</td>    </tr>    <tr>      <th>...</th>      <th>...</th>      <td>...</td>    </tr>    <tr>      <th rowspan="5" valign="top">2017</th>      <th>8</th>      <td>0.0002</td>    </tr>    <tr>      <th>9</th>      <td>0.0048</td>    </tr>    <tr>      <th>10</th>      <td>0.0060</td>    </tr>    <tr>      <th>11</th>      <td>-0.0084</td>    </tr>    <tr>      <th>12</th>      <td>0.0016</td>    </tr>  </tbody></table><p>156 rows × 1 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YMRm.unstack().<span class="built_in">round</span>(<span class="number">4</span>)   <span class="comment">#结果重排</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th colspan="12" halign="left">Adjusted</th>    </tr>    <tr>      <th>Month</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>      <th>5</th>      <th>6</th>      <th>7</th>      <th>8</th>      <th>9</th>      <th>10</th>      <th>11</th>      <th>12</th>    </tr>    <tr>      <th>Year</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2005</th>      <td>0.0028</td>      <td>0.0030</td>      <td>0.0066</td>      <td>0.0060</td>      <td>-0.0039</td>      <td>0.0061</td>      <td>0.0035</td>      <td>-0.0074</td>      <td>0.0067</td>      <td>-0.0010</td>      <td>-0.0015</td>      <td>0.0070</td>    </tr>    <tr>      <th>2006</th>      <td>-0.0018</td>      <td>0.0125</td>      <td>0.0104</td>      <td>0.0075</td>      <td>0.0194</td>      <td>0.0045</td>      <td>-0.0038</td>      <td>0.0022</td>      <td>0.0031</td>      <td>-0.0022</td>      <td>0.0161</td>      <td>0.0131</td>    </tr>    <tr>      <th>2007</th>      <td>0.0208</td>      <td>-0.0101</td>      <td>0.0058</td>      <td>0.0099</td>      <td>0.0147</td>      <td>-0.0033</td>      <td>0.0054</td>      <td>0.0137</td>      <td>-0.0012</td>      <td>-0.0000</td>      <td>-0.0077</td>      <td>0.0124</td>    </tr>    <tr>      <th>2008</th>      <td>-0.0074</td>      <td>0.0055</td>      <td>-0.0072</td>      <td>0.0011</td>      <td>-0.0035</td>      <td>-0.0102</td>      <td>0.0046</td>      <td>-0.0051</td>      <td>-0.0061</td>      <td>-0.0115</td>      <td>0.0159</td>      <td>-0.0003</td>    </tr>    <tr>      <th>2009</th>      <td>-0.0083</td>      <td>0.0018</td>      <td>0.0056</td>      <td>0.0111</td>      <td>-0.0012</td>      <td>0.0048</td>      <td>-0.0014</td>      <td>-0.0045</td>      <td>0.0077</td>      <td>-0.0007</td>      <td>0.0086</td>      <td>0.0041</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2013</th>      <td>0.0037</td>      <td>-0.0046</td>      <td>-0.0016</td>      <td>-0.0044</td>      <td>0.0034</td>      <td>-0.0128</td>      <td>0.0058</td>      <td>0.0165</td>      <td>0.0265</td>      <td>-0.0088</td>      <td>0.0019</td>      <td>-0.0082</td>    </tr>    <tr>      <th>2014</th>      <td>0.0069</td>      <td>-0.0060</td>      <td>-0.0131</td>      <td>-0.0044</td>      <td>0.0046</td>      <td>-0.0025</td>      <td>0.0034</td>      <td>0.0026</td>      <td>0.0073</td>      <td>-0.0019</td>      <td>0.0011</td>      <td>0.0037</td>    </tr>    <tr>      <th>2015</th>      <td>0.0093</td>      <td>0.0065</td>      <td>0.0056</td>      <td>0.0005</td>      <td>0.0192</td>      <td>-0.0077</td>      <td>-0.0026</td>      <td>0.0042</td>      <td>-0.0073</td>      <td>0.0183</td>      <td>-0.0076</td>      <td>-0.0007</td>    </tr>    <tr>      <th>2016</th>      <td>-0.0106</td>      <td>-0.0016</td>      <td>0.0050</td>      <td>-0.0011</td>      <td>-0.0002</td>      <td>-0.0005</td>      <td>-0.0013</td>      <td>0.0023</td>      <td>-0.0011</td>      <td>0.0021</td>      <td>0.0019</td>      <td>-0.0007</td>    </tr>    <tr>      <th>2017</th>      <td>-0.0018</td>      <td>0.0013</td>      <td>-0.0021</td>      <td>-0.0036</td>      <td>0.0025</td>      <td>0.0031</td>      <td>0.0030</td>      <td>0.0002</td>      <td>0.0048</td>      <td>0.0060</td>      <td>-0.0084</td>      <td>0.0016</td>    </tr>  </tbody></table><p>13 rows × 12 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YMRm.plot().axhline(y=<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071611380.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MRm=YMR[<span class="string">&#x27;2005&#x27;</span>].groupby([<span class="string">&#x27;Month&#x27;</span>]).mean();MRm  <span class="comment">#2005年每月平均收益率</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Year</th>      <th>Adjusted</th>    </tr>    <tr>      <th>Month</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>2005.0</td>      <td>0.0028</td>    </tr>    <tr>      <th>2</th>      <td>2005.0</td>      <td>0.0030</td>    </tr>    <tr>      <th>3</th>      <td>2005.0</td>      <td>0.0066</td>    </tr>    <tr>      <th>4</th>      <td>2005.0</td>      <td>0.0060</td>    </tr>    <tr>      <th>5</th>      <td>2005.0</td>      <td>-0.0039</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>8</th>      <td>2005.0</td>      <td>-0.0074</td>    </tr>    <tr>      <th>9</th>      <td>2005.0</td>      <td>0.0067</td>    </tr>    <tr>      <th>10</th>      <td>2005.0</td>      <td>-0.0010</td>    </tr>    <tr>      <th>11</th>      <td>2005.0</td>      <td>-0.0015</td>    </tr>    <tr>      <th>12</th>      <td>2005.0</td>      <td>0.0070</td>    </tr>  </tbody></table><p>12 rows × 2 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MRm[<span class="string">&#x27;Adjusted&#x27;</span>].plot(kind=<span class="string">&#x27;bar&#x27;</span>).axhline(y=<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071614031.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams.update(plt.rcParamsDefault) <span class="comment">#恢复matplotlib原来的显示模式</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第8章-数据的预测分析及可视化&quot;&gt;&lt;a href=&quot;#第8章-数据的预测分析及可视化&quot; class=&quot;headerlink&quot; title=&quot;第8章 数据的预测分析及可视化&quot;&gt;&lt;/a&gt;第8章 数据的预测分析及可视化&lt;/h1&gt;&lt;h2 id=&quot;8-1-动态数列的基本分析</summary>
      
    
    
    
    <category term="《数据可视化》——基于Python的应用" scheme="https://zhangkh.top/categories/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%8B%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="《数据可视化》——基于Python的应用" scheme="https://zhangkh.top/tags/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%8B%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>第7章-数据的模型分析</title>
    <link href="https://zhangkh.top/36060a3b.html"/>
    <id>https://zhangkh.top/36060a3b.html</id>
    <published>2021-12-07T08:04:32.000Z</published>
    <updated>2021-12-07T08:24:24.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第7章-数据的模型分析及可视化"><a href="#第7章-数据的模型分析及可视化" class="headerlink" title="第7章 数据的模型分析及可视化"></a>第7章 数据的模型分析及可视化</h1><h2 id="7-1-线性相关分析模型"><a href="#7-1-线性相关分析模型" class="headerlink" title="7.1 线性相关分析模型"></a>7.1 线性相关分析模型</h2><h3 id="7-1-1-线性相关的概念和模拟"><a href="#7-1-1-线性相关的概念和模拟" class="headerlink" title="7.1.1  线性相关的概念和模拟"></a>7.1.1  线性相关的概念和模拟</h3><p>7.1.1.1 线性相关的概念</p><p>7.1.1.2 线性相关的模拟</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.set_printoptions(precision=<span class="number">4</span>)             <span class="comment">#设置numpy输出精度</span></span><br><span class="line">x=np.linspace(-<span class="number">4</span>,<span class="number">4</span>,<span class="number">20</span>)            <span class="comment">#构建[-4,4]上 x 的数据向量 </span></span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([-4.    , -3.5789, -3.1579, -2.7368, -2.3158, -1.8947, -1.4737,       -1.0526, -0.6316, -0.2105,  0.2105,  0.6316,  1.0526,  1.4737,        1.8947,  2.3158,  2.7368,  3.1579,  3.5789,  4.    ])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)                 <span class="comment">#设置随机种子数以便重复结果</span></span><br><span class="line">e=np.random.randn(<span class="number">20</span>)             <span class="comment">#随机误差数据向量 e~N(0,1)</span></span><br><span class="line">e</span><br></pre></td></tr></table></figure><pre><code>array([ 1.6243, -0.6118, -0.5282, -1.073 ,  0.8654, -2.3015,  1.7448,       -0.7612,  0.319 , -0.2494,  1.4621, -2.0601, -0.3224, -0.3841,        1.1338, -1.0999, -0.1724, -0.8779,  0.0422,  0.5828])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line">y1=x; plt.plot(x,y1,<span class="string">&#x27;o&#x27;</span>);         <span class="comment">#完全正相关 y=x</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071606077.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y2=-x; plt.plot(x,y2,<span class="string">&#x27;o&#x27;</span>);        <span class="comment">#完全负相关 y=-x</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071606216.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y3=x+e; plt.plot(x,y3,<span class="string">&#x27;o&#x27;</span>);       <span class="comment">#正相关 y=x+e</span></span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071606554.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y4=-x+e; plt.plot(x,y4,<span class="string">&#x27;o&#x27;</span>);      <span class="comment">#负相关 y=-x+e</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071606005.png" alt="png"></p><h3 id="7-1-2-相关系数的计算"><a href="#7-1-2-相关系数的计算" class="headerlink" title="7.1.2 相关系数的计算"></a>7.1.2 相关系数的计算</h3><p>7.1.2.1 相关系数的计算公式</p><p>7.1.2.2 相关系数的直观分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fig,ax=plt.subplots(<span class="number">2</span>,<span class="number">2</span>,figsize=(<span class="number">10</span>,<span class="number">8</span>)) <span class="comment">#将上述四个图放到一页上</span></span><br><span class="line">ax[<span class="number">0</span>,<span class="number">0</span>].plot(x,y1,<span class="string">&#x27;o&#x27;</span>); ax[<span class="number">0</span>,<span class="number">1</span>].plot(x,y2,<span class="string">&#x27;o&#x27;</span>)     </span><br><span class="line">ax[<span class="number">1</span>,<span class="number">0</span>].plot(x,y3,<span class="string">&#x27;o&#x27;</span>); ax[<span class="number">1</span>,<span class="number">1</span>].plot(x,y4,<span class="string">&#x27;o&#x27;</span>);   </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071606617.png" alt="png"></p><p>7.1.2.3 相关系数的Python计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x,y1,<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">np.corrcoef([x,y1])</span><br></pre></td></tr></table></figure><pre><code>array([[1., 1.],       [1., 1.]])</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071607526.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x,y2,<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">np.corrcoef([x,y2])</span><br></pre></td></tr></table></figure><pre><code>array([[ 1., -1.],       [-1.,  1.]])</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071607488.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x,y3,<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">np.corrcoef([x,y3])[<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>0.907917278678589</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071607545.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x,y4,<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">np.corrcoef(x,y4)[<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>-0.9140292045707705</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071607196.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.corrcoef([x,y1,y2,y3,y4])  </span><br></pre></td></tr></table></figure><pre><code>array([[ 1.    ,  1.    , -1.    ,  0.9079, -0.914 ],       [ 1.    ,  1.    , -1.    ,  0.9079, -0.914 ],       [-1.    , -1.    ,  1.    , -0.9079,  0.914 ],       [ 0.9079,  0.9079, -0.9079,  1.    , -0.6598],       [-0.914 , -0.914 ,  0.914 , -0.6598,  1.    ]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd   <span class="comment">#构建模拟数据的数据框</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_rows&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">xy=pd.DataFrame(&#123;<span class="string">&#x27;x&#x27;</span>:x,<span class="string">&#x27;y1&#x27;</span>:y1,<span class="string">&#x27;y2&#x27;</span>:y2,<span class="string">&#x27;y3&#x27;</span>:y3,<span class="string">&#x27;y4&#x27;</span>:y4&#125;);xy</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>x</th>      <th>y1</th>      <th>y2</th>      <th>y3</th>      <th>y4</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>-4.000000</td>      <td>-4.000000</td>      <td>4.000000</td>      <td>-2.375655</td>      <td>5.624345</td>    </tr>    <tr>      <th>1</th>      <td>-3.578947</td>      <td>-3.578947</td>      <td>3.578947</td>      <td>-4.190704</td>      <td>2.967191</td>    </tr>    <tr>      <th>2</th>      <td>-3.157895</td>      <td>-3.157895</td>      <td>3.157895</td>      <td>-3.686066</td>      <td>2.629723</td>    </tr>    <tr>      <th>3</th>      <td>-2.736842</td>      <td>-2.736842</td>      <td>2.736842</td>      <td>-3.809811</td>      <td>1.663873</td>    </tr>    <tr>      <th>4</th>      <td>-2.315789</td>      <td>-2.315789</td>      <td>2.315789</td>      <td>-1.450382</td>      <td>3.181197</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>15</th>      <td>2.315789</td>      <td>2.315789</td>      <td>-2.315789</td>      <td>1.215898</td>      <td>-3.415681</td>    </tr>    <tr>      <th>16</th>      <td>2.736842</td>      <td>2.736842</td>      <td>-2.736842</td>      <td>2.564414</td>      <td>-2.909270</td>    </tr>    <tr>      <th>17</th>      <td>3.157895</td>      <td>3.157895</td>      <td>-3.157895</td>      <td>2.280036</td>      <td>-4.035753</td>    </tr>    <tr>      <th>18</th>      <td>3.578947</td>      <td>3.578947</td>      <td>-3.578947</td>      <td>3.621161</td>      <td>-3.536734</td>    </tr>    <tr>      <th>19</th>      <td>4.000000</td>      <td>4.000000</td>      <td>-4.000000</td>      <td>4.582815</td>      <td>-3.417185</td>    </tr>  </tbody></table><p>20 rows × 5 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xy.corrwith(xy.x)</span><br></pre></td></tr></table></figure><pre><code>x     1.000000y1    1.000000y2   -1.000000y3    0.907917y4   -0.914029dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xy.corr()   <span class="comment">#根据数据框计算相关系数矩阵</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>x</th>      <th>y1</th>      <th>y2</th>      <th>y3</th>      <th>y4</th>    </tr>  </thead>  <tbody>    <tr>      <th>x</th>      <td>1.000000</td>      <td>1.000000</td>      <td>-1.000000</td>      <td>0.907917</td>      <td>-0.914029</td>    </tr>    <tr>      <th>y1</th>      <td>1.000000</td>      <td>1.000000</td>      <td>-1.000000</td>      <td>0.907917</td>      <td>-0.914029</td>    </tr>    <tr>      <th>y2</th>      <td>-1.000000</td>      <td>-1.000000</td>      <td>1.000000</td>      <td>-0.907917</td>      <td>0.914029</td>    </tr>    <tr>      <th>y3</th>      <td>0.907917</td>      <td>0.907917</td>      <td>-0.907917</td>      <td>1.000000</td>      <td>-0.659836</td>    </tr>    <tr>      <th>y4</th>      <td>-0.914029</td>      <td>-0.914029</td>      <td>0.914029</td>      <td>-0.659836</td>      <td>1.000000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.plotting.scatter_matrix(xy,figsize=(<span class="number">9</span>,<span class="number">8</span>)); <span class="comment">#矩阵散点图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071607871.png" alt="png"></p><p>下面计算实际数据（通常是定量数据）的线性相关系数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd           <span class="comment">#读取BSdata分析用数据</span></span><br><span class="line">BS=pd.read_excel(<span class="string">&#x27;DaPy_data.xlsx&#x27;</span>,<span class="string">&#x27;BSdata&#x27;</span>)[[<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>,<span class="string">&#x27;支出&#x27;</span>]];BS </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>女</td>      <td>167</td>      <td>71</td>      <td>46.0</td>    </tr>    <tr>      <th>1</th>      <td>男</td>      <td>171</td>      <td>68</td>      <td>10.4</td>    </tr>    <tr>      <th>2</th>      <td>女</td>      <td>175</td>      <td>73</td>      <td>21.0</td>    </tr>    <tr>      <th>3</th>      <td>男</td>      <td>169</td>      <td>74</td>      <td>4.9</td>    </tr>    <tr>      <th>4</th>      <td>男</td>      <td>154</td>      <td>55</td>      <td>25.9</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>47</th>      <td>男</td>      <td>175</td>      <td>68</td>      <td>44.4</td>    </tr>    <tr>      <th>48</th>      <td>女</td>      <td>166</td>      <td>65</td>      <td>5.3</td>    </tr>    <tr>      <th>49</th>      <td>女</td>      <td>159</td>      <td>58</td>      <td>71.4</td>    </tr>    <tr>      <th>50</th>      <td>女</td>      <td>169</td>      <td>73</td>      <td>5.5</td>    </tr>    <tr>      <th>51</th>      <td>女</td>      <td>165</td>      <td>67</td>      <td>56.8</td>    </tr>  </tbody></table><p>52 rows × 4 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(BS[<span class="string">&#x27;身高&#x27;</span>],BS[<span class="string">&#x27;体重&#x27;</span>],<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">BS[<span class="string">&#x27;身高&#x27;</span>].corr(BS[<span class="string">&#x27;体重&#x27;</span>])   <span class="comment">#BS.身高.corr(BS.体重)</span></span><br></pre></td></tr></table></figure><pre><code>0.9118170987010521</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071607924.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BS[[<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>]].corr()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>身高</th>      <th>体重</th>    </tr>  </thead>  <tbody>    <tr>      <th>身高</th>      <td>1.000000</td>      <td>0.911817</td>    </tr>    <tr>      <th>体重</th>      <td>0.911817</td>      <td>1.000000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BS.corr()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>身高</th>      <th>体重</th>      <th>支出</th>    </tr>  </thead>  <tbody>    <tr>      <th>身高</th>      <td>1.000000</td>      <td>0.911817</td>      <td>0.043881</td>    </tr>    <tr>      <th>体重</th>      <td>0.911817</td>      <td>1.000000</td>      <td>0.042946</td>    </tr>    <tr>      <th>支出</th>      <td>0.043881</td>      <td>0.042946</td>      <td>1.000000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimSun&#x27;</span>];  <span class="comment">#设置中文字体为&#x27;宋体&#x27;</span></span><br><span class="line">pd.plotting.scatter_matrix(BS,figsize=(<span class="number">9</span>,<span class="number">8</span>)); <span class="comment">#矩阵散点图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071607682.png" alt="png"></p><p>7.1.3 样本相关系数的检验</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> st <span class="comment">#加载统计分析方法包 </span></span><br><span class="line">st.pearsonr(x,y1)        <span class="comment">#pearson相关及检验 </span></span><br></pre></td></tr></table></figure><pre><code>(1.0, 0.0)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st.pearsonr(x,y2) </span><br></pre></td></tr></table></figure><pre><code>(-1.0, 0.0)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st.pearsonr(x,y3) </span><br></pre></td></tr></table></figure><pre><code>(0.907917278678589, 3.2236304802661585e-08)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st.pearsonr(x,y4) </span><br></pre></td></tr></table></figure><pre><code>(-0.9140292045707707, 1.7775582357873907e-08)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(BS[<span class="string">&#x27;身高&#x27;</span>],BS[<span class="string">&#x27;体重&#x27;</span>],<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">st.pearsonr(BS.身高,BS.体重)</span><br></pre></td></tr></table></figure><pre><code>(0.9118170987010525, 5.7473293164451325e-21)</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071607925.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(BS[<span class="string">&#x27;身高&#x27;</span>],BS.支出,<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">st.pearsonr(BS.身高,BS.支出)</span><br></pre></td></tr></table></figure><pre><code>(0.043881130759588965, 0.7574067077940487)</code></pre><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071607446.png" alt="png"><br>​    </p><h2 id="7-2-简单线性回归分析模型"><a href="#7-2-简单线性回归分析模型" class="headerlink" title="7.2 简单线性回归分析模型"></a>7.2 简单线性回归分析模型</h2><h3 id="7-2-1-直线回归模型的建立"><a href="#7-2-1-直线回归模型的建立" class="headerlink" title="7.2.1  直线回归模型的建立"></a>7.2.1  直线回归模型的建立</h3><p>7.2.1.1 直线回归模型的概念</p><p>7.2.1.2 直线回归的可视化模拟</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义模拟直线回归函数</span></span><br><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm                  <span class="comment">#加载统计模型包</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reglinedemo</span>(<span class="params">n=<span class="number">20</span></span>):</span>                        <span class="comment">#模拟样本例数</span></span><br><span class="line">    x=np.arange(n)+<span class="number">1</span>                          <span class="comment">#自变量取值</span></span><br><span class="line">    e=np.random.normal(<span class="number">0</span>,<span class="number">1</span>,n)                 <span class="comment">#误差项</span></span><br><span class="line">    y=<span class="number">2</span>+<span class="number">0.5</span>*x+e                               <span class="comment">#因变量值</span></span><br><span class="line">    x1=sm.add_constant(x);x1                  <span class="comment">#加常数项</span></span><br><span class="line">    fm=sm.OLS(y,x1).fit();fm                  <span class="comment">#模型拟合，见下</span></span><br><span class="line">    plt.plot(x,y,<span class="string">&#x27;.&#x27;</span>,x,fm.fittedvalues,<span class="string">&#x27;r-&#x27;</span>); <span class="comment">#添加回归线，红色</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):                   <span class="comment">#画垂直线</span></span><br><span class="line">        plt.vlines(x,y,fm.fittedvalues,linestyles=<span class="string">&#x27;dotted&#x27;</span>,colors=<span class="string">&#x27;b&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">12</span>)</span><br><span class="line">reglinedemo(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071607874.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">12</span>)</span><br><span class="line">reglinedemo(<span class="number">40</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071607447.png" alt="png"></p><p>7.2.1.3 最小二乘估计方法</p><p>（1）散点图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y=BS.体重; x=BS.身高 </span><br><span class="line">plt.plot(x,y,<span class="string">&#x27;o&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071607254.png" alt="png"></p><p>（2）模型拟合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm            <span class="comment">#加载线性回归模型库</span></span><br><span class="line">fm1=sm.OLS(y,sm.add_constant(x)).fit()  <span class="comment">#最小二乘估计，加常数项</span></span><br><span class="line">fm1.params                              <span class="comment">#模型参数的估计值</span></span><br></pre></td></tr></table></figure><pre><code>const   -79.282827身高        0.876949dtype: float64</code></pre><p>（3）回归直线拟合图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yfit=fm1.fittedvalues <span class="comment">#拟合估计值</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, y,<span class="string">&#x27;.&#x27;</span>,x,yfit, <span class="string">&#x27;r-&#x27;</span>); </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071607678.png" alt="png"></p><h3 id="7-2-2-直线回归模型的检验"><a href="#7-2-2-直线回归模型的检验" class="headerlink" title="7.2.2  直线回归模型的检验"></a>7.2.2  直线回归模型的检验</h3><p>7.2.2.1 回归系数的检验</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fm1.tvalues      <span class="comment">#模型系数t值</span></span><br></pre></td></tr></table></figure><pre><code>const    -8.414938身高       15.702810dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fm1.pvalues      <span class="comment">#系数检验p值</span></span><br></pre></td></tr></table></figure><pre><code>const    3.820690e-11身高       5.747329e-21dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(&#123;<span class="string">&#x27;b&#x27;</span>:fm1.params,<span class="string">&#x27;t&#x27;</span>:fm1.tvalues,<span class="string">&#x27;p&#x27;</span>:fm1.pvalues&#125;)  <span class="comment">#格式输出</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>b</th>      <th>t</th>      <th>p</th>    </tr>  </thead>  <tbody>    <tr>      <th>const</th>      <td>-79.282827</td>      <td>-8.414938</td>      <td>3.820690e-11</td>    </tr>    <tr>      <th>身高</th>      <td>0.876949</td>      <td>15.702810</td>      <td>5.747329e-21</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd           <span class="comment">#读取BSdata分析用数据</span></span><br><span class="line">BS=pd.read_excel(<span class="string">&#x27;DaPy_data.xlsx&#x27;</span>,<span class="string">&#x27;BSdata&#x27;</span>)[[<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>,<span class="string">&#x27;支出&#x27;</span>]];BS </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>女</td>      <td>167</td>      <td>71</td>      <td>46.0</td>    </tr>    <tr>      <th>1</th>      <td>男</td>      <td>171</td>      <td>68</td>      <td>10.4</td>    </tr>    <tr>      <th>2</th>      <td>女</td>      <td>175</td>      <td>73</td>      <td>21.0</td>    </tr>    <tr>      <th>3</th>      <td>男</td>      <td>169</td>      <td>74</td>      <td>4.9</td>    </tr>    <tr>      <th>4</th>      <td>男</td>      <td>154</td>      <td>55</td>      <td>25.9</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>47</th>      <td>男</td>      <td>175</td>      <td>68</td>      <td>44.4</td>    </tr>    <tr>      <th>48</th>      <td>女</td>      <td>166</td>      <td>65</td>      <td>5.3</td>    </tr>    <tr>      <th>49</th>      <td>女</td>      <td>159</td>      <td>58</td>      <td>71.4</td>    </tr>    <tr>      <th>50</th>      <td>女</td>      <td>169</td>      <td>73</td>      <td>5.5</td>    </tr>    <tr>      <th>51</th>      <td>女</td>      <td>165</td>      <td>67</td>      <td>56.8</td>    </tr>  </tbody></table><p>52 rows × 4 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> statsmodels.formula.api <span class="keyword">as</span> smf  <span class="comment">#加载公式模型建立包</span></span><br><span class="line">fm2=smf.ols(<span class="string">&#x27;体重~身高&#x27;</span>,data=BS).fit()   </span><br><span class="line">fm2.summary().tables[<span class="number">1</span>]    <span class="comment">#回归系数检验表，来自summary的第2张表   </span></span><br></pre></td></tr></table></figure><table class="simpletable"><tr>      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  </tr><tr>  <th>Intercept</th> <td>  -79.2828</td> <td>    9.422</td> <td>   -8.415</td> <td> 0.000</td> <td>  -98.207</td> <td>  -60.359</td></tr><tr>  <th>身高</th>        <td>    0.8769</td> <td>    0.056</td> <td>   15.703</td> <td> 0.000</td> <td>    0.765</td> <td>    0.989</td></tr></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fm2.summary().tables[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><table class="simpletable"><caption>OLS Regression Results</caption><tr>  <th>Dep. Variable:</th>           <td>体重</td>        <th>  R-squared:         </th> <td>   0.831</td></tr><tr>  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.828</td></tr><tr>  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   246.6</td></tr><tr>  <th>Date:</th>             <td>Tue, 07 Dec 2021</td> <th>  Prob (F-statistic):</th> <td>5.75e-21</td></tr><tr>  <th>Time:</th>                 <td>01:08:05</td>     <th>  Log-Likelihood:    </th> <td> -133.21</td></tr><tr>  <th>No. Observations:</th>      <td>    52</td>      <th>  AIC:               </th> <td>   270.4</td></tr><tr>  <th>Df Residuals:</th>          <td>    50</td>      <th>  BIC:               </th> <td>   274.3</td></tr><tr>  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   </tr><tr>  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   </tr></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fm2.summary().tables[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><table class="simpletable"><tr>  <th>Omnibus:</th>       <td> 6.599</td> <th>  Durbin-Watson:     </th> <td>   2.161</td></tr><tr>  <th>Prob(Omnibus):</th> <td> 0.037</td> <th>  Jarque-Bera (JB):  </th> <td>   5.704</td></tr><tr>  <th>Skew:</th>          <td>-0.782</td> <th>  Prob(JB):          </th> <td>  0.0577</td></tr><tr>  <th>Kurtosis:</th>      <td> 3.434</td> <th>  Cond. No.          </th> <td>3.58e+03</td></tr></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fm3=smf.ols(<span class="string">&#x27;体重~身高+支出&#x27;</span>,data=BS).fit()</span><br><span class="line">fm3.summary().tables[<span class="number">1</span>]    <span class="comment">#回归系数检验表，来自summary的第2张表</span></span><br></pre></td></tr></table></figure><table class="simpletable"><tr>      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  </tr><tr>  <th>Intercept</th> <td>  -79.2878</td> <td>    9.518</td> <td>   -8.331</td> <td> 0.000</td> <td>  -98.414</td> <td>  -60.161</td></tr><tr>  <th>身高</th>        <td>    0.8768</td> <td>    0.056</td> <td>   15.528</td> <td> 0.000</td> <td>    0.763</td> <td>    0.990</td></tr><tr>  <th>支出</th>        <td>    0.0011</td> <td>    0.021</td> <td>    0.050</td> <td> 0.960</td> <td>   -0.041</td> <td>    0.044</td></tr></table><p>7.2.2.2 回归模型的检验</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fm3.summary()</span><br></pre></td></tr></table></figure><table class="simpletable"><caption>OLS Regression Results</caption><tr>  <th>Dep. Variable:</th>           <td>体重</td>        <th>  R-squared:         </th> <td>   0.831</td></tr><tr>  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.825</td></tr><tr>  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   120.8</td></tr><tr>  <th>Date:</th>             <td>Tue, 07 Dec 2021</td> <th>  Prob (F-statistic):</th> <td>1.14e-19</td></tr><tr>  <th>Time:</th>                 <td>01:08:10</td>     <th>  Log-Likelihood:    </th> <td> -133.21</td></tr><tr>  <th>No. Observations:</th>      <td>    52</td>      <th>  AIC:               </th> <td>   272.4</td></tr><tr>  <th>Df Residuals:</th>          <td>    49</td>      <th>  BIC:               </th> <td>   278.3</td></tr><tr>  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   </tr><tr>  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   </tr></table><table class="simpletable"><tr>      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  </tr><tr>  <th>Intercept</th> <td>  -79.2878</td> <td>    9.518</td> <td>   -8.331</td> <td> 0.000</td> <td>  -98.414</td> <td>  -60.161</td></tr><tr>  <th>身高</th>        <td>    0.8768</td> <td>    0.056</td> <td>   15.528</td> <td> 0.000</td> <td>    0.763</td> <td>    0.990</td></tr><tr>  <th>支出</th>        <td>    0.0011</td> <td>    0.021</td> <td>    0.050</td> <td> 0.960</td> <td>   -0.041</td> <td>    0.044</td></tr></table><table class="simpletable"><tr>  <th>Omnibus:</th>       <td> 6.641</td> <th>  Durbin-Watson:     </th> <td>   2.165</td></tr><tr>  <th>Prob(Omnibus):</th> <td> 0.036</td> <th>  Jarque-Bera (JB):  </th> <td>   5.744</td></tr><tr>  <th>Skew:</th>          <td>-0.784</td> <th>  Prob(JB):          </th> <td>  0.0566</td></tr><tr>  <th>Kurtosis:</th>      <td> 3.440</td> <th>  Cond. No.          </th> <td>3.62e+03</td></tr></table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 3.62e+03. This might indicate that there are<br/>strong multicollinearity or other numerical problems.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%run init.py</span><br></pre></td></tr></table></figure><h3 id="7-2-3-直线回归模型的预测"><a href="#7-2-3-直线回归模型的预测" class="headerlink" title="7.2.3  直线回归模型的预测"></a>7.2.3  直线回归模型的预测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fm2.predict(pd.DataFrame(&#123;<span class="string">&#x27;身高&#x27;</span>:[<span class="number">170</span>]&#125;))         <span class="comment">#估计</span></span><br></pre></td></tr></table></figure><pre><code>0    69.7986dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fm2.predict(pd.DataFrame(&#123;<span class="string">&#x27;身高&#x27;</span>:[<span class="number">190</span>]&#125;))          <span class="comment">#预测</span></span><br></pre></td></tr></table></figure><pre><code>0    87.3375dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fm2.predict(pd.DataFrame(&#123;<span class="string">&#x27;身高&#x27;</span>: [<span class="number">170</span>,<span class="number">180</span>,<span class="number">190</span>]&#125;))  <span class="comment">#估计与预测</span></span><br></pre></td></tr></table></figure><pre><code>0    69.79861    78.56812    87.3375dtype: float64</code></pre><h2 id="7-3-分组可视化模型分析"><a href="#7-3-分组可视化模型分析" class="headerlink" title="7.3 分组可视化模型分析"></a>7.3 分组可视化模型分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BS_M=BS[BS.性别==<span class="string">&#x27;男&#x27;</span>][[<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>]];BS_M </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>身高</th>      <th>体重</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>171</td>      <td>68</td>    </tr>    <tr>      <th>3</th>      <td>169</td>      <td>74</td>    </tr>    <tr>      <th>4</th>      <td>154</td>      <td>55</td>    </tr>    <tr>      <th>5</th>      <td>183</td>      <td>76</td>    </tr>    <tr>      <th>9</th>      <td>173</td>      <td>63</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>37</th>      <td>178</td>      <td>78</td>    </tr>    <tr>      <th>40</th>      <td>158</td>      <td>60</td>    </tr>    <tr>      <th>45</th>      <td>169</td>      <td>65</td>    </tr>    <tr>      <th>46</th>      <td>166</td>      <td>70</td>    </tr>    <tr>      <th>47</th>      <td>175</td>      <td>68</td>    </tr>  </tbody></table><p>27 rows × 2 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BS_F=BS[BS.性别==<span class="string">&#x27;女&#x27;</span>][[<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>]];BS_F </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>身高</th>      <th>体重</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>167</td>      <td>71</td>    </tr>    <tr>      <th>2</th>      <td>175</td>      <td>73</td>    </tr>    <tr>      <th>6</th>      <td>169</td>      <td>71</td>    </tr>    <tr>      <th>7</th>      <td>166</td>      <td>66</td>    </tr>    <tr>      <th>8</th>      <td>165</td>      <td>69</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>44</th>      <td>164</td>      <td>62</td>    </tr>    <tr>      <th>48</th>      <td>166</td>      <td>65</td>    </tr>    <tr>      <th>49</th>      <td>159</td>      <td>58</td>    </tr>    <tr>      <th>50</th>      <td>169</td>      <td>73</td>    </tr>    <tr>      <th>51</th>      <td>165</td>      <td>67</td>    </tr>  </tbody></table><p>25 rows × 2 columns</p></div><h3 id="7-3-1-可视化分组线性相关分析"><a href="#7-3-1-可视化分组线性相关分析" class="headerlink" title="7.3.1 可视化分组线性相关分析"></a>7.3.1 可视化分组线性相关分析</h3><p>（1）男生身高与体重的相关分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> st </span><br><span class="line">M_r=st.pearsonr(BS_M.身高,BS_M.体重);M_r </span><br></pre></td></tr></table></figure><pre><code>(0.9105200024864898, 4.43657339837424e-11)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings  </span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)            <span class="comment">#忽略警告信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns </span><br><span class="line">sns.jointplot(<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>,data=BS_M);  <span class="comment">#直方图+散点图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071608429.png" alt="png"></p><p>（2）女生身高与体重的相关分析 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#plt.plot(BS_F.身高,BS_F.体重,&#x27;o&#x27;);</span></span><br><span class="line"><span class="comment">#plt.title(M_r);</span></span><br><span class="line">st.pearsonr(BS_F.身高,BS_F.体重)</span><br></pre></td></tr></table></figure><pre><code>(0.8931328371576219, 1.907324154689927e-09)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.jointplot(<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>,data=BS_F);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071608203.png" alt="png"></p><h3 id="7-3-2-可视化分组线性回归模型"><a href="#7-3-2-可视化分组线性回归模型" class="headerlink" title="7.3.2 可视化分组线性回归模型"></a>7.3.2 可视化分组线性回归模型</h3><p>（1）男生身高与体重的回归分析 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smf.ols(<span class="string">&#x27;体重~身高&#x27;</span>,data=BS_M).fit().summary().tables[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><table class="simpletable"><tr>      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  </tr><tr>  <th>Intercept</th> <td>  -85.4332</td> <td>   14.189</td> <td>   -6.021</td> <td> 0.000</td> <td> -114.657</td> <td>  -56.210</td></tr><tr>  <th>身高</th>        <td>    0.9101</td> <td>    0.083</td> <td>   11.011</td> <td> 0.000</td> <td>    0.740</td> <td>    1.080</td></tr></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.regplot(y=<span class="string">&quot;体重&quot;</span>,x=<span class="string">&quot;身高&quot;</span>,data=BS_M,ci=<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071608581.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.jointplot(<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>,data=BS_M,kind=<span class="string">&#x27;reg&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071608144.png" alt="png"></p><p>（2）女生身高与体重的回归分析 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smf.ols(<span class="string">&#x27;体重~身高&#x27;</span>,data=BS_F).fit().summary().tables[<span class="number">1</span>] </span><br></pre></td></tr></table></figure><table class="simpletable"><tr>      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  </tr><tr>  <th>Intercept</th> <td>  -80.3893</td> <td>   15.405</td> <td>   -5.218</td> <td> 0.000</td> <td> -112.257</td> <td>  -48.522</td></tr><tr>  <th>身高</th>        <td>    0.8867</td> <td>    0.093</td> <td>    9.523</td> <td> 0.000</td> <td>    0.694</td> <td>    1.079</td></tr></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.regplot(y=<span class="string">&#x27;体重&#x27;</span>,x=<span class="string">&#x27;身高&#x27;</span>,data=BS_F,ci=<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071608642.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.jointplot(<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>,data=BS_F,kind=<span class="string">&#x27;reg&#x27;</span>,ci=<span class="number">0</span>); </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071608756.png" alt="png"></p><p>（3）基于plotnine的分组回归分析可视化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> plotnine <span class="keyword">import</span> *    </span><br><span class="line">theme_set(theme_bw(base_family=<span class="string">&#x27;SimSun&#x27;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(ggplot(BS,aes(<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>)) + geom_point() + facet_wrap(<span class="string">&#x27;性别&#x27;</span>,nrow=<span class="number">1</span>)</span><br><span class="line">        + stat_smooth(method=<span class="string">&#x27;lm&#x27;</span>,se=<span class="literal">True</span>))   <span class="comment">#无可信区间的回归线 </span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071608570.png" alt="png"></p><pre><code>&lt;ggplot: (14373846)&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(ggplot(BS,aes(<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>)) + geom_point() + facet_wrap(<span class="string">&#x27;性别&#x27;</span>,nrow=<span class="number">2</span>) </span><br><span class="line">        + stat_smooth(method=<span class="string">&#x27;lm&#x27;</span>,se=<span class="literal">False</span>))           <span class="comment">#有可信区间的回归线 </span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112071608851.png" alt="png"></p><pre><code>&lt;ggplot: (17556679)&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第7章-数据的模型分析及可视化&quot;&gt;&lt;a href=&quot;#第7章-数据的模型分析及可视化&quot; class=&quot;headerlink&quot; title=&quot;第7章 数据的模型分析及可视化&quot;&gt;&lt;/a&gt;第7章 数据的模型分析及可视化&lt;/h1&gt;&lt;h2 id=&quot;7-1-线性相关分析模型&quot;</summary>
      
    
    
    
    <category term="《数据可视化》——基于Python的应用" scheme="https://zhangkh.top/categories/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%8B%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="《数据可视化》——基于Python的应用" scheme="https://zhangkh.top/tags/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%8B%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>第6章-数据的统计分析</title>
    <link href="https://zhangkh.top/14df227a.html"/>
    <id>https://zhangkh.top/14df227a.html</id>
    <published>2021-12-06T17:50:16.000Z</published>
    <updated>2021-12-06T17:53:57.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第6章-数据的统计分析及可视化"><a href="#第6章-数据的统计分析及可视化" class="headerlink" title="第6章 数据的统计分析及可视化"></a>第6章 数据的统计分析及可视化</h1><h2 id="6-1-随机变量及其分布"><a href="#6-1-随机变量及其分布" class="headerlink" title="6.1 随机变量及其分布"></a>6.1 随机变量及其分布</h2><h3 id="6-1-1-均匀分布及随机数图"><a href="#6-1-1-均匀分布及随机数图" class="headerlink" title="6.1.1 均匀分布及随机数图"></a>6.1.1 均匀分布及随机数图</h3><p>6.1.1.1 均匀分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np                        <span class="comment">#加载numpy包</span></span><br><span class="line">np.set_printoptions(precision=<span class="number">4</span>)          <span class="comment">#设置numpy输出为4位有效数</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">0</span>;b=<span class="number">1</span>;n=<span class="number">20</span>            <span class="comment"># n表示在[a,b]中生成n个点</span></span><br><span class="line">x=np.linspace(a,b,n);   <span class="comment"># [a,b]中n个等差数据</span></span><br><span class="line">ｘ</span><br></pre></td></tr></table></figure><pre><code>array([0.    , 0.0526, 0.1053, 0.1579, 0.2105, 0.2632, 0.3158, 0.3684,       0.4211, 0.4737, 0.5263, 0.5789, 0.6316, 0.6842, 0.7368, 0.7895,       0.8421, 0.8947, 0.9474, 1.    ])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y=np.ones(n)/(b-a);y    <span class="comment"># y=1/(b-a)  </span></span><br></pre></td></tr></table></figure><pre><code>array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1.])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt               </span><br><span class="line">plt.plot(x,y);plt.ylim(<span class="number">0</span>,<span class="number">1.5</span>);plt.stem(x,y);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070150589.png" alt="png"></p><p>6.1.1.2 均匀随机数</p><p>（1）生成一个均匀随机实数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.rand(<span class="number">1</span>)   <span class="comment">#生成[0,1]上的一个随机实数:random.uniform(0,1)     </span></span><br></pre></td></tr></table></figure><pre><code>array([0.3765])</code></pre><p>（2）生成一组随机实数及图示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">123</span>)            <span class="comment">#设置种子数seed可重复结果,可任意设置</span></span><br><span class="line">R=np.random.rand(<span class="number">10</span>);R[:<span class="number">10</span>]  <span class="comment">#[0,1]上的1000个随机数=np.random.uniform(0,1,1000) </span></span><br></pre></td></tr></table></figure><pre><code>array([0.6965, 0.2861, 0.2269, 0.5513, 0.7195, 0.4231, 0.9808, 0.6848,       0.4809, 0.3921])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(R,<span class="string">&#x27;.&#x27;</span>);</span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070150126.png" alt="png"><br>​    </p><h3 id="6-1-2-正态分布及随机数图"><a href="#6-1-2-正态分布及随机数图" class="headerlink" title="6.1.2 正态分布及随机数图"></a>6.1.2 正态分布及随机数图</h3><p>6.1.2.1  正态分布函数</p><p>（1）标准正态分布曲线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> arange,exp  <span class="comment">#arange类似linspace函数</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt,pi   </span><br><span class="line">x=arange(-<span class="number">4</span>,<span class="number">4</span>,<span class="number">0.1</span>)            <span class="comment">#x为-4到4上间距为0.1的数   </span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y=<span class="number">1</span>/sqrt(<span class="number">2</span>*pi)*exp(-x**<span class="number">2</span>/<span class="number">2</span>);</span><br><span class="line">plt.plot(x,y);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070151481.png" alt="png"></p><p>（2）标准正态分布的取值(pdf)及分位数(ppf)计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> st  <span class="comment">#加载统计方法包 </span></span><br><span class="line">p_z=st.norm.pdf(-<span class="number">2</span>);p_z   <span class="comment">#p(z)=1/sqrt(2*pi)*exp(-z**2/2);</span></span><br></pre></td></tr></table></figure><pre><code>0.05399096651318806</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">za=st.norm.ppf(<span class="number">0.95</span>);za   <span class="comment">#单侧</span></span><br></pre></td></tr></table></figure><pre><code>1.6448536269514722</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[st.norm.ppf(<span class="number">0.025</span>),st.norm.ppf(<span class="number">0.975</span>)] <span class="comment">#双侧</span></span><br></pre></td></tr></table></figure><pre><code>[-1.9599639845400545, 1.959963984540054]</code></pre><p>（3）标准正态分布的概率计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p=st.norm.cdf(<span class="number">1.645</span>);p       <span class="comment">#标准正态分布下的面积：p=P(z≤1.645)的累积概率</span></span><br></pre></td></tr></table></figure><pre><code>0.9500150944608786</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#标准正态曲线下[a,b]上计算概率的面积图</span></span><br><span class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> st  <span class="comment">#加载统计方法包 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">norm_p</span>(<span class="params">a,b</span>):</span>            </span><br><span class="line">        x=np.arange(-<span class="number">4</span>,<span class="number">4</span>,<span class="number">0.1</span>) </span><br><span class="line">        y=st.norm.pdf(x)         </span><br><span class="line">        x1=x[(a&lt;=x) &amp; (x&lt;=b)];x1 </span><br><span class="line">        y1=y[(a&lt;=x) &amp; (x&lt;=b)];y1         </span><br><span class="line">        p=st.norm.cdf(b)-st.norm.cdf(a);</span><br><span class="line">        print(<span class="string">&quot;    N(0,1)分布: [%3.2f,%3.2f]  p=%5.4f&quot;</span>%(a,b,p)) </span><br><span class="line">        plt.plot(x,y);<span class="comment">#plt.text(-0.7,0.2,&quot;p=%5.4f&quot;%p,fontsize=15);</span></span><br><span class="line">        plt.hlines(<span class="number">0</span>,-<span class="number">4</span>,<span class="number">4</span>); plt.vlines(x1,<span class="number">0</span>,y1,colors=<span class="string">&#x27;r&#x27;</span>);         </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">norm_p(-<span class="number">4</span>,-<span class="number">2</span>)       <span class="comment"># p=P(z≤2)=0.27%</span></span><br></pre></td></tr></table></figure><pre><code>    N(0,1)分布: [-4.00,-2.00]  p=0.0227</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070151934.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">norm_p(-<span class="number">2</span>,<span class="number">2</span>)        <span class="comment"># p=P(-2≤z≤2)=95.45%</span></span><br></pre></td></tr></table></figure><pre><code>    N(0,1)分布: [-2.00,2.00]  p=0.9545</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070151918.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">norm_p(-<span class="number">1.96</span>,<span class="number">1.96</span>)  <span class="comment"># p=P(-1.96≤z≤1.96)=95% </span></span><br></pre></td></tr></table></figure><pre><code>    N(0,1)分布: [-1.96,1.96]  p=0.9500</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070151596.png" alt="png"></p><p>6.1.2.2 正态分布随机数图</p><p>（1）标准正态随机数及分布图 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.normal(<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>)    <span class="comment">#生成 5 个标准正态分布随机数 </span></span><br></pre></td></tr></table></figure><pre><code>array([ 1.2659, -0.8667, -0.6789, -0.0947,  1.4914])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#随机产生1000个标准正态分布随机数，作其概率直方图，然后再添加正态分布的密度函数线。</span></span><br><span class="line"><span class="comment">#np.random.seed(123)             #设置种子数seed可使结果可重复</span></span><br><span class="line">z1=np.random.normal(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1000</span>)   <span class="comment">#1000个标准正态分布随机数N(0,1)</span></span><br><span class="line">z1[:<span class="number">20</span>]</span><br></pre></td></tr></table></figure><pre><code>array([-0.6389, -0.444 , -0.4344,  2.2059,  2.1868,  1.0041,  0.3862,        0.7374,  1.4907, -0.9358,  1.1758, -1.2539, -0.6378,  0.9071,       -1.4287, -0.1401, -0.8618, -0.2556, -2.7986, -1.7715])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.hist(z1);                   <span class="comment">#可设定分段数bins, plt.hist(z1,bins=30)</span></span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070150986.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">456</span>)            <span class="comment">#设置种子seed可重复结果</span></span><br><span class="line">z2=np.random.normal(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1000</span>)</span><br><span class="line">plt.hist(z2);<span class="comment">#plt.ylim=[0,400];</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070151323.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.hist(z1); plt.hist(z2);    <span class="comment">#做在一张图上</span></span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070150147.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一页绘制2个正态分布随机图</span></span><br><span class="line">plt.subplot(<span class="number">121</span>);plt.hist(z1); </span><br><span class="line">plt.subplot(<span class="number">122</span>);plt.hist(z2);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070151441.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">z12=pd.DataFrame(&#123;<span class="string">&#x27;z1&#x27;</span>:z1,<span class="string">&#x27;z2&#x27;</span>:z2&#125;); z12 <span class="comment">#构建数据框</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>z1</th>      <th>z2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>-0.638902</td>      <td>-0.668129</td>    </tr>    <tr>      <th>1</th>      <td>-0.443982</td>      <td>-0.498210</td>    </tr>    <tr>      <th>2</th>      <td>-0.434351</td>      <td>0.618576</td>    </tr>    <tr>      <th>3</th>      <td>2.205930</td>      <td>0.568692</td>    </tr>    <tr>      <th>4</th>      <td>2.186786</td>      <td>1.350509</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>995</th>      <td>-0.807699</td>      <td>2.591205</td>    </tr>    <tr>      <th>996</th>      <td>-1.276077</td>      <td>-0.468390</td>    </tr>    <tr>      <th>997</th>      <td>0.553626</td>      <td>0.898201</td>    </tr>    <tr>      <th>998</th>      <td>0.553874</td>      <td>-0.669727</td>    </tr>    <tr>      <th>999</th>      <td>-0.691200</td>      <td>0.019731</td>    </tr>  </tbody></table><p>1000 rows × 2 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z12.plot(kind=<span class="string">&#x27;hist&#x27;</span>); <span class="comment">#根据数据框绘直方图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070151020.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z12.plot(kind=<span class="string">&#x27;hist&#x27;</span>,subplots=<span class="literal">True</span>,layout=(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070151901.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z12.plot(kind=<span class="string">&#x27;density&#x27;</span>,subplots=<span class="literal">True</span>,layout=(<span class="number">1</span>,<span class="number">2</span>)); <span class="comment">#模拟正态分布曲线</span></span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070150680.png" alt="png"><br>​    </p><p>（2）一般正态随机数及分布图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">12</span>)   <span class="comment">#设置种子数seed可重复结果</span></span><br><span class="line">X=np.random.normal(<span class="number">170</span>,<span class="number">10</span>,<span class="number">100</span>); X.<span class="built_in">round</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([174.7, 163.2, 172.4, 153. , 177.5, 154.7, 170.1, 168.8, 161.9,       198.7, 164. , 174.7, 181. , 157.8, 183.4, 168.8, 180.1, 160.9,       159.7, 182.1, 175. , 171.4, 176.4, 175.3, 158.5, 147.9, 153.2,       152.1, 147.8, 163.5, 164.7, 169.6, 172.1, 166.2, 167.5, 170.7,       160. , 162.9, 170.4, 163.2, 164.3, 168.9, 183.4, 173.2, 166.6,       164.1, 168.9, 192.4, 138.5, 175.4, 172.3, 178.7, 158.5, 191.1,       180. , 169.5, 171.6, 162.8, 170.5, 168.6, 179.4, 173.6, 169.2,       176.8, 175.6, 172.2, 154.7, 180.3, 158.3, 159.9, 168.9, 175.1,       184.1, 153.1, 184.7, 186.4, 165.4, 168. , 164.3, 164. , 156.6,       153.1, 168. , 172.6, 188.3, 160. , 149.1, 171.5, 165.3, 173.6,       166. , 157.4, 163.1, 178. , 172.7, 160.3, 178.7, 155.5, 164.6,       172. ])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings  </span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)            <span class="comment">#忽略警告信息</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">sns.distplot(X);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070151469.png" alt="png"></p><p>（3）非正态随机数及分布图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">15</span>)  <span class="comment">#设置种子数seed可重复结果</span></span><br><span class="line">Y=np.random.lognormal(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1000</span>); Y[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure><pre><code>array([0.7317, 1.4039, 0.8556, 0.6054, 1.2656, 0.1714, 0.3343, 0.337 ,       0.737 , 0.6227])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(Y);</span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070150896.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Z=np.log(Y)      <span class="comment"># Z=log(Y)</span></span><br><span class="line">sns.distplot(Z);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070150940.png" alt="png"></p><p>6.1.2.3 正态分布概率检验图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> st   <span class="comment">#加载科学计算包scipy的统计功能</span></span><br><span class="line">st.probplot(X,plot=plt);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070151645.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st.probplot(Y,plot=plt); </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070152498.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st.probplot(Z, plot=plt); </span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070150433.png" alt="png"><br>​    </p><h2 id="6-2-统计量及抽样分布图"><a href="#6-2-统计量及抽样分布图" class="headerlink" title="6.2 统计量及抽样分布图"></a>6.2 统计量及抽样分布图</h2><h3 id="6-2-1-统计量及抽样的概念"><a href="#6-2-1-统计量及抽样的概念" class="headerlink" title="6.2.1 统计量及抽样的概念"></a>6.2.1 统计量及抽样的概念</h3><p>6.2.1.1 简单随机模拟</p><p>（1）生成[0,1]上的一组随机整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">0</span>,<span class="number">2</span>,<span class="number">100</span>)    <span class="comment">#[0,1]上的10个随机整数 </span></span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0,       0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,       0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1,       0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1,       0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0])</code></pre><p>（2）生成任意区间上的一组随机整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">1</span>,<span class="number">101</span>,<span class="number">10</span>)  <span class="comment">#[1,100]上的10个随机整数数组</span></span><br></pre></td></tr></table></figure><pre><code>array([32, 86, 52, 60, 20, 14,  3, 28, 31, 75])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">15</span>)           <span class="comment">#结果可重复</span></span><br><span class="line">np.random.randint(<span class="number">1</span>,<span class="number">101</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><pre><code>array([73, 13,  6,  1, 29, 28, 72, 76, 86, 48])</code></pre><p>6.2.1.2 随机抽样方法</p><p>（1）根据随机数抽样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_rows&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">BSdata=pd.read_excel(<span class="string">&#x27;DaPy_data.xlsx&#x27;</span>,<span class="string">&#x27;BSdata&#x27;</span>);   <span class="comment">#读取学生数据</span></span><br><span class="line">BSdata</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1510248008</td>      <td>女</td>      <td>167</td>      <td>71</td>      <td>46.0</td>      <td>不清楚</td>      <td>都未学过</td>      <td>No</td>    </tr>    <tr>      <th>1</th>      <td>1510229019</td>      <td>男</td>      <td>171</td>      <td>68</td>      <td>10.4</td>      <td>有必要</td>      <td>概率统计</td>      <td>Matlab</td>    </tr>    <tr>      <th>2</th>      <td>1512108019</td>      <td>女</td>      <td>175</td>      <td>73</td>      <td>21.0</td>      <td>有必要</td>      <td>统计方法</td>      <td>SPSS</td>    </tr>    <tr>      <th>3</th>      <td>1512332010</td>      <td>男</td>      <td>169</td>      <td>74</td>      <td>4.9</td>      <td>有必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>    <tr>      <th>4</th>      <td>1512331015</td>      <td>男</td>      <td>154</td>      <td>55</td>      <td>25.9</td>      <td>有必要</td>      <td>都学习过</td>      <td>Python</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>47</th>      <td>1538319004</td>      <td>男</td>      <td>175</td>      <td>68</td>      <td>44.4</td>      <td>不清楚</td>      <td>统计方法</td>      <td>SAS</td>    </tr>    <tr>      <th>48</th>      <td>1538254010</td>      <td>女</td>      <td>166</td>      <td>65</td>      <td>5.3</td>      <td>不清楚</td>      <td>编程技术</td>      <td>Python</td>    </tr>    <tr>      <th>49</th>      <td>1540294017</td>      <td>女</td>      <td>159</td>      <td>58</td>      <td>71.4</td>      <td>不清楚</td>      <td>都学习过</td>      <td>SPSS</td>    </tr>    <tr>      <th>50</th>      <td>1540365026</td>      <td>女</td>      <td>169</td>      <td>73</td>      <td>5.5</td>      <td>有必要</td>      <td>统计方法</td>      <td>Excel</td>    </tr>    <tr>      <th>51</th>      <td>1540388036</td>      <td>女</td>      <td>165</td>      <td>67</td>      <td>56.8</td>      <td>不必要</td>      <td>概率统计</td>      <td>SAS</td>    </tr>  </tbody></table><p>52 rows × 8 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i=np.random.randint(<span class="number">1</span>,<span class="number">53</span>,<span class="number">6</span>);i <span class="comment">#抽取6名学生，取[1,52]上的6个整数 </span></span><br></pre></td></tr></table></figure><pre><code>array([30, 18, 46, 32, 24, 33])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.iloc[i]                 <span class="comment">#获取抽到的6名学生信息 </span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>30</th>      <td>1529365032</td>      <td>男</td>      <td>172</td>      <td>71</td>      <td>10.4</td>      <td>有必要</td>      <td>都学习过</td>      <td>SPSS</td>    </tr>    <tr>      <th>18</th>      <td>1524105026</td>      <td>女</td>      <td>163</td>      <td>65</td>      <td>69.4</td>      <td>有必要</td>      <td>编程技术</td>      <td>Python</td>    </tr>    <tr>      <th>46</th>      <td>1438120022</td>      <td>男</td>      <td>166</td>      <td>70</td>      <td>35.6</td>      <td>有必要</td>      <td>统计方法</td>      <td>R</td>    </tr>    <tr>      <th>32</th>      <td>1530243029</td>      <td>男</td>      <td>186</td>      <td>87</td>      <td>9.5</td>      <td>不必要</td>      <td>都未学过</td>      <td>No</td>    </tr>    <tr>      <th>24</th>      <td>1527173011</td>      <td>女</td>      <td>160</td>      <td>62</td>      <td>11.5</td>      <td>不必要</td>      <td>都学习过</td>      <td>Matlab</td>    </tr>    <tr>      <th>33</th>      <td>1531364037</td>      <td>女</td>      <td>171</td>      <td>69</td>      <td>7.3</td>      <td>有必要</td>      <td>都学习过</td>      <td>Excel</td>    </tr>  </tbody></table></div><p>（2）直接抽取样本（sample）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.sample(<span class="number">6</span>)             <span class="comment">#直接抽取名学生及其信息 </span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>18</th>      <td>1524105026</td>      <td>女</td>      <td>163</td>      <td>65</td>      <td>69.4</td>      <td>有必要</td>      <td>编程技术</td>      <td>Python</td>    </tr>    <tr>      <th>33</th>      <td>1531364037</td>      <td>女</td>      <td>171</td>      <td>69</td>      <td>7.3</td>      <td>有必要</td>      <td>都学习过</td>      <td>Excel</td>    </tr>    <tr>      <th>45</th>      <td>1538399025</td>      <td>男</td>      <td>169</td>      <td>65</td>      <td>9.5</td>      <td>有必要</td>      <td>统计方法</td>      <td>SAS</td>    </tr>    <tr>      <th>28</th>      <td>1529314037</td>      <td>男</td>      <td>170</td>      <td>70</td>      <td>15.1</td>      <td>有必要</td>      <td>概率统计</td>      <td>SAS</td>    </tr>    <tr>      <th>30</th>      <td>1529365032</td>      <td>男</td>      <td>172</td>      <td>71</td>      <td>10.4</td>      <td>有必要</td>      <td>都学习过</td>      <td>SPSS</td>    </tr>    <tr>      <th>42</th>      <td>1537288004</td>      <td>女</td>      <td>173</td>      <td>70</td>      <td>19.1</td>      <td>不清楚</td>      <td>编程技术</td>      <td>Python</td>    </tr>  </tbody></table></div><h3 id="6-2-2-统计量的分布"><a href="#6-2-2-统计量的分布" class="headerlink" title="6.2.2 统计量的分布"></a>6.2.2 统计量的分布</h3><p>6.2.2.1 中心极限定理及其模拟图</p><p>（1）正态均值的分布—正态分布 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于正态分布的中心极限定理模拟函数</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">norm_sim1</span>(<span class="params">N=<span class="number">1000</span>,n=<span class="number">10</span></span>):</span>    <span class="comment"># n为样本个数，N为模拟次数（即抽样次数） </span></span><br><span class="line">    xbar=np.zeros(N)           <span class="comment"># 产生放置样本均值的向量  </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):         <span class="comment"># 计算[0,1]上的标准正态随机数及均值 </span></span><br><span class="line">        xbar[i]=np.random.normal(<span class="number">0</span>,<span class="number">1</span>,n).mean() </span><br><span class="line">    sns.distplot(xbar,bins=<span class="number">50</span>) <span class="comment">#plt.hist(xbar,bins=50)   </span></span><br><span class="line">    print(pd.DataFrame(xbar).describe().T) <span class="comment">#模拟结果的基本统计量</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)         <span class="comment">#设置种子数seed使结果可重复</span></span><br><span class="line">norm_sim1(<span class="number">10000</span>,<span class="number">30</span>)               <span class="comment">#根据默认值模拟</span></span><br></pre></td></tr></table></figure><pre><code>     count      mean       std       min       25%       50%       75%  \0  10000.0  0.002303  0.184125 -0.751992 -0.121302  0.002808  0.128373           max  0  0.770898  </code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070152089.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">2</span>)        <span class="comment">#设置种子数seed使结果可重复</span></span><br><span class="line">norm_sim1(n=<span class="number">30</span>,N=<span class="number">10000</span>)  </span><br></pre></td></tr></table></figure><pre><code>     count      mean       std       min       25%       50%       75%  \0  10000.0 -0.003134  0.181091 -0.612653 -0.127927 -0.002509  0.120398           max  0  0.684151  </code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070152154.png" alt="png"></p><p>（２）非正态均值统计量的分布 —— 渐近正态分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于非正态分布的中心极限定理模拟函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">norm_sim2</span>(<span class="params">N=<span class="number">1000</span>,n=<span class="number">10</span></span>):</span> </span><br><span class="line">    xbar=np.zeros(N) </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):  <span class="comment">#计算[0,1]上的均匀随机数及均值 </span></span><br><span class="line">        xbar[i]=np.random.uniform(<span class="number">0</span>,<span class="number">1</span>,n).mean()  </span><br><span class="line">    sns.distplot(xbar,bins=<span class="number">50</span>)</span><br><span class="line">    print(pd.DataFrame(xbar).describe().T) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">3</span>)   <span class="comment">#设置种子数seed使结果可重复</span></span><br><span class="line">norm_sim2() </span><br></pre></td></tr></table></figure><pre><code>    count      mean       std       min       25%       50%       75%  \0  1000.0  0.496785  0.090672  0.203241  0.436412  0.497801  0.560534           max  0  0.732275  </code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070152326.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">4</span>)   <span class="comment">#设置种子数seed使结果可重复</span></span><br><span class="line">norm_sim2(<span class="number">10000</span>,<span class="number">30</span>) </span><br></pre></td></tr></table></figure><pre><code>     count      mean       std       min       25%       50%       75%  \0  10000.0  0.499467  0.052163  0.294711  0.463689  0.499249  0.534502           max  0  0.711937  </code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070150801.png" alt="png"></p><p>6.2.2.2 均值的 t 分布及其图示</p><p>（１）小样本正态均值的标准化统计量分布 — t分布</p><p>（2）t 分布曲线比较图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x=np.arange(-<span class="number">4</span>,<span class="number">4</span>,<span class="number">0.1</span>) </span><br><span class="line">yn=st.norm.pdf(x,<span class="number">0</span>,<span class="number">1</span>); yt3=st.t.pdf(x,<span class="number">3</span>); yt10=st.t.pdf(x,<span class="number">30</span>) </span><br><span class="line">plt.plot(x,yn,<span class="string">&#x27;r-&#x27;</span>,x,yt3,<span class="string">&#x27;b.&#x27;</span>,x,yt10,<span class="string">&#x27;g-.&#x27;</span>); </span><br><span class="line">plt.legend([<span class="string">&quot;N(0,1)&quot;</span>,<span class="string">&quot;t(3)&quot;</span>,<span class="string">&quot;t(10)&quot;</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070152643.png" alt="png"></p><h2 id="6-3-基本统计推断方法"><a href="#6-3-基本统计推断方法" class="headerlink" title="6.3 基本统计推断方法"></a>6.3 基本统计推断方法</h2><h3 id="6-3-1-参数的估计方法"><a href="#6-3-1-参数的估计方法" class="headerlink" title="6.3.1 参数的估计方法"></a>6.3.1 参数的估计方法</h3><p>6.3.1.1 点估计 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">BSdata=pd.read_excel(<span class="string">&#x27;DaPy_data.xlsx&#x27;</span>,<span class="string">&#x27;BSdata&#x27;</span>);   <span class="comment">#读取学生数据</span></span><br><span class="line"><span class="comment">#BSdata</span></span><br></pre></td></tr></table></figure><p>（1）均值的点估计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[<span class="string">&#x27;身高&#x27;</span>].mean() </span><br></pre></td></tr></table></figure><pre><code>168.51923076923077</code></pre><p>（2）标准差的点估计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[<span class="string">&#x27;身高&#x27;</span>].std() </span><br></pre></td></tr></table></figure><pre><code>8.01833776871194</code></pre><p>（3）比例的点估计 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f=BSdata[<span class="string">&#x27;开设&#x27;</span>].value_counts(); </span><br><span class="line">p=f/<span class="built_in">sum</span>(f);p</span><br></pre></td></tr></table></figure><pre><code>有必要    0.557692不清楚    0.230769不必要    0.211538Name: 开设, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#假定有 150 人接受调查，其中 42 人喜欢品牌 A，问喜欢 A 品牌的人占多大比例？</span></span><br><span class="line"><span class="number">42</span>/<span class="number">150</span></span><br></pre></td></tr></table></figure><pre><code>0.28</code></pre><p>6.3.1.2 区间估计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">norm_p(-<span class="number">2</span>,<span class="number">2</span>) </span><br></pre></td></tr></table></figure><pre><code>    N(0,1)分布: [-2.00,2.00]  p=0.9545</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070150226.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> st</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t_p</span>(<span class="params">a,b,df=<span class="number">10</span></span>):</span>  <span class="comment">#t分布曲线下[a,b]上计算概率的面积图</span></span><br><span class="line">        x=np.arange(-<span class="number">4</span>,<span class="number">4</span>,<span class="number">0.1</span>) </span><br><span class="line">        y=st.t.pdf(x,df)         </span><br><span class="line">        x1=x[(a&lt;=x) &amp; (x&lt;=b)];x1 </span><br><span class="line">        y1=y[(a&lt;=x) &amp; (x&lt;=b)];y1 </span><br><span class="line">        p=st.t.cdf(b,df)-st.t.cdf(a,df);</span><br><span class="line">        print(<span class="string">&quot;      t(&quot;</span>+<span class="built_in">str</span>(df)+<span class="string">&quot;): [%3.2f, %3.2f]  p=%5.4f&quot;</span>%(a,b,p)) </span><br><span class="line">        plt.plot(x,y);<span class="comment">#plt.text(-0.7,0.2,&quot;p=%5.4f&quot;%p,fontsize=15);</span></span><br><span class="line">        plt.hlines(<span class="number">0</span>,-<span class="number">4</span>,<span class="number">4</span>); plt.vlines(x1,<span class="number">0</span>,y1,colors=<span class="string">&#x27;r&#x27;</span>); </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t_p(-<span class="number">2</span>,<span class="number">2</span>)  <span class="comment">#t:[-2,2], df=10</span></span><br></pre></td></tr></table></figure><pre><code>      t(10): [-2.00, 2.00]  p=0.9266</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070152527.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基于原始数据的t分布均值和置信区间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t_interval</span>(<span class="params">x,b=<span class="number">0.95</span></span>):</span>  <span class="comment">#这里b为置信水平，通常取95%</span></span><br><span class="line">    a=<span class="number">1</span>-b </span><br><span class="line">    n = <span class="built_in">len</span>(x) </span><br><span class="line">    ta=st.t.ppf(<span class="number">1</span>-a/<span class="number">2</span>,n-<span class="number">1</span>);ta     </span><br><span class="line">    <span class="keyword">from</span> math <span class="keyword">import</span> sqrt </span><br><span class="line">    se=x.std()/sqrt(n)</span><br><span class="line">    <span class="keyword">return</span>(x.mean()-ta*se, x.mean()+se*ta)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t_interval(BSdata[<span class="string">&#x27;身高&#x27;</span>]) <span class="comment">#身高均值的 95%的置信区间</span></span><br></pre></td></tr></table></figure><pre><code>(166.28691128155606, 170.7515502569055)</code></pre><h3 id="6-3-2-参数的假设检验"><a href="#6-3-2-参数的假设检验" class="headerlink" title="6.3.2 参数的假设检验"></a>6.3.2 参数的假设检验</h3><p>6.3.2.2 样本均值 t 检验</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#单样本 t 检验函数进行均值的 t 检验 </span></span><br><span class="line">print(<span class="string">&quot;样本均值：&quot;</span>,BSdata.身高.mean())</span><br><span class="line">st.ttest_1samp(BSdata.身高,popmean = <span class="number">166</span>)</span><br></pre></td></tr></table></figure><pre><code>样本均值： 168.51923076923077Ttest_1sampResult(statistic=2.2656106477907243, pvalue=0.02775093534857837)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st.ttest_1samp(BSdata.身高,popmean = <span class="number">170</span>)</span><br></pre></td></tr></table></figure><pre><code>Ttest_1sampResult(statistic=-1.3316948082433964, pvalue=0.188881956923451)</code></pre><h3 id="6-3-3-统计推断的可视化"><a href="#6-3-3-统计推断的可视化" class="headerlink" title="6.3.3 统计推断的可视化"></a>6.3.3 统计推断的可视化</h3><p>6.3.3.1 均值推断的可视化函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义单样本均值t检验图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ttest_1plot</span>(<span class="params">X,mu=<span class="number">0</span>,k=<span class="number">0.1</span></span>):</span> </span><br><span class="line">    df=<span class="built_in">len</span>(X)-<span class="number">1</span>  <span class="comment">#df=n-1</span></span><br><span class="line">    t1p=st.ttest_1samp(X, popmean = mu);</span><br><span class="line">    x=np.arange(-<span class="number">4</span>,<span class="number">4</span>,k); y=st.t.pdf(x,df)</span><br><span class="line">    t=<span class="built_in">abs</span>(t1p[<span class="number">0</span>]);p=t1p[<span class="number">1</span>]</span><br><span class="line">    x1=x[x&lt;=-t]; y1=y[x&lt;=-t];</span><br><span class="line">    x2=x[x&gt;=t]; y2=y[x&gt;=t];</span><br><span class="line">    print(<span class="string">&quot;  样本均值： \t%8.4f &quot;</span>%X.mean())</span><br><span class="line">    print(<span class="string">&quot;  单样本t检验:    t=%6.3f  p=%6.4f&quot;</span>%(t,p))</span><br><span class="line">    t_interval=st.t.interval(<span class="number">0.95</span>,<span class="built_in">len</span>(X)-<span class="number">1</span>,X.mean(),X.std())</span><br><span class="line">    print(<span class="string">&quot;   t置信区间:\t(%7.4f, %7.4f)&quot;</span>%(t_interval[<span class="number">0</span>],t_interval[<span class="number">1</span>]))</span><br><span class="line">    plt.plot(x,y); plt.hlines(<span class="number">0</span>,-<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">    plt.vlines(x1,<span class="number">0</span>,y1,colors=<span class="string">&#x27;r&#x27;</span>); plt.vlines(x2,<span class="number">0</span>,y2,colors=<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">    plt.vlines(st.t.ppf(<span class="number">0.05</span>/<span class="number">2</span>,df),<span class="number">0</span>,<span class="number">0.2</span>,colors=<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    plt.vlines(-st.t.ppf(<span class="number">0.05</span>/<span class="number">2</span>,df),<span class="number">0</span>,<span class="number">0.2</span>,colors=<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    plt.text(-<span class="number">0.6</span>,<span class="number">0.2</span>,<span class="string">r&quot;$\alpha$=%3.2f&quot;</span>%<span class="number">0.05</span>,fontsize=<span class="number">15</span>);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ttest_1plot(BSdata.身高,<span class="number">166</span>)  <span class="comment">#总体均值为166时的推断图 </span></span><br></pre></td></tr></table></figure><pre><code>  样本均值：     168.5192   单样本t检验:    t= 2.266  p=0.0278   t置信区间:    (152.4217, 184.6167)</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070150534.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ttest_1plot(BSdata.身高,<span class="number">170</span>)  <span class="comment">#总体均值为170时的推断图 </span></span><br></pre></td></tr></table></figure><pre><code>  样本均值：     168.5192   单样本t检验:    t= 1.332  p=0.1889   t置信区间:    (152.4217, 184.6167)</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070152901.png" alt="png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第6章-数据的统计分析及可视化&quot;&gt;&lt;a href=&quot;#第6章-数据的统计分析及可视化&quot; class=&quot;headerlink&quot; title=&quot;第6章 数据的统计分析及可视化&quot;&gt;&lt;/a&gt;第6章 数据的统计分析及可视化&lt;/h1&gt;&lt;h2 id=&quot;6-1-随机变量及其分布&quot;</summary>
      
    
    
    
    <category term="《数据可视化》——基于Python的应用" scheme="https://zhangkh.top/categories/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%8B%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="《数据可视化》——基于Python的应用" scheme="https://zhangkh.top/tags/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%8B%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>第5章-数据的直观分析</title>
    <link href="https://zhangkh.top/36b38058.html"/>
    <id>https://zhangkh.top/36b38058.html</id>
    <published>2021-12-06T17:43:02.000Z</published>
    <updated>2021-12-06T17:53:57.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第5章-数据的直观分析及可视化"><a href="#第5章-数据的直观分析及可视化" class="headerlink" title="第5章  数据的直观分析及可视化"></a>第5章  数据的直观分析及可视化</h2><h2 id="5-1-特殊统计图的绘制"><a href="#5-1-特殊统计图的绘制" class="headerlink" title="5.1 特殊统计图的绘制"></a>5.1 特殊统计图的绘制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基本设置</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np                             <span class="comment">#加载numpy包</span></span><br><span class="line">np.set_printoptions(precision=<span class="number">4</span>)               <span class="comment">#设置numpy输出为4位有效数</span></span><br></pre></td></tr></table></figure><h3 id="5-1-1-函数图"><a href="#5-1-1-函数图" class="headerlink" title="5.1.1 函数图"></a>5.1.1 函数图</h3><p>（1）初等函数图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi                 <span class="comment">#调用math中的圆周率参数</span></span><br><span class="line">x=np.linspace(<span class="number">0</span>,<span class="number">4</span>*pi,<span class="number">60</span>);x          <span class="comment">#生成[0,4*pi]上30个等差数列</span></span><br></pre></td></tr></table></figure><pre><code>array([ 0.    ,  0.213 ,  0.426 ,  0.639 ,  0.852 ,  1.0649,  1.2779,        1.4909,  1.7039,  1.9169,  2.1299,  2.3429,  2.5559,  2.7689,        2.9819,  3.1948,  3.4078,  3.6208,  3.8338,  4.0468,  4.2598,        4.4728,  4.6858,  4.8988,  5.1117,  5.3247,  5.5377,  5.7507,        5.9637,  6.1767,  6.3897,  6.6027,  6.8157,  7.0286,  7.2416,        7.4546,  7.6676,  7.8806,  8.0936,  8.3066,  8.5196,  8.7326,        8.9456,  9.1585,  9.3715,  9.5845,  9.7975, 10.0105, 10.2235,       10.4365, 10.6495, 10.8625, 11.0754, 11.2884, 11.5014, 11.7144,       11.9274, 12.1404, 12.3534, 12.5664])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> sin,cos,log,exp   <span class="comment">#调用numpy中的初等函数</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt     <span class="comment">#加载matplotlib包的绘图函数</span></span><br><span class="line">plt.plot(x,sin(x));                 <span class="comment">#正弦函数 y=sin(x)</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070144478.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x,cos(x));                 <span class="comment">#余弦函数 y=cos(x)</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070144246.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x,log(x+<span class="number">1</span>));               <span class="comment">#对数函数 y=log(x+1)</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070144222.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x,exp(x));                 <span class="comment">#指数函数 y=exp(x)</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070145154.png" alt="png"></p><p>（2）椭圆函数图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t=np.linspace(<span class="number">0</span>,<span class="number">2</span>*pi);</span><br><span class="line">x=<span class="number">2</span>*sin(t);y=<span class="number">3</span>*cos(t);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x,y,c=<span class="string">&#x27;red&#x27;</span>); </span><br><span class="line">plt.axvline(x=<span class="number">0</span>); plt.axhline(y=<span class="number">0</span>);</span><br><span class="line">plt.text(<span class="number">0.2</span>,<span class="number">1</span>,<span class="string">r&#x27;$\frac&#123;x^2&#125;&#123;a^2&#125;+\frac&#123;y^2&#125;&#123;b^2&#125;=1$&#x27;</span>,fontsize=<span class="number">15</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070146069.png" alt="png"></p><h4 id="5-1-2-气泡图"><a href="#5-1-2-气泡图" class="headerlink" title="5.1.2 气泡图"></a>5.1.2 气泡图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x=np.linspace(-<span class="number">4</span>,<span class="number">4</span>,<span class="number">20</span>); </span><br><span class="line">y=x**<span class="number">2</span>;                         <span class="comment"># y=x^2 抛物线</span></span><br><span class="line">plt.scatter(x,y);               <span class="comment">#二维散点图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070146010.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x,y,s=<span class="number">8</span>*y);         <span class="comment">#二维气泡图,s=8y</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070146072.png" alt="png"></p><h3 id="5-1-3-三维散点图"><a href="#5-1-3-三维散点图" class="headerlink" title="5.1.3 三维散点图"></a>5.1.3 三维散点图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X, Y = np.meshgrid(x, x)                <span class="comment">#从坐标向量x,y中返回坐标矩阵</span></span><br><span class="line">Z = np.sin(np.sqrt(X**<span class="number">2</span> + Y**<span class="number">2</span>))        <span class="comment">#Z=sin(sqrt(X^2+Y^2)) </span></span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D </span><br><span class="line">fig = plt.figure() </span><br><span class="line">Axes3D(fig).scatter(X, Y, Z);</span><br></pre></td></tr></table></figure><pre><code>C:\Users\kit\AppData\Local\Temp/ipykernel_16656/3617781357.py:5: MatplotlibDeprecationWarning: Axes3D(fig) adding itself to the figure is deprecated since 3.4. Pass the keyword argument auto_add_to_figure=False and use fig.add_axes(ax) to suppress this warning. The default value of auto_add_to_figure will change to False in mpl3.5 and True values will no longer work in 3.6.  This is consistent with other Axes classes.  Axes3D(fig).scatter(X, Y, Z);</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070146649.png" alt="png"></p><h3 id="5-1-4-三维曲面图"><a href="#5-1-4-三维曲面图" class="headerlink" title="5.1.4 三维曲面图"></a>5.1.4 三维曲面图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D </span><br><span class="line">fig = plt.figure() </span><br><span class="line">Axes3D(fig).plot_surface(X, Y, Z);</span><br></pre></td></tr></table></figure><pre><code>C:\Users\kit\AppData\Local\Temp/ipykernel_16656/932890556.py:3: MatplotlibDeprecationWarning: Axes3D(fig) adding itself to the figure is deprecated since 3.4. Pass the keyword argument auto_add_to_figure=False and use fig.add_axes(ax) to suppress this warning. The default value of auto_add_to_figure will change to False in mpl3.5 and True values will no longer work in 3.6.  This is consistent with other Axes classes.  Axes3D(fig).plot_surface(X, Y, Z);</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070146440.png" alt="png"></p><h3 id="5-2-Seaborn-统计绘图"><a href="#5-2-Seaborn-统计绘图" class="headerlink" title="5.2 Seaborn 统计绘图"></a>5.2 Seaborn 统计绘图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!pip install seaborn</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns  <span class="comment">#加载seaborn包</span></span><br></pre></td></tr></table></figure><h2 id="5-2-1-seaborn绘图特点"><a href="#5-2-1-seaborn绘图特点" class="headerlink" title="5.2.1  seaborn绘图特点"></a>5.2.1  seaborn绘图特点</h2><h3 id="5-2-1-1-统计图的绘制"><a href="#5-2-1-1-统计图的绘制" class="headerlink" title="5.2.1.1  统计图的绘制"></a>5.2.1.1  统计图的绘制</h3><h3 id="5-2-1-2-分组图的绘制"><a href="#5-2-1-2-分组图的绘制" class="headerlink" title="5.2.1.2  分组图的绘制"></a>5.2.1.2  分组图的绘制</h3><h3 id="5-2-1-3-分面图的绘制"><a href="#5-2-1-3-分面图的绘制" class="headerlink" title="5.2.1.3  分面图的绘制"></a>5.2.1.3  分面图的绘制</h3><h2 id="5-2-2-seaborn中的统计图"><a href="#5-2-2-seaborn中的统计图" class="headerlink" title="5.2.2 seaborn中的统计图"></a>5.2.2 seaborn中的统计图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）读取绘图用数据</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">BSdata=pd.read_excel(<span class="string">&#x27;DaPy_data.xlsx&#x27;</span>,<span class="string">&#x27;BSdata&#x27;</span>);BSdata.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1510248008</td>      <td>女</td>      <td>167</td>      <td>71</td>      <td>46.0</td>      <td>不清楚</td>      <td>都未学过</td>      <td>No</td>    </tr>    <tr>      <th>1</th>      <td>1510229019</td>      <td>男</td>      <td>171</td>      <td>68</td>      <td>10.4</td>      <td>有必要</td>      <td>概率统计</td>      <td>Matlab</td>    </tr>    <tr>      <th>2</th>      <td>1512108019</td>      <td>女</td>      <td>175</td>      <td>73</td>      <td>21.0</td>      <td>有必要</td>      <td>统计方法</td>      <td>SPSS</td>    </tr>    <tr>      <th>3</th>      <td>1512332010</td>      <td>男</td>      <td>169</td>      <td>74</td>      <td>4.9</td>      <td>有必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>    <tr>      <th>4</th>      <td>1512331015</td>      <td>男</td>      <td>154</td>      <td>55</td>      <td>25.9</td>      <td>有必要</td>      <td>都学习过</td>      <td>Python</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）中文字体段时需设置字体</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt             </span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>]; <span class="comment">#设置中文字体为&#x27;黑体&#x27;</span></span><br><span class="line">plt.rc(<span class="string">&#x27;axes&#x27;</span>, unicode_minus=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h4 id="5-2-2-1-箱线图（boxplot）"><a href="#5-2-2-1-箱线图（boxplot）" class="headerlink" title="5.2.2.1 箱线图（boxplot）"></a>5.2.2.1 箱线图（boxplot）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.boxplot(x=BSdata[<span class="string">&#x27;身高&#x27;</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070146232.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.boxplot(y=BSdata[<span class="string">&#x27;身高&#x27;</span>]); <span class="comment">#竖着放的箱线图，也就是将x换成y</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070146855.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分组绘制箱线图，分组因子是“性别”，在x轴不同位置绘制。</span></span><br><span class="line">sns.boxplot(x=<span class="string">&#x27;性别&#x27;</span>,y=<span class="string">&#x27;身高&#x27;</span>,data=BSdata);</span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070146998.png" alt="png"><br>​    </p><h5 id="5-2-2-2-小提琴图（violinplot）"><a href="#5-2-2-2-小提琴图（violinplot）" class="headerlink" title="5.2.2.2 小提琴图（violinplot）"></a>5.2.2.2 小提琴图（violinplot）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.violinplot(x=<span class="string">&#x27;开设&#x27;</span>, y=<span class="string">&#x27;支出&#x27;</span>, hue=<span class="string">&#x27;性别&#x27;</span>, data=BSdata);</span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070147572.png" alt="png"><br>​    </p><h5 id="5-2-2-3-点图（stripplot，航线图）"><a href="#5-2-2-3-点图（stripplot，航线图）" class="headerlink" title="5.2.2.3 点图（stripplot，航线图）"></a>5.2.2.3 点图（stripplot，航线图）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.stripplot(x=<span class="string">&#x27;性别&#x27;</span>, y=<span class="string">&#x27;身高&#x27;</span>, data=BSdata, jitter=<span class="literal">True</span>); </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070147294.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.stripplot(x=<span class="string">&#x27;性别&#x27;</span>, y=<span class="string">&#x27;身高&#x27;</span>, data=BSdata, jitter=<span class="literal">False</span>); </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070147753.png" alt="png"></p><h5 id="5-2-2-4-条图（barplot）"><a href="#5-2-2-4-条图（barplot）" class="headerlink" title="5.2.2.4 条图（barplot）"></a>5.2.2.4 条图（barplot）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.barplot(x=<span class="string">&#x27;性别&#x27;</span>, y=<span class="string">&#x27;身高&#x27;</span>, data=BSdata); <span class="comment">#不同性别身高均值标准差图</span></span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070147582.png" alt="png"><br>​    </p><h5 id="5-2-2-5-计数图（countplot）"><a href="#5-2-2-5-计数图（countplot）" class="headerlink" title="5.2.2.5 计数图（countplot）"></a>5.2.2.5 计数图（countplot）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.countplot(x=<span class="string">&#x27;开设&#x27;</span>, hue=<span class="string">&quot;课程&quot;</span>, data=BSdata);</span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070147567.png" alt="png"><br>​    </p><h5 id="5-2-2-6-分组关系图（factorplot）"><a href="#5-2-2-6-分组关系图（factorplot）" class="headerlink" title="5.2.2.6 分组关系图（factorplot）"></a>5.2.2.6 分组关系图（factorplot）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings  </span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)            <span class="comment">#忽略警告信息</span></span><br><span class="line">sns.factorplot(x=<span class="string">&#x27;性别&#x27;</span>,col=<span class="string">&quot;开设&quot;</span>,col_wrap=<span class="number">3</span>,data=BSdata,kind=<span class="string">&quot;count&quot;</span>,size=<span class="number">2</span>,aspect=<span class="number">1.5</span>);</span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070147539.png" alt="png"><br>​    </p><h5 id="5-2-2-7-概率分布图（distplot）"><a href="#5-2-2-7-概率分布图（distplot）" class="headerlink" title="5.2.2.7 概率分布图（distplot）"></a>5.2.2.7 概率分布图（distplot）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[<span class="string">&#x27;身高&#x27;</span>].hist(); </span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070147773.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(BSdata[<span class="string">&#x27;身高&#x27;</span>], kde=<span class="literal">True</span>, bins=<span class="number">10</span>); </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070147719.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#针对双变量，可使用Seaborn中的jointplot()函数。</span></span><br><span class="line">sns.jointplot(x=<span class="string">&#x27;身高&#x27;</span>, y=<span class="string">&#x27;体重&#x27;</span>, data=BSdata); </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070147612.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.pairplot(BSdata[[<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>,<span class="string">&#x27;支出&#x27;</span>]]); <span class="comment">#配对散点图</span></span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070147316.png" alt="png"><br>​    </p><h2 id="5-3-ggplot-绘图系统"><a href="#5-3-ggplot-绘图系统" class="headerlink" title="5.3 ggplot 绘图系统"></a>5.3 ggplot 绘图系统</h2><h3 id="5-3-1-ggplot与plotnine包"><a href="#5-3-1-ggplot与plotnine包" class="headerlink" title="5.3.1 ggplot与plotnine包"></a>5.3.1 ggplot与plotnine包</h3><h4 id="5-3-1-1-包的安装"><a href="#5-3-1-1-包的安装" class="headerlink" title="5.3.1.1 包的安装"></a>5.3.1.1 包的安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!pip install ggplot    #在系统上安装ggplot包</span></span><br><span class="line"><span class="comment">#!pip install plotnine    #在系统上安装plotnine包</span></span><br></pre></td></tr></table></figure><h4 id="5-3-1-2-包的加载与设置"><a href="#5-3-1-2-包的加载与设置" class="headerlink" title="5.3.1.2 包的加载与设置"></a>5.3.1.2 包的加载与设置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> plotnine <span class="keyword">import</span> *    <span class="comment">#加载和调用ggplot所有方法</span></span><br><span class="line">theme_set(theme_bw(base_family=<span class="string">&#x27;SimHei&#x27;</span>)); </span><br><span class="line"><span class="comment">#设置图形主题背景为白色bw、中文字体为黑体SimHei</span></span><br></pre></td></tr></table></figure><h3 id="5-3-2-ggplot-基本绘图"><a href="#5-3-2-ggplot-基本绘图" class="headerlink" title="5.3.2 ggplot 基本绘图"></a>5.3.2 ggplot 基本绘图</h3><h4 id="5-3-2-1-基本定义"><a href="#5-3-2-1-基本定义" class="headerlink" title="5.3.2.1  基本定义"></a>5.3.2.1  基本定义</h4><h4 id="5-3-2-2-ggplot中的图层"><a href="#5-3-2-2-ggplot中的图层" class="headerlink" title="5.3.2.2 ggplot中的图层"></a>5.3.2.2 ggplot中的图层</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GP=ggplot(BSdata,aes(x=<span class="string">&#x27;身高&#x27;</span>,y=<span class="string">&#x27;体重&#x27;</span>)); GP <span class="comment">#绘制直角坐标系</span></span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070147943.png" alt="png"><br>​    </p><pre><code>&lt;ggplot: (17305736)&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GP + geom_point()  <span class="comment">#增加点图</span></span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070147968.png" alt="png"><br>​    </p><pre><code>&lt;ggplot: (17306649)&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GP + geom_line()   <span class="comment">#增加线图</span></span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070147958.png" alt="png"><br>​    </p><pre><code>&lt;ggplot: (17305817)&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GP + geom_point() + geom_line()  <span class="comment">#增加点和线图</span></span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070147823.png" alt="png"><br>​    </p><pre><code>&lt;ggplot: (17401378)&gt;</code></pre><h4 id="5-3-3-常见统计图绘制"><a href="#5-3-3-常见统计图绘制" class="headerlink" title="5.3.3 常见统计图绘制"></a>5.3.3 常见统计图绘制</h4><h4 id="5-3-3-1-直方图"><a href="#5-3-3-1-直方图" class="headerlink" title="5.3.3.1 直方图"></a>5.3.3.1 直方图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ggplot(BSdata,aes(x=<span class="string">&#x27;身高&#x27;</span>)) + geom_histogram()</span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070147885.png" alt="png"><br>​    </p><pre><code>&lt;ggplot: (17411199)&gt;</code></pre><h4 id="5-3-3-2-分组散点图"><a href="#5-3-3-2-分组散点图" class="headerlink" title="5.3.3.2 分组散点图"></a>5.3.3.2 分组散点图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ggplot(BSdata,aes(x=<span class="string">&#x27;身高&#x27;</span>,y=<span class="string">&#x27;体重&#x27;</span>,shape=<span class="string">&#x27;性别&#x27;</span>)) + geom_point() </span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070144844.png" alt="png"><br>​    </p><pre><code>&lt;ggplot: (17453695)&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ggplot(BSdata,aes(x=<span class="string">&#x27;身高&#x27;</span>,y=<span class="string">&#x27;体重&#x27;</span>,color=<span class="string">&#x27;性别&#x27;</span>)) + geom_point()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070148705.png" alt="png"></p><pre><code>&lt;ggplot: (17400528)&gt;</code></pre><h4 id="5-3-3-3-折线图"><a href="#5-3-3-3-折线图" class="headerlink" title="5.3.3.3 折线图"></a>5.3.3.3 折线图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ggplot(BSdata,aes(x=<span class="string">&#x27;支出&#x27;</span>,y=<span class="string">&#x27;身高&#x27;</span>)) + geom_line() </span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070144232.png" alt="png"><br>​    </p><pre><code>&lt;ggplot: (17684008)&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#共用一个坐标，绘制不同的y值</span></span><br><span class="line">ggplot(BSdata,aes(x=<span class="string">&#x27;支出&#x27;</span>))+geom_line(aes(y=<span class="string">&#x27;身高&#x27;</span>)) + geom_line(aes(y=<span class="string">&#x27;体重&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070148593.png" alt="png"></p><pre><code>&lt;ggplot: (17547030)&gt;</code></pre><h4 id="5-3-3-4-分面图"><a href="#5-3-3-4-分面图" class="headerlink" title="5.3.3.4 分面图"></a>5.3.3.4 分面图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在plotnine中可使用facet_wrap参数可以按类型绘制分面图。</span></span><br><span class="line">ggplot(BSdata,aes(<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>)) + geom_point() + facet_wrap(<span class="string">&#x27;性别&#x27;</span>,nrow=<span class="number">2</span>) </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070148396.png" alt="png"></p><pre><code>&lt;ggplot: (17588264)&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ggplot(BSdata,aes(<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>)) + geom_point() + facet_wrap(<span class="string">&#x27;性别&#x27;</span>,nrow=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070144534.png" alt="png"></p><pre><code>&lt;ggplot: (17856503)&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ggplot(BSdata,aes(<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>)) + geom_line() + geom_point() + facet_wrap(<span class="string">&#x27;开设&#x27;</span>,nrow=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070148044.png" alt="png"></p><pre><code>&lt;ggplot: (17893885)&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(ggplot(BSdata,aes(<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>)) + geom_point() </span><br><span class="line">       + facet_wrap(<span class="string">&#x27;~性别+开设&#x27;</span>,nrow=<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070148027.png" alt="png"></p><pre><code>&lt;ggplot: (17934725)&gt;</code></pre><h2 id="5-4-pyecharts动态绘图"><a href="#5-4-pyecharts动态绘图" class="headerlink" title="5.4  pyecharts动态绘图"></a>5.4  pyecharts动态绘图</h2><h3 id="5-4-1-pyecharts简介"><a href="#5-4-1-pyecharts简介" class="headerlink" title="5.4.1  pyecharts简介"></a>5.4.1  pyecharts简介</h3><h4 id="5-4-1-1-关于pyecharts"><a href="#5-4-1-1-关于pyecharts" class="headerlink" title="5.4.1.1 关于pyecharts"></a>5.4.1.1 关于pyecharts</h4><h4 id="5-4-1-2-pyecharts安装与设置"><a href="#5-4-1-2-pyecharts安装与设置" class="headerlink" title="5.4.1.2 pyecharts安装与设置"></a>5.4.1.2 pyecharts安装与设置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!pip install pyecharts      </span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加载 Jupyter lab中设置 pyecharts 全局显示参数</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> CurrentConfig, NotebookType</span><br><span class="line">CurrentConfig.NOTEBOOK_TYPE = NotebookType.JUPYTER_LAB     </span><br><span class="line"><span class="keyword">import</span> pyecharts.options <span class="keyword">as</span> opts                                     <span class="comment">#并加载pyecharts选项</span></span><br><span class="line">figsize=opts.InitOpts(width=<span class="string">&#x27;560px&#x27;</span>,height=<span class="string">&#x27;380px&#x27;</span>,bg_color=<span class="string">&#x27;white&#x27;</span>) <span class="comment">#设置图形大小和背景色</span></span><br></pre></td></tr></table></figure><h3 id="5-4-2-pyeharts基本绘图"><a href="#5-4-2-pyeharts基本绘图" class="headerlink" title="5.4.2  pyeharts基本绘图"></a>5.4.2  pyeharts基本绘图</h3><h4 id="5-4-2-1-仪表盘"><a href="#5-4-2-1-仪表盘" class="headerlink" title="5.4.2.1 仪表盘"></a>5.4.2.1 仪表盘</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Gauge</span><br><span class="line">Gauge().load_javascript() <span class="comment">#在Jupyterlab中制图前需加载一次JavaScript函数！！</span></span><br></pre></td></tr></table></figure><pre><code>&lt;pyecharts.render.display.Javascript at 0x1110fee0&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Gauge().add(&quot;&quot;,[(&quot;完成率&quot;, 66.6)]).render_notebook()</span></span><br><span class="line">Gauge(figsize).add(<span class="string">&quot;&quot;</span>,[(<span class="string">&quot;完成率&quot;</span>, <span class="number">90</span>)]).render_notebook()</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="0f147b0fdf3640ce8f60025bd61b5ee3" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_0f147b0fdf3640ce8f60025bd61b5ee3 = echarts.init(            document.getElementById('0f147b0fdf3640ce8f60025bd61b5ee3'), 'white', {renderer: 'canvas'});        var option_0f147b0fdf3640ce8f60025bd61b5ee3 = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "gauge",            "title": {                "show": true,                "offsetCenter": [                    0,                    "-40%"                ],                "color": "#333",                "fontStyle": "normal",                "fontWeight": "normal",                "fontFamily": "sans-serif",                "fontSize": 15,                "backgroundColor": "transparent",                "borderColor": "transparent",                "borderWidth": 0,                "borderRadius": 0,                "padding": 0,                "shadowColor": "transparent",                "shadowBlur": 0,                "shadowOffsetX": 0,                "shadowOffsetY": 0            },            "detail": {                "show": true,                "backgroundColor": "transparent",                "borderWidth": 0,                "borderColor": "transparent",                "offsetCenter": [                    0,                    "-40%"                ],                "formatter": "{value}%",                "color": "auto",                "fontStyle": "normal",                "fontWeight": "normal",                "fontFamily": "sans-serif",                "fontSize": 15,                "borderRadius": 0,                "padding": 0,                "shadowColor": "transparent",                "shadowBlur": 0,                "shadowOffsetX": 0,                "shadowOffsetY": 0            },            "min": 0,            "max": 100,            "splitNumber": 10,            "radius": "75%",            "startAngle": 225,            "endAngle": -45,            "clockwise": true,            "data": [                {                    "name": "\u5b8c\u6210\u7387",                    "value": 90                }            ],            "pointer": {                "show": true,                "length": "80%",                "width": 8            }        }    ],    "legend": [        {            "data": [                ""            ],            "selected": {                "": true            }        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    }};        chart_0f147b0fdf3640ce8f60025bd61b5ee3.setOption(option_0f147b0fdf3640ce8f60025bd61b5ee3);    </script></body></html><h4 id="5-4-2-2-条图"><a href="#5-4-2-2-条图" class="headerlink" title="5.4.2.2 条图"></a>5.4.2.2 条图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基本的pyecharts绘图是基于列表数据的</span></span><br><span class="line">X=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>]</span><br><span class="line">Y=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">Z=[<span class="number">6</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar          <span class="comment">#加载pyecharts绘制条图(Bar)函数</span></span><br><span class="line">bar1=Bar(figsize)                         <span class="comment">#初始化条图</span></span><br><span class="line">bar1.add_xaxis(X).add_yaxis(<span class="string">&quot;垂直条图&quot;</span>,Y)   </span><br><span class="line">bar1.render_notebook()  </span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="c8c0a294d15146eaacbc7841b5e54541" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_c8c0a294d15146eaacbc7841b5e54541 = echarts.init(            document.getElementById('c8c0a294d15146eaacbc7841b5e54541'), 'white', {renderer: 'canvas'});        var option_c8c0a294d15146eaacbc7841b5e54541 = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "bar",            "name": "\u5782\u76f4\u6761\u56fe",            "legendHoverLink": true,            "data": [                1,                4,                7,                3,                2,                5,                6            ],            "showBackground": false,            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        }    ],    "legend": [        {            "data": [                "\u5782\u76f4\u6761\u56fe"            ],            "selected": {                "\u5782\u76f4\u6761\u56fe": true            }        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "A",                "B",                "C",                "D",                "E",                "F",                "G"            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ]};        chart_c8c0a294d15146eaacbc7841b5e54541.setOption(option_c8c0a294d15146eaacbc7841b5e54541);    </script></body></html><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bar(figsize).add_xaxis(X).add_yaxis(<span class="string">&quot;&quot;</span>,Y).render_notebook()  <span class="comment">#链式写法</span></span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="46754134875e44beb57e1dfcc5ccb0fa" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_46754134875e44beb57e1dfcc5ccb0fa = echarts.init(            document.getElementById('46754134875e44beb57e1dfcc5ccb0fa'), 'white', {renderer: 'canvas'});        var option_46754134875e44beb57e1dfcc5ccb0fa = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "bar",            "legendHoverLink": true,            "data": [                1,                4,                7,                3,                2,                5,                6            ],            "showBackground": false,            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        }    ],    "legend": [        {            "data": [                ""            ],            "selected": {                "": true            }        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "A",                "B",                "C",                "D",                "E",                "F",                "G"            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ]};        chart_46754134875e44beb57e1dfcc5ccb0fa.setOption(option_46754134875e44beb57e1dfcc5ccb0fa);    </script></body></html><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bar2=Bar(figsize) </span><br><span class="line">bar2.add_xaxis(X).add_yaxis(<span class="string">&quot;水平条图&quot;</span>,Y).reversal_axis()     </span><br><span class="line">bar2.render_notebook()  </span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="7a76755de56c49a9b4e90bb5f7703258" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_7a76755de56c49a9b4e90bb5f7703258 = echarts.init(            document.getElementById('7a76755de56c49a9b4e90bb5f7703258'), 'white', {renderer: 'canvas'});        var option_7a76755de56c49a9b4e90bb5f7703258 = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "bar",            "name": "\u6c34\u5e73\u6761\u56fe",            "legendHoverLink": true,            "data": [                1,                4,                7,                3,                2,                5,                6            ],            "showBackground": false,            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        }    ],    "legend": [        {            "data": [                "\u6c34\u5e73\u6761\u56fe"            ],            "selected": {                "\u6c34\u5e73\u6761\u56fe": true            }        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "A",                "B",                "C",                "D",                "E",                "F",                "G"            ]        }    ]};        chart_7a76755de56c49a9b4e90bb5f7703258.setOption(option_7a76755de56c49a9b4e90bb5f7703258);    </script></body></html><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bar3=Bar(figsize)</span><br><span class="line">bar3.add_xaxis(X).add_yaxis(<span class="string">&quot;条1&quot;</span>,Y).add_yaxis(<span class="string">&quot;条2&quot;</span>,Z) <span class="comment">#复试条图</span></span><br><span class="line">bar3.render_notebook()  </span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="0c7a6ab65b0d4a839c802a244d85acf0" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_0c7a6ab65b0d4a839c802a244d85acf0 = echarts.init(            document.getElementById('0c7a6ab65b0d4a839c802a244d85acf0'), 'white', {renderer: 'canvas'});        var option_0c7a6ab65b0d4a839c802a244d85acf0 = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "bar",            "name": "\u67611",            "legendHoverLink": true,            "data": [                1,                4,                7,                3,                2,                5,                6            ],            "showBackground": false,            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        },        {            "type": "bar",            "name": "\u67612",            "legendHoverLink": true,            "data": [                6,                5,                3,                2,                7,                4,                1            ],            "showBackground": false,            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        }    ],    "legend": [        {            "data": [                "\u67611",                "\u67612"            ],            "selected": {                "\u67611": true,                "\u67612": true            }        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "A",                "B",                "C",                "D",                "E",                "F",                "G"            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ]};        chart_0c7a6ab65b0d4a839c802a244d85acf0.setOption(option_0c7a6ab65b0d4a839c802a244d85acf0);    </script></body></html><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bar4=Bar(figsize)</span><br><span class="line">bar4.add_xaxis(X)           <span class="comment">#分段条图</span></span><br><span class="line">bar4.add_yaxis(<span class="string">&quot;条1&quot;</span>,Y,stack=<span class="string">&quot;stack1&quot;</span>)</span><br><span class="line">bar4.add_yaxis(<span class="string">&quot;条2&quot;</span>,Z,stack=<span class="string">&quot;stack1&quot;</span>)</span><br><span class="line">bar4.render_notebook()  </span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="c53fedcd4b614331884f4144dddd9eff" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_c53fedcd4b614331884f4144dddd9eff = echarts.init(            document.getElementById('c53fedcd4b614331884f4144dddd9eff'), 'white', {renderer: 'canvas'});        var option_c53fedcd4b614331884f4144dddd9eff = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "bar",            "name": "\u67611",            "legendHoverLink": true,            "data": [                1,                4,                7,                3,                2,                5,                6            ],            "showBackground": false,            "stack": "stack1",            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        },        {            "type": "bar",            "name": "\u67612",            "legendHoverLink": true,            "data": [                6,                5,                3,                2,                7,                4,                1            ],            "showBackground": false,            "stack": "stack1",            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        }    ],    "legend": [        {            "data": [                "\u67611",                "\u67612"            ],            "selected": {                "\u67611": true,                "\u67612": true            }        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "A",                "B",                "C",                "D",                "E",                "F",                "G"            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ]};        chart_c53fedcd4b614331884f4144dddd9eff.setOption(option_c53fedcd4b614331884f4144dddd9eff);    </script></body></html><h4 id="5-4-2-3-饼图"><a href="#5-4-2-3-饼图" class="headerlink" title="5.4.2.3 饼图"></a>5.4.2.3 饼图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XY = [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(X,Y)];XY    <span class="comment">#形成饼图数据列表格式 </span></span><br><span class="line"><span class="comment">#XY.sort(key=lambda x: x[1]);XY         #数据从小到大排序  </span></span><br></pre></td></tr></table></figure><pre><code>[[&#39;A&#39;, 1], [&#39;B&#39;, 4], [&#39;C&#39;, 7], [&#39;D&#39;, 3], [&#39;E&#39;, 2], [&#39;F&#39;, 5], [&#39;G&#39;, 6]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Pie      <span class="comment">#加载pyecharts绘制饼图(Pie)函数</span></span><br><span class="line">Pie(figsize).add(<span class="string">&quot;饼图&quot;</span>,XY).render_notebook()      </span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="01c62a6f4fd644a8b9c7f6499042d0da" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_01c62a6f4fd644a8b9c7f6499042d0da = echarts.init(            document.getElementById('01c62a6f4fd644a8b9c7f6499042d0da'), 'white', {renderer: 'canvas'});        var option_01c62a6f4fd644a8b9c7f6499042d0da = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "pie",            "name": "\u997c\u56fe",            "clockwise": true,            "data": [                {                    "name": "A",                    "value": 1                },                {                    "name": "B",                    "value": 4                },                {                    "name": "C",                    "value": 7                },                {                    "name": "D",                    "value": 3                },                {                    "name": "E",                    "value": 2                },                {                    "name": "F",                    "value": 5                },                {                    "name": "G",                    "value": 6                }            ],            "radius": [                "0%",                "75%"            ],            "center": [                "50%",                "50%"            ],            "label": {                "show": true,                "position": "top",                "margin": 8            }        }    ],    "legend": [        {            "data": [                "A",                "B",                "C",                "D",                "E",                "F",                "G"            ],            "selected": {}        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    }};        chart_01c62a6f4fd644a8b9c7f6499042d0da.setOption(option_01c62a6f4fd644a8b9c7f6499042d0da);    </script></body></html><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(Pie(figsize)</span><br><span class="line">     .add(<span class="string">&quot;&quot;</span>,XY)</span><br><span class="line">     .set_series_opts(opts.LabelOpts(formatter=<span class="string">&quot;&#123;b&#125;:&#123;c&#125;&quot;</span>)) <span class="comment">#加标签饼图 </span></span><br><span class="line">     .render_notebook() </span><br><span class="line">)</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="36296169f50a486988f8ffa13a655b5c" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_36296169f50a486988f8ffa13a655b5c = echarts.init(            document.getElementById('36296169f50a486988f8ffa13a655b5c'), 'white', {renderer: 'canvas'});        var option_36296169f50a486988f8ffa13a655b5c = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "pie",            "clockwise": true,            "data": [                {                    "name": "A",                    "value": 1                },                {                    "name": "B",                    "value": 4                },                {                    "name": "C",                    "value": 7                },                {                    "name": "D",                    "value": 3                },                {                    "name": "E",                    "value": 2                },                {                    "name": "F",                    "value": 5                },                {                    "name": "G",                    "value": 6                }            ],            "radius": [                "0%",                "75%"            ],            "center": [                "50%",                "50%"            ],            "label": {                "show": true,                "position": "top",                "margin": 8,                "formatter": "{b}:{c}"            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "A",                "B",                "C",                "D",                "E",                "F",                "G"            ],            "selected": {}        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    }};        chart_36296169f50a486988f8ffa13a655b5c.setOption(option_36296169f50a486988f8ffa13a655b5c);    </script></body></html><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pie(figsize).add(<span class="string">&quot;玫瑰饼图&quot;</span>,XY,rosetype=<span class="string">&quot;radius&quot;</span>).render_notebook()</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="f0d0f75399c54d9a996a2b323d5b2f88" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_f0d0f75399c54d9a996a2b323d5b2f88 = echarts.init(            document.getElementById('f0d0f75399c54d9a996a2b323d5b2f88'), 'white', {renderer: 'canvas'});        var option_f0d0f75399c54d9a996a2b323d5b2f88 = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "pie",            "name": "\u73ab\u7470\u997c\u56fe",            "clockwise": true,            "data": [                {                    "name": "A",                    "value": 1                },                {                    "name": "B",                    "value": 4                },                {                    "name": "C",                    "value": 7                },                {                    "name": "D",                    "value": 3                },                {                    "name": "E",                    "value": 2                },                {                    "name": "F",                    "value": 5                },                {                    "name": "G",                    "value": 6                }            ],            "radius": [                "0%",                "75%"            ],            "center": [                "50%",                "50%"            ],            "roseType": "radius",            "label": {                "show": true,                "position": "top",                "margin": 8            }        }    ],    "legend": [        {            "data": [                "A",                "B",                "C",                "D",                "E",                "F",                "G"            ],            "selected": {}        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    }};        chart_f0d0f75399c54d9a996a2b323d5b2f88.setOption(option_f0d0f75399c54d9a996a2b323d5b2f88);    </script></body></html><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pie(figsize).add(<span class="string">&#x27;圆圈图&#x27;</span>,XY,radius=[<span class="string">&#x27;10%&#x27;</span>,<span class="string">&#x27;75%&#x27;</span>]).render_notebook()</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="435eecb81cb24f5baf9c6ebb366ef981" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_435eecb81cb24f5baf9c6ebb366ef981 = echarts.init(            document.getElementById('435eecb81cb24f5baf9c6ebb366ef981'), 'white', {renderer: 'canvas'});        var option_435eecb81cb24f5baf9c6ebb366ef981 = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "pie",            "name": "\u5706\u5708\u56fe",            "clockwise": true,            "data": [                {                    "name": "A",                    "value": 1                },                {                    "name": "B",                    "value": 4                },                {                    "name": "C",                    "value": 7                },                {                    "name": "D",                    "value": 3                },                {                    "name": "E",                    "value": 2                },                {                    "name": "F",                    "value": 5                },                {                    "name": "G",                    "value": 6                }            ],            "radius": [                "10%",                "75%"            ],            "center": [                "50%",                "50%"            ],            "label": {                "show": true,                "position": "top",                "margin": 8            }        }    ],    "legend": [        {            "data": [                "A",                "B",                "C",                "D",                "E",                "F",                "G"            ],            "selected": {}        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    }};        chart_435eecb81cb24f5baf9c6ebb366ef981.setOption(option_435eecb81cb24f5baf9c6ebb366ef981);    </script></body></html><h4 id="5-4-2-4-漏斗图"><a href="#5-4-2-4-漏斗图" class="headerlink" title="5.4.2.4 漏斗图"></a>5.4.2.4 漏斗图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Funnel</span><br><span class="line">fun1=Funnel(figsize)</span><br><span class="line">fun1.add(<span class="string">&quot;漏斗图&quot;</span>, XY)</span><br><span class="line">fun1.render_notebook()</span><br><span class="line"><span class="comment">#Funnel(figsize).add(&quot;漏斗图&quot;, XY).render_notebook()</span></span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="f87c7d278ae74c619f79100178ebe009" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_f87c7d278ae74c619f79100178ebe009 = echarts.init(            document.getElementById('f87c7d278ae74c619f79100178ebe009'), 'white', {renderer: 'canvas'});        var option_f87c7d278ae74c619f79100178ebe009 = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "funnel",            "name": "\u6f0f\u6597\u56fe",            "data": [                {                    "name": "A",                    "value": 1                },                {                    "name": "B",                    "value": 4                },                {                    "name": "C",                    "value": 7                },                {                    "name": "D",                    "value": 3                },                {                    "name": "E",                    "value": 2                },                {                    "name": "F",                    "value": 5                },                {                    "name": "G",                    "value": 6                }            ],            "sort": "descending",            "gap": 0,            "label": {                "show": true,                "position": "top",                "margin": 8            }        }    ],    "legend": [        {            "data": [                "C",                "B",                "F",                "D",                "A",                "G",                "E"            ],            "selected": {                "A": true,                "B": true,                "C": true,                "D": true,                "E": true,                "F": true,                "G": true            }        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    }};        chart_f87c7d278ae74c619f79100178ebe009.setOption(option_f87c7d278ae74c619f79100178ebe009);    </script></body></html><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fun2=Funnel(figsize)</span><br><span class="line">fun2.add(<span class="string">&quot;漏斗图&quot;</span>, XY,label_opts=opts.LabelOpts(position=<span class="string">&quot;inside&quot;</span>))     </span><br><span class="line">fun2.render_notebook()</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="a8845244b55a48bea0574ec31d5f2339" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_a8845244b55a48bea0574ec31d5f2339 = echarts.init(            document.getElementById('a8845244b55a48bea0574ec31d5f2339'), 'white', {renderer: 'canvas'});        var option_a8845244b55a48bea0574ec31d5f2339 = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "funnel",            "name": "\u6f0f\u6597\u56fe",            "data": [                {                    "name": "A",                    "value": 1                },                {                    "name": "B",                    "value": 4                },                {                    "name": "C",                    "value": 7                },                {                    "name": "D",                    "value": 3                },                {                    "name": "E",                    "value": 2                },                {                    "name": "F",                    "value": 5                },                {                    "name": "G",                    "value": 6                }            ],            "sort": "descending",            "gap": 0,            "label": {                "show": true,                "position": "inside",                "margin": 8            }        }    ],    "legend": [        {            "data": [                "C",                "B",                "F",                "D",                "A",                "G",                "E"            ],            "selected": {                "A": true,                "B": true,                "C": true,                "D": true,                "E": true,                "F": true,                "G": true            }        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    }};        chart_a8845244b55a48bea0574ec31d5f2339.setOption(option_a8845244b55a48bea0574ec31d5f2339);    </script></body></html><h4 id="5-4-2-5-折线图"><a href="#5-4-2-5-折线图" class="headerlink" title="5.4.2.5 折线图"></a>5.4.2.5 折线图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Line  <span class="comment">#加载pyecharts绘制线图（Line）函数</span></span><br><span class="line">Line(figsize).add_xaxis(X).add_yaxis(<span class="string">&#x27;线图&#x27;</span>,Y).render_notebook()</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="fbaafe1592d941599f54a8814e1ca1f8" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_fbaafe1592d941599f54a8814e1ca1f8 = echarts.init(            document.getElementById('fbaafe1592d941599f54a8814e1ca1f8'), 'white', {renderer: 'canvas'});        var option_fbaafe1592d941599f54a8814e1ca1f8 = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "line",            "name": "\u7ebf\u56fe",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "A",                    1                ],                [                    "B",                    4                ],                [                    "C",                    7                ],                [                    "D",                    3                ],                [                    "E",                    2                ],                [                    "F",                    5                ],                [                    "G",                    6                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        }    ],    "legend": [        {            "data": [                "\u7ebf\u56fe"            ],            "selected": {                "\u7ebf\u56fe": true            }        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "A",                "B",                "C",                "D",                "E",                "F",                "G"            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ]};        chart_fbaafe1592d941599f54a8814e1ca1f8.setOption(option_fbaafe1592d941599f54a8814e1ca1f8);    </script></body></html><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">line2=Line(figsize)</span><br><span class="line">line2.add_xaxis(X).add_yaxis(<span class="string">&quot;线1&quot;</span>,Y).add_yaxis(<span class="string">&quot;线2&quot;</span>,Z)</span><br><span class="line">line2.render_notebook()</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="8c6f387ca5e14c4f9965a71fe6576318" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_8c6f387ca5e14c4f9965a71fe6576318 = echarts.init(            document.getElementById('8c6f387ca5e14c4f9965a71fe6576318'), 'white', {renderer: 'canvas'});        var option_8c6f387ca5e14c4f9965a71fe6576318 = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "line",            "name": "\u7ebf1",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "A",                    1                ],                [                    "B",                    4                ],                [                    "C",                    7                ],                [                    "D",                    3                ],                [                    "E",                    2                ],                [                    "F",                    5                ],                [                    "G",                    6                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "\u7ebf2",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "A",                    6                ],                [                    "B",                    5                ],                [                    "C",                    3                ],                [                    "D",                    2                ],                [                    "E",                    7                ],                [                    "F",                    4                ],                [                    "G",                    1                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        }    ],    "legend": [        {            "data": [                "\u7ebf1",                "\u7ebf2"            ],            "selected": {                "\u7ebf1": true,                "\u7ebf2": true            }        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "A",                "B",                "C",                "D",                "E",                "F",                "G"            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ]};        chart_8c6f387ca5e14c4f9965a71fe6576318.setOption(option_8c6f387ca5e14c4f9965a71fe6576318);    </script></body></html><h3 id="5-4-3-基于数据框的绘图"><a href="#5-4-3-基于数据框的绘图" class="headerlink" title="5.4.3  基于数据框的绘图"></a>5.4.3  基于数据框的绘图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">BS=pd.read_excel(<span class="string">&#x27;DaPy_data.xlsx&#x27;</span>,<span class="string">&#x27;BSdata&#x27;</span>);  <span class="comment">#继续使用BSdata数据</span></span><br><span class="line">BS.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1510248008</td>      <td>女</td>      <td>167</td>      <td>71</td>      <td>46.0</td>      <td>不清楚</td>      <td>都未学过</td>      <td>No</td>    </tr>    <tr>      <th>1</th>      <td>1510229019</td>      <td>男</td>      <td>171</td>      <td>68</td>      <td>10.4</td>      <td>有必要</td>      <td>概率统计</td>      <td>Matlab</td>    </tr>    <tr>      <th>2</th>      <td>1512108019</td>      <td>女</td>      <td>175</td>      <td>73</td>      <td>21.0</td>      <td>有必要</td>      <td>统计方法</td>      <td>SPSS</td>    </tr>    <tr>      <th>3</th>      <td>1512332010</td>      <td>男</td>      <td>169</td>      <td>74</td>      <td>4.9</td>      <td>有必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>    <tr>      <th>4</th>      <td>1512331015</td>      <td>男</td>      <td>154</td>      <td>55</td>      <td>25.9</td>      <td>有必要</td>      <td>都学习过</td>      <td>Python</td>    </tr>  </tbody></table></div><h4 id="5-4-3-1-原始数据散点图"><a href="#5-4-3-1-原始数据散点图" class="headerlink" title="5.4.3.1 原始数据散点图"></a>5.4.3.1 原始数据散点图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Scatter</span><br><span class="line">scatter1=Scatter(figsize)</span><br><span class="line">scatter1.add_xaxis(BS.身高).add_yaxis(<span class="string">&quot;&quot;</span>,BS.体重)</span><br><span class="line">scatter1.render_notebook()    <span class="comment">#默认散点图的x轴和y轴从0开始</span></span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="86edf0a706084951bb61ce887c3bb2b7" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_86edf0a706084951bb61ce887c3bb2b7 = echarts.init(            document.getElementById('86edf0a706084951bb61ce887c3bb2b7'), 'white', {renderer: 'canvas'});        var option_86edf0a706084951bb61ce887c3bb2b7 = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "scatter",            "symbolSize": 10,            "data": [                [                    167,                    71                ],                [                    171,                    68                ],                [                    175,                    73                ],                [                    169,                    74                ],                [                    154,                    55                ],                [                    183,                    76                ],                [                    169,                    71                ],                [                    166,                    66                ],                [                    165,                    69                ],                [                    173,                    63                ],                [                    184,                    82                ],                [                    163,                    66                ],                [                    162,                    63                ],                [                    168,                    72                ],                [                    164,                    66                ],                [                    180,                    81                ],                [                    158,                    63                ],                [                    179,                    75                ],                [                    163,                    65                ],                [                    160,                    62                ],                [                    168,                    70                ],                [                    185,                    83                ],                [                    174,                    76                ],                [                    167,                    72                ],                [                    160,                    62                ],                [                    163,                    65                ],                [                    155,                    50                ],                [                    178,                    78                ],                [                    170,                    70                ],                [                    164,                    58                ],                [                    172,                    71                ],                [                    178,                    77                ],                [                    186,                    87                ],                [                    171,                    69                ],                [                    156,                    56                ],                [                    166,                    68                ],                [                    176,                    78                ],                [                    178,                    78                ],                [                    155,                    54                ],                [                    163,                    62                ],                [                    158,                    60                ],                [                    167,                    68                ],                [                    173,                    70                ],                [                    174,                    71                ],                [                    164,                    62                ],                [                    169,                    65                ],                [                    166,                    70                ],                [                    175,                    68                ],                [                    166,                    65                ],                [                    159,                    58                ],                [                    169,                    73                ],                [                    165,                    67                ]            ],            "label": {                "show": true,                "position": "right",                "margin": 8            }        }    ],    "legend": [        {            "data": [                ""            ],            "selected": {                "": true            }        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": null        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ]};        chart_86edf0a706084951bb61ce887c3bb2b7.setOption(option_86edf0a706084951bb61ce887c3bb2b7);    </script></body></html><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改x轴和y轴的刻度</span></span><br><span class="line">scatter2=(Scatter(figsize)</span><br><span class="line">   .add_xaxis(BS.身高) </span><br><span class="line">   .add_yaxis(<span class="string">&quot;散点图&quot;</span>,BS.体重,label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))  </span><br><span class="line">   .set_global_opts(</span><br><span class="line">       xaxis_opts=opts.AxisOpts(min_=<span class="number">150</span>), <span class="comment">#x轴最小150</span></span><br><span class="line">       yaxis_opts=opts.AxisOpts(min_=<span class="number">40</span>)   <span class="comment">#y轴最小40 </span></span><br><span class="line">   )</span><br><span class="line">)</span><br><span class="line">scatter2.render_notebook()</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="6ae697b9b4a743b2b581ecb436c197cf" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_6ae697b9b4a743b2b581ecb436c197cf = echarts.init(            document.getElementById('6ae697b9b4a743b2b581ecb436c197cf'), 'white', {renderer: 'canvas'});        var option_6ae697b9b4a743b2b581ecb436c197cf = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "scatter",            "name": "\u6563\u70b9\u56fe",            "symbolSize": 10,            "data": [                [                    167,                    71                ],                [                    171,                    68                ],                [                    175,                    73                ],                [                    169,                    74                ],                [                    154,                    55                ],                [                    183,                    76                ],                [                    169,                    71                ],                [                    166,                    66                ],                [                    165,                    69                ],                [                    173,                    63                ],                [                    184,                    82                ],                [                    163,                    66                ],                [                    162,                    63                ],                [                    168,                    72                ],                [                    164,                    66                ],                [                    180,                    81                ],                [                    158,                    63                ],                [                    179,                    75                ],                [                    163,                    65                ],                [                    160,                    62                ],                [                    168,                    70                ],                [                    185,                    83                ],                [                    174,                    76                ],                [                    167,                    72                ],                [                    160,                    62                ],                [                    163,                    65                ],                [                    155,                    50                ],                [                    178,                    78                ],                [                    170,                    70                ],                [                    164,                    58                ],                [                    172,                    71                ],                [                    178,                    77                ],                [                    186,                    87                ],                [                    171,                    69                ],                [                    156,                    56                ],                [                    166,                    68                ],                [                    176,                    78                ],                [                    178,                    78                ],                [                    155,                    54                ],                [                    163,                    62                ],                [                    158,                    60                ],                [                    167,                    68                ],                [                    173,                    70                ],                [                    174,                    71                ],                [                    164,                    62                ],                [                    169,                    65                ],                [                    166,                    70                ],                [                    175,                    68                ],                [                    166,                    65                ],                [                    159,                    58                ],                [                    169,                    73                ],                [                    165,                    67                ]            ],            "label": {                "show": false,                "position": "top",                "margin": 8            }        }    ],    "legend": [        {            "data": [                "\u6563\u70b9\u56fe"            ],            "selected": {                "\u6563\u70b9\u56fe": true            },            "show": true,            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "min": 150,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": null        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "min": 40,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ],    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_6ae697b9b4a743b2b581ecb436c197cf.setOption(option_6ae697b9b4a743b2b581ecb436c197cf);    </script></body></html><h3 id="5-4-3-2-统计数据的条图"><a href="#5-4-3-2-统计数据的条图" class="headerlink" title="5.4.3.2 统计数据的条图"></a>5.4.3.2 统计数据的条图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基本的pyecharts绘图是基于列表数据的, 通常需将数据框转换成列表</span></span><br><span class="line">pt1=BS.pivot_table(index=[<span class="string">&#x27;性别&#x27;</span>],values=[<span class="string">&#x27;学号&#x27;</span>],aggfunc=<span class="built_in">len</span>); pt1</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>    </tr>    <tr>      <th>性别</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>女</th>      <td>25</td>    </tr>    <tr>      <th>男</th>      <td>27</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar  </span><br><span class="line">(Bar(figsize)</span><br><span class="line">     .add_xaxis(<span class="built_in">list</span>(pt1.index))</span><br><span class="line">     .add_yaxis(<span class="string">&quot;性别统计图&quot;</span>,<span class="built_in">list</span>(pt1.学号))</span><br><span class="line">     .render_notebook()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="b37b1ceb88514edd96a5d766a7589bcb" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_b37b1ceb88514edd96a5d766a7589bcb = echarts.init(            document.getElementById('b37b1ceb88514edd96a5d766a7589bcb'), 'white', {renderer: 'canvas'});        var option_b37b1ceb88514edd96a5d766a7589bcb = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "bar",            "name": "\u6027\u522b\u7edf\u8ba1\u56fe",            "legendHoverLink": true,            "data": [                25,                27            ],            "showBackground": false,            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        }    ],    "legend": [        {            "data": [                "\u6027\u522b\u7edf\u8ba1\u56fe"            ],            "selected": {                "\u6027\u522b\u7edf\u8ba1\u56fe": true            }        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "\u5973",                "\u7537"            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ]};        chart_b37b1ceb88514edd96a5d766a7589bcb.setOption(option_b37b1ceb88514edd96a5d766a7589bcb);    </script></body></html><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt2=BS.pivot_table([<span class="string">&#x27;学号&#x27;</span>],[<span class="string">&#x27;开设&#x27;</span>],[<span class="string">&#x27;性别&#x27;</span>],aggfunc=<span class="built_in">len</span>); pt2</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th colspan="2" halign="left">学号</th>    </tr>    <tr>      <th>性别</th>      <th>女</th>      <th>男</th>    </tr>    <tr>      <th>开设</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>6</td>      <td>5</td>    </tr>    <tr>      <th>不清楚</th>      <td>9</td>      <td>3</td>    </tr>    <tr>      <th>有必要</th>      <td>10</td>      <td>19</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(Bar(figsize)</span><br><span class="line">     .add_xaxis(<span class="built_in">list</span>(pt2.index))</span><br><span class="line">     .add_yaxis(<span class="string">&quot;女&quot;</span>,<span class="built_in">list</span>(pt2.学号.女))</span><br><span class="line">     .add_yaxis(<span class="string">&quot;男&quot;</span>,<span class="built_in">list</span>(pt2.学号.男))</span><br><span class="line">     .render_notebook()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="faed7b7844bd4a33a2725666a3387566" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_faed7b7844bd4a33a2725666a3387566 = echarts.init(            document.getElementById('faed7b7844bd4a33a2725666a3387566'), 'white', {renderer: 'canvas'});        var option_faed7b7844bd4a33a2725666a3387566 = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "bar",            "name": "\u5973",            "legendHoverLink": true,            "data": [                6,                9,                10            ],            "showBackground": false,            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        },        {            "type": "bar",            "name": "\u7537",            "legendHoverLink": true,            "data": [                5,                3,                19            ],            "showBackground": false,            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        }    ],    "legend": [        {            "data": [                "\u5973",                "\u7537"            ],            "selected": {                "\u5973": true,                "\u7537": true            }        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "\u4e0d\u5fc5\u8981",                "\u4e0d\u6e05\u695a",                "\u6709\u5fc5\u8981"            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ]};        chart_faed7b7844bd4a33a2725666a3387566.setOption(option_faed7b7844bd4a33a2725666a3387566);    </script></body></html><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">pt3=BS.pivot_table([<span class="string">&quot;支出&quot;</span>],[<span class="string">&#x27;开设&#x27;</span>],aggfunc=&#123;np.mean,np.std&#125;);</span><br><span class="line">pt3=pt3.<span class="built_in">round</span>(<span class="number">2</span>); pt3   <span class="comment">#pt3[&#x27;支出&#x27;][&#x27;mean&#x27;]</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th colspan="2" halign="left">支出</th>    </tr>    <tr>      <th></th>      <th>mean</th>      <th>std</th>    </tr>    <tr>      <th>开设</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>36.68</td>      <td>26.47</td>    </tr>    <tr>      <th>不清楚</th>      <td>26.29</td>      <td>20.87</td>    </tr>    <tr>      <th>有必要</th>      <td>19.16</td>      <td>18.06</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(Bar(figsize)</span><br><span class="line">      .add_xaxis(<span class="built_in">list</span>(pt3.index))</span><br><span class="line">      .add_yaxis(<span class="string">&quot;均值&quot;</span>,<span class="built_in">list</span>(pt3[<span class="string">&#x27;支出&#x27;</span>][<span class="string">&#x27;mean&#x27;</span>]))  <span class="comment">#list(pt3.iloc[:,0])</span></span><br><span class="line">      .add_yaxis(<span class="string">&quot;标准差&quot;</span>,<span class="built_in">list</span>(pt3[<span class="string">&#x27;支出&#x27;</span>][<span class="string">&#x27;std&#x27;</span>]))</span><br><span class="line">      .render_notebook()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8"></head><body>        <div id="a966c56b878941919a521438de07c423" class="chart-container" style="width:560px; height:380px;"></div>    <script>        var chart_a966c56b878941919a521438de07c423 = echarts.init(            document.getElementById('a966c56b878941919a521438de07c423'), 'white', {renderer: 'canvas'});        var option_a966c56b878941919a521438de07c423 = {    "backgroundColor": "white",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "color": [        "#c23531",        "#2f4554",        "#61a0a8",        "#d48265",        "#749f83",        "#ca8622",        "#bda29a",        "#6e7074",        "#546570",        "#c4ccd3",        "#f05b72",        "#ef5b9c",        "#f47920",        "#905a3d",        "#fab27b",        "#2a5caa",        "#444693",        "#726930",        "#b2d235",        "#6d8346",        "#ac6767",        "#1d953f",        "#6950a1",        "#918597"    ],    "series": [        {            "type": "bar",            "name": "\u5747\u503c",            "legendHoverLink": true,            "data": [                36.68,                26.29,                19.16            ],            "showBackground": false,            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        },        {            "type": "bar",            "name": "\u6807\u51c6\u5dee",            "legendHoverLink": true,            "data": [                26.47,                20.87,                18.06            ],            "showBackground": false,            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        }    ],    "legend": [        {            "data": [                "\u5747\u503c",                "\u6807\u51c6\u5dee"            ],            "selected": {                "\u5747\u503c": true,                "\u6807\u51c6\u5dee": true            }        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "\u4e0d\u5fc5\u8981",                "\u4e0d\u6e05\u695a",                "\u6709\u5fc5\u8981"            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ]};        chart_a966c56b878941919a521438de07c423.setOption(option_a966c56b878941919a521438de07c423);    </script></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第5章-数据的直观分析及可视化&quot;&gt;&lt;a href=&quot;#第5章-数据的直观分析及可视化&quot; class=&quot;headerlink&quot; title=&quot;第5章  数据的直观分析及可视化&quot;&gt;&lt;/a&gt;第5章  数据的直观分析及可视化&lt;/h2&gt;&lt;h2 id=&quot;5-1-特殊统计图的绘</summary>
      
    
    
    
    <category term="《数据可视化》——基于Python的应用" scheme="https://zhangkh.top/categories/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%8B%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="《数据可视化》——基于Python的应用" scheme="https://zhangkh.top/tags/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%8B%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>第4章-数据的探索性分析</title>
    <link href="https://zhangkh.top/ff915ea5.html"/>
    <id>https://zhangkh.top/ff915ea5.html</id>
    <published>2021-12-06T17:34:04.000Z</published>
    <updated>2021-12-06T17:41:11.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第4章-数据的探索性分析"><a href="#第4章-数据的探索性分析" class="headerlink" title="第4章 数据的探索性分析"></a>第4章 数据的探索性分析</h2><h3 id="4-1-数据的描述分析"><a href="#4-1-数据的描述分析" class="headerlink" title="4.1 数据的描述分析"></a>4.1 数据的描述分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_rows&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">BSdata=pd.read_excel(<span class="string">&#x27;DaPy_data.xlsx&#x27;</span>,<span class="string">&#x27;BSdata&#x27;</span>); BSdata  <span class="comment">#读取数据</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1510248008</td>      <td>女</td>      <td>167</td>      <td>71</td>      <td>46.0</td>      <td>不清楚</td>      <td>都未学过</td>      <td>No</td>    </tr>    <tr>      <th>1</th>      <td>1510229019</td>      <td>男</td>      <td>171</td>      <td>68</td>      <td>10.4</td>      <td>有必要</td>      <td>概率统计</td>      <td>Matlab</td>    </tr>    <tr>      <th>2</th>      <td>1512108019</td>      <td>女</td>      <td>175</td>      <td>73</td>      <td>21.0</td>      <td>有必要</td>      <td>统计方法</td>      <td>SPSS</td>    </tr>    <tr>      <th>3</th>      <td>1512332010</td>      <td>男</td>      <td>169</td>      <td>74</td>      <td>4.9</td>      <td>有必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>    <tr>      <th>4</th>      <td>1512331015</td>      <td>男</td>      <td>154</td>      <td>55</td>      <td>25.9</td>      <td>有必要</td>      <td>都学习过</td>      <td>Python</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>47</th>      <td>1538319004</td>      <td>男</td>      <td>175</td>      <td>68</td>      <td>44.4</td>      <td>不清楚</td>      <td>统计方法</td>      <td>SAS</td>    </tr>    <tr>      <th>48</th>      <td>1538254010</td>      <td>女</td>      <td>166</td>      <td>65</td>      <td>5.3</td>      <td>不清楚</td>      <td>编程技术</td>      <td>Python</td>    </tr>    <tr>      <th>49</th>      <td>1540294017</td>      <td>女</td>      <td>159</td>      <td>58</td>      <td>71.4</td>      <td>不清楚</td>      <td>都学习过</td>      <td>SPSS</td>    </tr>    <tr>      <th>50</th>      <td>1540365026</td>      <td>女</td>      <td>169</td>      <td>73</td>      <td>5.5</td>      <td>有必要</td>      <td>统计方法</td>      <td>Excel</td>    </tr>    <tr>      <th>51</th>      <td>1540388036</td>      <td>女</td>      <td>165</td>      <td>67</td>      <td>56.8</td>      <td>不必要</td>      <td>概率统计</td>      <td>SAS</td>    </tr>  </tbody></table><p>52 rows × 8 columns</p></div><h3 id="4-1-1-计数据汇总分析"><a href="#4-1-1-计数据汇总分析" class="headerlink" title="4.1.1 计数据汇总分析"></a>4.1.1 计数据汇总分析</h3><p>（1）频数：绝对数 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T1=BSdata[<span class="string">&#x27;性别&#x27;</span>].value_counts();T1 </span><br></pre></td></tr></table></figure><pre><code>男    27女    25Name: 性别, dtype: int64</code></pre><p>（2）频率：相对数 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T1/<span class="built_in">sum</span>(T1)*<span class="number">100</span></span><br></pre></td></tr></table></figure><pre><code>男    51.923077女    48.076923Name: 性别, dtype: float64</code></pre><h3 id="4-1-2-计量数据汇总分析"><a href="#4-1-2-计量数据汇总分析" class="headerlink" title="4.1.2 计量数据汇总分析"></a>4.1.2 计量数据汇总分析</h3><p>（1）均数（算术平均数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X=BSdata.身高;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X.mean()</span><br></pre></td></tr></table></figure><pre><code>168.51923076923077</code></pre><p>（2）中位数 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X.median()</span><br></pre></td></tr></table></figure><pre><code>167.5</code></pre><p>（3）极差                      </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R=X.<span class="built_in">max</span>()-X.<span class="built_in">min</span>();R</span><br></pre></td></tr></table></figure><pre><code>32</code></pre><p>（4）方差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X.var() </span><br></pre></td></tr></table></figure><pre><code>64.29374057315235</code></pre><p>（5）标准差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X.std() </span><br></pre></td></tr></table></figure><pre><code>8.01833776871194</code></pre><p>（6）四分位数间距（IQR）                     </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X.quantile(<span class="number">0.75</span>)-X.quantile(<span class="number">0.25</span>) </span><br></pre></td></tr></table></figure><pre><code>11.0</code></pre><p>（7）偏度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X.skew() </span><br></pre></td></tr></table></figure><pre><code>0.29880755120910174</code></pre><p>（8）峰度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X.kurt()</span><br></pre></td></tr></table></figure><pre><code>-0.42072371559816935</code></pre><h3 id="4-1-3-汇总性统计量"><a href="#4-1-3-汇总性统计量" class="headerlink" title="4.1.3 汇总性统计量"></a>4.1.3 汇总性统计量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.describe()   <span class="comment">#默认为计算计量数据的基本统计量</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>5.200000e+01</td>      <td>52.000000</td>      <td>52.000000</td>      <td>52.000000</td>    </tr>    <tr>      <th>mean</th>      <td>1.523270e+09</td>      <td>168.519231</td>      <td>68.500000</td>      <td>24.511538</td>    </tr>    <tr>      <th>std</th>      <td>1.899525e+07</td>      <td>8.018338</td>      <td>7.711718</td>      <td>21.432060</td>    </tr>    <tr>      <th>min</th>      <td>1.438120e+09</td>      <td>154.000000</td>      <td>50.000000</td>      <td>2.500000</td>    </tr>    <tr>      <th>25%</th>      <td>1.520377e+09</td>      <td>163.000000</td>      <td>63.000000</td>      <td>9.500000</td>    </tr>    <tr>      <th>50%</th>      <td>1.526685e+09</td>      <td>167.500000</td>      <td>68.500000</td>      <td>15.450000</td>    </tr>    <tr>      <th>75%</th>      <td>1.532229e+09</td>      <td>174.000000</td>      <td>73.000000</td>      <td>35.600000</td>    </tr>    <tr>      <th>max</th>      <td>1.540388e+09</td>      <td>186.000000</td>      <td>87.000000</td>      <td>85.600000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#BSdata[[&#x27;性别&#x27;,&#x27;开设&#x27;,&#x27;课程&#x27;,&#x27;软件&#x27;]].describe() #计数数据统计</span></span><br></pre></td></tr></table></figure><blockquote><p>自编计算基本统计量函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stats</span>(<span class="params">x</span>):</span> </span><br><span class="line">    stat=[x.count(),x.mean(),x.std(),x.<span class="built_in">min</span>(),x.quantile(<span class="number">.25</span>),x.median(), x.quantile(<span class="number">.75</span>),x.<span class="built_in">max</span>(),x.skew(),x.kurt()] </span><br><span class="line">    stat=pd.Series(stat,index=[<span class="string">&#x27;count&#x27;</span>,<span class="string">&#x27;mean&#x27;</span>,<span class="string">&#x27;std&#x27;</span>,<span class="string">&#x27;Min&#x27;</span>, <span class="string">&#x27;25%&#x27;</span>,<span class="string">&#x27;50%&#x27;</span>,<span class="string">&#x27;75%&#x27;</span>, <span class="string">&#x27;max&#x27;</span>,<span class="string">&#x27;skew&#x27;</span>,<span class="string">&#x27;kurt&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span>(stat) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stats(BSdata.身高)</span><br></pre></td></tr></table></figure><pre><code>count     52.000000mean     168.519231std        8.018338Min      154.00000025%      163.00000050%      167.50000075%      174.000000max      186.000000skew       0.298808kurt      -0.420724dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stats(BSdata.支出)</span><br></pre></td></tr></table></figure><pre><code>count    52.000000mean     24.511538std      21.432060Min       2.50000025%       9.50000050%      15.45000075%      35.600000max      85.600000skew      1.268351kurt      0.673127dtype: float64</code></pre><h3 id="4-2-数据的直观分析"><a href="#4-2-数据的直观分析" class="headerlink" title="4.2 数据的直观分析"></a>4.2 数据的直观分析</h3><h4 id="4-2-1-常用的绘图函数"><a href="#4-2-1-常用的绘图函数" class="headerlink" title="4.2.1 常用的绘图函数"></a>4.2.1 常用的绘图函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#绘制图形时，须作一些基本设置</span></span><br><span class="line">%config InlineBackend.figure_format=<span class="string">&#x27;retina&#x27;</span>   <span class="comment">#提高图形显示的清晰度</span></span><br></pre></td></tr></table></figure><h4 id="4-2-1-1-计数数据统计图"><a href="#4-2-1-1-计数数据统计图" class="headerlink" title="4.2.1.1  计数数据统计图"></a>4.2.1.1  计数数据统计图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>] </span><br><span class="line">Y=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>] </span><br></pre></td></tr></table></figure><ul><li>条图（bar） </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt     <span class="comment">#加载基本绘图包</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.bar(X,Y);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070136969.png" alt="png"></p><ul><li>饼图（pie） </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.pie(Y,labels=X); </span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070136681.png" alt="png"><br>​    </p><h4 id="4-2-1-2-计量数据统计图"><a href="#4-2-1-2-计量数据统计图" class="headerlink" title="4.2.1.2  计量数据统计图"></a>4.2.1.2  计量数据统计图</h4><ul><li>线图（plot）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(X,Y);</span><br></pre></td></tr></table></figure><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070136109.png" alt="png"><br>​    </p><ul><li>直方图（hist） </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.hist(BSdata.身高)    <span class="comment">#频数直方图 ，默认density=False</span></span><br></pre></td></tr></table></figure><pre><code>(array([4., 5., 5., 9., 9., 6., 5., 4., 1., 4.]), array([154. , 157.2, 160.4, 163.6, 166.8, 170. , 173.2, 176.4, 179.6,        182.8, 186. ]), &lt;BarContainer object of 10 artists&gt;)</code></pre><p>​<br><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070136032.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.hist(BSdata.体重)    <span class="comment">#频率直方图 ，density=True</span></span><br></pre></td></tr></table></figure><pre><code>(array([ 1.,  3.,  3.,  7., 12., 12.,  4.,  6.,  3.,  1.]), array([50. , 53.7, 57.4, 61.1, 64.8, 68.5, 72.2, 75.9, 79.6, 83.3, 87. ]), &lt;BarContainer object of 10 artists&gt;)</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070136470.png" alt="png"></p><ul><li>散点图（scatter） </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(BSdata.身高, BSdata.体重); </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070136972.png" alt="png"></p><h4 id="4-2-1-3-图形参数的设置"><a href="#4-2-1-3-图形参数的设置" class="headerlink" title="4.2.1.3  图形参数的设置"></a>4.2.1.3  图形参数的设置</h4><blockquote><p>标题、标签、标尺及颜色</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(X,Y);                      <span class="comment">#控制图形的颜色colors，c=&#x27;red&#x27; 为红色</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070136443.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(X,Y,c=<span class="string">&#x27;red&#x27;</span>);                      <span class="comment">#控制图形的颜色colors，c=&#x27;red&#x27; 为红色</span></span><br><span class="line">plt.ylim(<span class="number">0</span>,<span class="number">8</span>); </span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>];  <span class="comment">#设置中文黑体 </span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;姓名&#x27;</span>); plt.ylabel(<span class="string">&#x27;取值&#x27;</span>);  <span class="comment">#plt.xlabel、plt.ylabel：设置坐标轴名称；</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070136024.png" alt="png"></p><blockquote><p>线型和符号 </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(X,Y, linestyle=<span class="string">&#x27;:&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>); </span><br><span class="line"><span class="comment"># linestyle：控制连线的线型（-: 实线，--: 虚线，.: 点线）；</span></span><br><span class="line"><span class="comment"># marker：控制符号的类型，例如，&#x27;o&#x27; 绘制实心圆点图。</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070136899.png" alt="png"></p><blockquote><p>绘图函数附加图形 </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(X,Y,<span class="string">&#x27;o--&#x27;</span>);</span><br><span class="line">plt.axvline(x=<span class="number">4</span>);  <span class="comment"># 水平线：在横坐标x处画水平（plt.axhline）</span></span><br><span class="line">plt.axhline(y=<span class="number">4</span>);  <span class="comment"># 垂直线：在纵坐标y处画垂直线（plt.axvline）</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070137621.png" alt="png"></p><blockquote><p>文字函数：text(x, y, labels,…)，在(x, y)处添加用 labels 指定的文字</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(X,Y,<span class="string">&#x27;o--&#x27;</span>);</span><br><span class="line">plt.axvline(x=<span class="number">4</span>);  <span class="comment"># 水平线：在横坐标x处画水平（plt.axhline）</span></span><br><span class="line">plt.axhline(y=<span class="number">4</span>);  <span class="comment"># 垂直线：在纵坐标y处画垂直线（plt.axvline）</span></span><br><span class="line">plt.text(<span class="number">2</span>, <span class="number">7</span>, <span class="string">&#x27; peak point&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070137640.png" alt="png"></p><blockquote><p>图例：绘制图形后，可使用 legend 函数给图形加图例</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(X,Y,<span class="string">&#x27;.&#x27;</span>, label=<span class="string">&#x27;point&#x27;</span>); plt.legend();</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070137900.png" alt="png"></p><blockquote><p>误差线图</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s=[<span class="number">0.1</span>,<span class="number">0.4</span>,<span class="number">0.7</span>,<span class="number">0.3</span>,<span class="number">0.2</span>,<span class="number">0.5</span>,<span class="number">0.6</span>]   <span class="comment">#误差值</span></span><br><span class="line">plt.plot(X,Y); plt.errorbar(X,Y,yerr=s,fmt=<span class="string">&#x27;o&#x27;</span>,capsize=<span class="number">4</span>);  </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070137870.png" alt="png"></p><blockquote><p>误差条图</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.bar(X,Y,yerr=s,capsize=<span class="number">4</span>);   <span class="comment">#kw=&#123;&#x27;capsize&#x27;:4&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070137838.png" alt="png"></p><h4 id="4-2-1-4-多图的排列与绘制"><a href="#4-2-1-4-多图的排列与绘制" class="headerlink" title="4.2.1.4 多图的排列与绘制"></a>4.2.1.4 多图的排列与绘制</h4><p>一行绘制两个图形 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.subplot(<span class="number">121</span>); plt.bar(X,Y); </span><br><span class="line">plt.subplot(<span class="number">122</span>); plt.plot(Y);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070137219.png" alt="png"></p><p>一列绘制两个图形</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.subplot(<span class="number">211</span>); plt.bar(X,Y);</span><br><span class="line">plt.subplot(<span class="number">212</span>); plt.plot(Y);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070137632.png" alt="png"></p><p>根据页面大小绘制两个图形</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fig,ax = plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">12</span>,<span class="number">6</span>))  </span><br><span class="line">ax[<span class="number">0</span>].bar(X,Y); ax[<span class="number">1</span>].plot(X,Y);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070137784.png" alt="png"></p><p>一页绘制四个图形 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig,ax=plt.subplots(<span class="number">2</span>,<span class="number">2</span>,figsize=(<span class="number">10</span>,<span class="number">8</span>)) </span><br><span class="line">ax[<span class="number">0</span>,<span class="number">0</span>].bar(X,Y)</span><br><span class="line">ax[<span class="number">0</span>,<span class="number">1</span>].pie(Y,labels=X)</span><br><span class="line">ax[<span class="number">1</span>,<span class="number">0</span>].plot(Y); </span><br><span class="line">ax[<span class="number">1</span>,<span class="number">1</span>].plot(Y,<span class="string">&#x27;.-&#x27;</span>,linewidth=<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070137956.png" alt="png"></p><h3 id="4-2-2-基于-pandas-的绘图"><a href="#4-2-2-基于-pandas-的绘图" class="headerlink" title="4.2.2 基于 pandas 的绘图"></a>4.2.2 基于 pandas 的绘图</h3><h4 id="4-2-2-1-计量数据统计图"><a href="#4-2-2-1-计量数据统计图" class="headerlink" title="4.2.2.1 计量数据统计图"></a>4.2.2.1 计量数据统计图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>];  <span class="comment">#设置中文黑体 </span></span><br><span class="line">BSdata[<span class="string">&#x27;体重&#x27;</span>].plot(kind=<span class="string">&#x27;line&#x27;</span>); <span class="comment">#线图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070137634.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[<span class="string">&#x27;体重&#x27;</span>].plot(kind=<span class="string">&#x27;hist&#x27;</span>); <span class="comment">#直方图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070137088.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stats(BSdata.体重)</span><br></pre></td></tr></table></figure><pre><code>count    52.000000mean     68.500000std       7.711718Min      50.00000025%      63.00000050%      68.50000075%      73.000000max      87.000000skew      0.002935kurt      0.045948dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[<span class="string">&#x27;体重&#x27;</span>].plot(kind=<span class="string">&#x27;box&#x27;</span>); <span class="comment">#箱型图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070137330.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[<span class="string">&#x27;体重&#x27;</span>].plot(kind=<span class="string">&#x27;hist&#x27;</span>); </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070137379.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[<span class="string">&#x27;体重&#x27;</span>].plot(kind=<span class="string">&#x27;density&#x27;</span>,title=<span class="string">&#x27;Density&#x27;</span>); </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070137309.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[[<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>,<span class="string">&#x27;支出&#x27;</span>]].plot(subplots=<span class="literal">True</span>,layout=(<span class="number">1</span>,<span class="number">3</span>),kind=<span class="string">&#x27;box&#x27;</span>,figsize=(<span class="number">10</span>,<span class="number">4</span>)); </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070137146.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[[<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>,<span class="string">&#x27;支出&#x27;</span>]].plot(subplots=<span class="literal">True</span>,layout=(<span class="number">1</span>,<span class="number">3</span>),kind=<span class="string">&#x27;density&#x27;</span>,figsize=(<span class="number">10</span>,<span class="number">4</span>)); </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070137058.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[[<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>,<span class="string">&#x27;支出&#x27;</span>]].plot(subplots=<span class="literal">True</span>,layout=(<span class="number">3</span>,<span class="number">1</span>),kind=<span class="string">&#x27;density&#x27;</span>,figsize=(<span class="number">10</span>,<span class="number">6</span>));</span><br></pre></td></tr></table></figure><pre><code>C:\Users\kit\miniconda3\lib\site-packages\IPython\core\pylabtools.py:151: UserWarning: Glyph 8722 (\N&#123;MINUS SIGN&#125;) missing from current font.  fig.canvas.print_figure(bytes_io, **kw)</code></pre><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070137697.png" alt="png"></p><h4 id="4-2-2-2-计数数据统计图"><a href="#4-2-2-2-计数数据统计图" class="headerlink" title="4.2.2.2  计数数据统计图"></a>4.2.2.2  计数数据统计图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T1=BSdata[<span class="string">&#x27;开设&#x27;</span>].value_counts();T1</span><br><span class="line">pd.DataFrame(&#123;<span class="string">&#x27;频数&#x27;</span>:T1,<span class="string">&#x27;频率&#x27;</span>:T1/T1.<span class="built_in">sum</span>()*<span class="number">100</span>&#125;) </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>频数</th>      <th>频率</th>    </tr>  </thead>  <tbody>    <tr>      <th>有必要</th>      <td>29</td>      <td>55.769231</td>    </tr>    <tr>      <th>不清楚</th>      <td>12</td>      <td>23.076923</td>    </tr>    <tr>      <th>不必要</th>      <td>11</td>      <td>21.153846</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T1.plot(kind=<span class="string">&#x27;bar&#x27;</span>); <span class="comment">#T1.sort_values().plot(kind=&#x27;bar&#x27;); </span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070138833.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T1.plot(kind=<span class="string">&#x27;pie&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070138003.png" alt="png"></p><h3 id="4-3-数据的分组分析"><a href="#4-3-数据的分组分析" class="headerlink" title="4.3 数据的分组分析"></a>4.3 数据的分组分析</h3><h4 id="4-3-1-一维频数表与图"><a href="#4-3-1-一维频数表与图" class="headerlink" title="4.3.1 一维频数表与图"></a>4.3.1 一维频数表与图</h4><h5 id="4-3-1-1-计数数据频数分布"><a href="#4-3-1-1-计数数据频数分布" class="headerlink" title="4.3.1.1 计数数据频数分布"></a>4.3.1.1 计数数据频数分布</h5><ul><li>（1）value_counts </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[<span class="string">&#x27;开设&#x27;</span>].value_counts() </span><br></pre></td></tr></table></figure><pre><code>有必要    29不清楚    12不必要    11Name: 开设, dtype: int64</code></pre><ul><li>（2）自定义计数汇总函数 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tab</span>(<span class="params">x, plot=<span class="literal">False</span></span>):</span> <span class="comment">#计数频数表</span></span><br><span class="line">       f=x.value_counts();f</span><br><span class="line">       s=<span class="built_in">sum</span>(f);</span><br><span class="line">       p=<span class="built_in">round</span>(f/s*<span class="number">100</span>, <span class="number">3</span>); p </span><br><span class="line">       T1=pd.concat([f,p], axis=<span class="number">1</span>); </span><br><span class="line">       T1.columns=[<span class="string">&#x27;例数&#x27;</span>,<span class="string">&#x27;构成比&#x27;</span>];</span><br><span class="line">       T2=pd.DataFrame(&#123;<span class="string">&#x27;例数&#x27;</span>:s,<span class="string">&#x27;构成比&#x27;</span>:<span class="number">100.00</span>&#125;, index=[<span class="string">&#x27;合计&#x27;</span>])</span><br><span class="line">       Tab=T1.append(T2) </span><br><span class="line">       <span class="keyword">if</span> plot: </span><br><span class="line">           fig,ax=plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">10</span>,<span class="number">4</span>)) </span><br><span class="line">           ax[<span class="number">0</span>].bar(f.index, f); <span class="comment">#条图 </span></span><br><span class="line">           ax[<span class="number">1</span>].pie(p, labels=p.index, autopct=<span class="string">&#x27;%1.2f%%&#x27;</span>);<span class="comment">#饼图</span></span><br><span class="line">       <span class="keyword">return</span>(<span class="built_in">round</span>(Tab, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tab(BSdata.软件,<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>例数</th>      <th>构成比</th>    </tr>  </thead>  <tbody>    <tr>      <th>Excel</th>      <td>15</td>      <td>28.846</td>    </tr>    <tr>      <th>SPSS</th>      <td>9</td>      <td>17.308</td>    </tr>    <tr>      <th>R</th>      <td>7</td>      <td>13.462</td>    </tr>    <tr>      <th>Python</th>      <td>6</td>      <td>11.538</td>    </tr>    <tr>      <th>SAS</th>      <td>6</td>      <td>11.538</td>    </tr>    <tr>      <th>Matlab</th>      <td>5</td>      <td>9.615</td>    </tr>    <tr>      <th>No</th>      <td>4</td>      <td>7.692</td>    </tr>    <tr>      <th>合计</th>      <td>52</td>      <td>100.000</td>    </tr>  </tbody></table></div><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070138668.png" alt="png"></p><h4 id="4-3-1-2-计量数据频数分布"><a href="#4-3-1-2-计量数据频数分布" class="headerlink" title="4.3.1.2 计量数据频数分布"></a>4.3.1.2 计量数据频数分布</h4><p>（1）身高频数表与条图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">H_cut=pd.cut(BSdata.身高, bins=<span class="number">10</span>); H_cut  <span class="comment">#身高分10组，bins=[150,160,170,180,190,200]</span></span><br></pre></td></tr></table></figure><pre><code>0       (166.8, 170.0]1       (170.0, 173.2]2       (173.2, 176.4]3       (166.8, 170.0]4     (153.968, 157.2]            ...       47      (173.2, 176.4]48      (163.6, 166.8]49      (157.2, 160.4]50      (166.8, 170.0]51      (163.6, 166.8]Name: 身高, Length: 52, dtype: categoryCategories (10, interval[float64, right]): [(153.968, 157.2] &lt; (157.2, 160.4] &lt; (160.4, 163.6] &lt; (163.6, 166.8] ... (173.2, 176.4] &lt; (176.4, 179.6] &lt; (179.6, 182.8] &lt; (182.8, 186.0]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">H_cut.value_counts() <span class="comment">#分组再统计 </span></span><br></pre></td></tr></table></figure><pre><code>(166.8, 170.0]      10(163.6, 166.8]       9(157.2, 160.4]       5(160.4, 163.6]       5(170.0, 173.2]       5(173.2, 176.4]       5(153.968, 157.2]     4(176.4, 179.6]       4(182.8, 186.0]       4(179.6, 182.8]       1Name: 身高, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">H_cut.value_counts().plot(kind=<span class="string">&#x27;bar&#x27;</span>);   <span class="comment">#将结果画成垂直条图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070138344.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.身高.hist();</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070138480.png" alt="png"></p><p>（2）支出频数表 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O_cut=pd.cut(BSdata.支出, bins=[<span class="number">0</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">100</span>]); <span class="comment">#O_cut</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O_cut.value_counts() </span><br></pre></td></tr></table></figure><pre><code>(10, 30]     21(0, 10]      16(30, 100]    15Name: 支出, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O_cut.value_counts().plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070138267.png" alt="png"></p><p>（3）自定义计量频率分析函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">freq</span>(<span class="params">X,bins=<span class="number">10</span></span>):</span>      <span class="comment">#计量数据的频数表与直方图</span></span><br><span class="line">    H=plt.hist(X,bins);</span><br><span class="line">    a=H[<span class="number">1</span>][:-<span class="number">1</span>]; b=H[<span class="number">1</span>][<span class="number">1</span>:]; f=H[<span class="number">0</span>];    </span><br><span class="line">    p=f/<span class="built_in">sum</span>(f)*<span class="number">100</span>;p</span><br><span class="line">    cp=np.cumsum(p);cp</span><br><span class="line">    Freq=pd.DataFrame([a,b,f,p,cp])</span><br><span class="line">    Freq.index=[<span class="string">&#x27;[下限a&#x27;</span>,<span class="string">&#x27;上限b)&#x27;</span>,<span class="string">&#x27;频数f&#x27;</span>,<span class="string">&#x27;频率p(%)&#x27;</span>,<span class="string">&#x27;累计频数cp(%)&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span>(<span class="built_in">round</span>(Freq.T,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">freq(BSdata.体重) </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>[下限a</th>      <th>上限b)</th>      <th>频数f</th>      <th>频率p(%)</th>      <th>累计频数cp(%)</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>50.0</td>      <td>53.7</td>      <td>1.0</td>      <td>1.92</td>      <td>1.92</td>    </tr>    <tr>      <th>1</th>      <td>53.7</td>      <td>57.4</td>      <td>3.0</td>      <td>5.77</td>      <td>7.69</td>    </tr>    <tr>      <th>2</th>      <td>57.4</td>      <td>61.1</td>      <td>3.0</td>      <td>5.77</td>      <td>13.46</td>    </tr>    <tr>      <th>3</th>      <td>61.1</td>      <td>64.8</td>      <td>7.0</td>      <td>13.46</td>      <td>26.92</td>    </tr>    <tr>      <th>4</th>      <td>64.8</td>      <td>68.5</td>      <td>12.0</td>      <td>23.08</td>      <td>50.00</td>    </tr>    <tr>      <th>5</th>      <td>68.5</td>      <td>72.2</td>      <td>12.0</td>      <td>23.08</td>      <td>73.08</td>    </tr>    <tr>      <th>6</th>      <td>72.2</td>      <td>75.9</td>      <td>4.0</td>      <td>7.69</td>      <td>80.77</td>    </tr>    <tr>      <th>7</th>      <td>75.9</td>      <td>79.6</td>      <td>6.0</td>      <td>11.54</td>      <td>92.31</td>    </tr>    <tr>      <th>8</th>      <td>79.6</td>      <td>83.3</td>      <td>3.0</td>      <td>5.77</td>      <td>98.08</td>    </tr>    <tr>      <th>9</th>      <td>83.3</td>      <td>87.0</td>      <td>1.0</td>      <td>1.92</td>      <td>100.00</td>    </tr>  </tbody></table></div><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070138360.png" alt="png"></p><h3 id="4-3-2-二维集聚表与图"><a href="#4-3-2-二维集聚表与图" class="headerlink" title="4.3.2 二维集聚表与图"></a>4.3.2 二维集聚表与图</h3><h4 id="4-3-2-1-计数数据的列联表"><a href="#4-3-2-1-计数数据的列联表" class="headerlink" title="4.3.2.1 计数数据的列联表"></a>4.3.2.1 计数数据的列联表</h4><p>（1）二维列联表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Pandas的crosstab()函数可以把双变量分类数据整理成二维表形式</span></span><br><span class="line">pd.crosstab(BSdata.开设, BSdata.课程)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>课程</th>      <th>概率统计</th>      <th>统计方法</th>      <th>编程技术</th>      <th>都学习过</th>      <th>都未学过</th>    </tr>    <tr>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>3</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>4</td>    </tr>    <tr>      <th>不清楚</th>      <td>3</td>      <td>3</td>      <td>3</td>      <td>2</td>      <td>1</td>    </tr>    <tr>      <th>有必要</th>      <td>5</td>      <td>10</td>      <td>6</td>      <td>7</td>      <td>1</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#行和列的合计可使用参数 margins=True</span></span><br><span class="line">pd.crosstab(BSdata.开设, BSdata.课程, margins=<span class="literal">True</span>) </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>课程</th>      <th>概率统计</th>      <th>统计方法</th>      <th>编程技术</th>      <th>都学习过</th>      <th>都未学过</th>      <th>All</th>    </tr>    <tr>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>3</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>4</td>      <td>11</td>    </tr>    <tr>      <th>不清楚</th>      <td>3</td>      <td>3</td>      <td>3</td>      <td>2</td>      <td>1</td>      <td>12</td>    </tr>    <tr>      <th>有必要</th>      <td>5</td>      <td>10</td>      <td>6</td>      <td>7</td>      <td>1</td>      <td>29</td>    </tr>    <tr>      <th>All</th>      <td>11</td>      <td>15</td>      <td>10</td>      <td>10</td>      <td>6</td>      <td>52</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#normalize =&#x27;index&#x27;表示各数据占行的比例</span></span><br><span class="line">pd.crosstab(BSdata.开设, BSdata.课程, margins=<span class="literal">True</span>, normalize=<span class="string">&#x27;index&#x27;</span>) </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>课程</th>      <th>概率统计</th>      <th>统计方法</th>      <th>编程技术</th>      <th>都学习过</th>      <th>都未学过</th>    </tr>    <tr>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>0.272727</td>      <td>0.181818</td>      <td>0.090909</td>      <td>0.090909</td>      <td>0.363636</td>    </tr>    <tr>      <th>不清楚</th>      <td>0.250000</td>      <td>0.250000</td>      <td>0.250000</td>      <td>0.166667</td>      <td>0.083333</td>    </tr>    <tr>      <th>有必要</th>      <td>0.172414</td>      <td>0.344828</td>      <td>0.206897</td>      <td>0.241379</td>      <td>0.034483</td>    </tr>    <tr>      <th>All</th>      <td>0.211538</td>      <td>0.288462</td>      <td>0.192308</td>      <td>0.192308</td>      <td>0.115385</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#normalize =&#x27;columns&#x27;表示各数据占列的比例</span></span><br><span class="line">pd.crosstab(BSdata.开设, BSdata.课程, margins=<span class="literal">True</span>, normalize=<span class="string">&#x27;columns&#x27;</span>) </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>课程</th>      <th>概率统计</th>      <th>统计方法</th>      <th>编程技术</th>      <th>都学习过</th>      <th>都未学过</th>      <th>All</th>    </tr>    <tr>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>0.272727</td>      <td>0.133333</td>      <td>0.1</td>      <td>0.1</td>      <td>0.666667</td>      <td>0.211538</td>    </tr>    <tr>      <th>不清楚</th>      <td>0.272727</td>      <td>0.200000</td>      <td>0.3</td>      <td>0.2</td>      <td>0.166667</td>      <td>0.230769</td>    </tr>    <tr>      <th>有必要</th>      <td>0.454545</td>      <td>0.666667</td>      <td>0.6</td>      <td>0.7</td>      <td>0.166667</td>      <td>0.557692</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#normalize =&#x27;all&#x27;，表示各数据占总和的构成比例</span></span><br><span class="line">pd.crosstab(BSdata.开设, BSdata.课程, margins=<span class="literal">True</span>, normalize=<span class="string">&#x27;all&#x27;</span>).<span class="built_in">round</span>(<span class="number">2</span>) </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>课程</th>      <th>概率统计</th>      <th>统计方法</th>      <th>编程技术</th>      <th>都学习过</th>      <th>都未学过</th>      <th>All</th>    </tr>    <tr>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>0.06</td>      <td>0.04</td>      <td>0.02</td>      <td>0.02</td>      <td>0.08</td>      <td>0.21</td>    </tr>    <tr>      <th>不清楚</th>      <td>0.06</td>      <td>0.06</td>      <td>0.06</td>      <td>0.04</td>      <td>0.02</td>      <td>0.23</td>    </tr>    <tr>      <th>有必要</th>      <td>0.10</td>      <td>0.19</td>      <td>0.12</td>      <td>0.13</td>      <td>0.02</td>      <td>0.56</td>    </tr>    <tr>      <th>All</th>      <td>0.21</td>      <td>0.29</td>      <td>0.19</td>      <td>0.19</td>      <td>0.12</td>      <td>1.00</td>    </tr>  </tbody></table></div><p>（2）复式条图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T2=pd.crosstab(BSdata.开设, BSdata.课程);T2 </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>课程</th>      <th>概率统计</th>      <th>统计方法</th>      <th>编程技术</th>      <th>都学习过</th>      <th>都未学过</th>    </tr>    <tr>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>3</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>4</td>    </tr>    <tr>      <th>不清楚</th>      <td>3</td>      <td>3</td>      <td>3</td>      <td>2</td>      <td>1</td>    </tr>    <tr>      <th>有必要</th>      <td>5</td>      <td>10</td>      <td>6</td>      <td>7</td>      <td>1</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T2.plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070138236.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#stacked 参数设置为False时，作出的是分段式条形图；为True时，作出的是并列式条形图</span></span><br><span class="line">T2.plot(kind=<span class="string">&#x27;bar&#x27;</span>, stacked=<span class="literal">True</span>); </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070138029.png" alt="png"></p><h4 id="4-3-2-2-计量数据的集聚表"><a href="#4-3-2-2-计量数据的集聚表" class="headerlink" title="4.3.2.2 计量数据的集聚表"></a>4.3.2.2 计量数据的集聚表</h4><p>（1）分组 groupby 函数 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按列分组 </span></span><br><span class="line">BSdata.groupby([<span class="string">&#x27;性别&#x27;</span>])</span><br><span class="line"><span class="built_in">type</span>(BSdata.groupby([<span class="string">&#x27;性别&#x27;</span>])) <span class="comment">#使用 groupby()函数生成的是一个中间分组变量，为 GroupBy 类型</span></span><br></pre></td></tr></table></figure><pre><code>pandas.core.groupby.generic.DataFrameGroupBy</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按分组统计 </span></span><br><span class="line">BSdata.groupby([<span class="string">&#x27;性别&#x27;</span>])[<span class="string">&#x27;身高&#x27;</span>].mean() </span><br></pre></td></tr></table></figure><pre><code>性别女    165.360000男    171.444444Name: 身高, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.groupby([<span class="string">&#x27;性别&#x27;</span>])[<span class="string">&#x27;身高&#x27;</span>].size() </span><br></pre></td></tr></table></figure><pre><code>性别女    25男    27Name: 身高, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.groupby([<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;开设&#x27;</span>])[<span class="string">&#x27;身高&#x27;</span>].mean() </span><br></pre></td></tr></table></figure><pre><code>性别  开设 女   不必要    165.166667    不清楚    164.555556    有必要    166.200000男   不必要    180.200000    不清楚    173.333333    有必要    168.842105Name: 身高, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 聚集函数 agg() </span></span><br><span class="line">BSdata.groupby([<span class="string">&#x27;性别&#x27;</span>])[<span class="string">&#x27;身高&#x27;</span>].agg([np.mean, np.std]) </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>mean</th>      <th>std</th>    </tr>    <tr>      <th>性别</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>女</th>      <td>165.360000</td>      <td>5.179125</td>    </tr>    <tr>      <th>男</th>      <td>171.444444</td>      <td>9.103395</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用函数 apply()</span></span><br><span class="line">BSdata.groupby([<span class="string">&#x27;性别&#x27;</span>])[<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>].apply(np.mean) </span><br></pre></td></tr></table></figure><pre><code>C:\Users\kit\AppData\Local\Temp/ipykernel_16520/1696986927.py:2: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.  BSdata.groupby([&#39;性别&#39;])[&#39;身高&#39;,&#39;体重&#39;].apply(np.mean)</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>身高</th>      <th>体重</th>    </tr>    <tr>      <th>性别</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>女</th>      <td>165.360000</td>      <td>66.240000</td>    </tr>    <tr>      <th>男</th>      <td>171.444444</td>      <td>70.592593</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.groupby([<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;开设&#x27;</span>])[<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>].apply(np.mean) </span><br></pre></td></tr></table></figure><pre><code>C:\Users\kit\AppData\Local\Temp/ipykernel_16520/3542829955.py:1: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.  BSdata.groupby([&#39;性别&#39;,&#39;开设&#39;])[&#39;身高&#39;,&#39;体重&#39;].apply(np.mean)</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>身高</th>      <th>体重</th>    </tr>    <tr>      <th>性别</th>      <th>开设</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="3" valign="top">女</th>      <th>不必要</th>      <td>165.166667</td>      <td>67.333333</td>    </tr>    <tr>      <th>不清楚</th>      <td>164.555556</td>      <td>64.666667</td>    </tr>    <tr>      <th>有必要</th>      <td>166.200000</td>      <td>67.000000</td>    </tr>    <tr>      <th rowspan="3" valign="top">男</th>      <th>不必要</th>      <td>180.200000</td>      <td>79.200000</td>    </tr>    <tr>      <th>不清楚</th>      <td>173.333333</td>      <td>72.666667</td>    </tr>    <tr>      <th>有必要</th>      <td>168.842105</td>      <td>68.000000</td>    </tr>  </tbody></table></div><h3 id="4-3-3-多维透视表与图"><a href="#4-3-3-多维透视表与图" class="headerlink" title="4.3.3 多维透视表与图"></a>4.3.3 多维透视表与图</h3><h4 id="4-3-3-1-计数数据透视表与图"><a href="#4-3-3-1-计数数据透视表与图" class="headerlink" title="4.3.3.1 计数数据透视表与图"></a>4.3.3.1 计数数据透视表与图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pt11=BSdata.pivot_table(values=[&#x27;学号&#x27;],index=[&#x27;性别&#x27;],aggfunc=len)</span></span><br><span class="line">pt11=BSdata.pivot_table([<span class="string">&#x27;学号&#x27;</span>],[<span class="string">&#x27;性别&#x27;</span>],aggfunc=<span class="built_in">len</span>); pt11   <span class="comment">#len分组长度</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>    </tr>    <tr>      <th>性别</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>女</th>      <td>25</td>    </tr>    <tr>      <th>男</th>      <td>27</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt11.plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070138242.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pt12=BSdata.pivot_table(values=[&#x27;学号&#x27;],index=[&#x27;性别&#x27;,&#x27;开设&#x27;],aggfunc=len)</span></span><br><span class="line">pt12=BSdata.pivot_table([<span class="string">&#x27;学号&#x27;</span>],[<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;开设&#x27;</span>],aggfunc=<span class="built_in">len</span>);pt12</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>学号</th>    </tr>    <tr>      <th>性别</th>      <th>开设</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="3" valign="top">女</th>      <th>不必要</th>      <td>6</td>    </tr>    <tr>      <th>不清楚</th>      <td>9</td>    </tr>    <tr>      <th>有必要</th>      <td>10</td>    </tr>    <tr>      <th rowspan="3" valign="top">男</th>      <th>不必要</th>      <td>5</td>    </tr>    <tr>      <th>不清楚</th>      <td>3</td>    </tr>    <tr>      <th>有必要</th>      <td>19</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt12.plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070138608.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pt13=BSdata.pivot_table(values=[&#x27;学号&#x27;],index=[&#x27;开设&#x27;],columns=[&#x27;性别&#x27;],aggfunc=len);</span></span><br><span class="line">pt13=BSdata.pivot_table([<span class="string">&#x27;学号&#x27;</span>], [<span class="string">&#x27;开设&#x27;</span>], [<span class="string">&#x27;性别&#x27;</span>], aggfunc=<span class="built_in">len</span>); pt13 </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th colspan="2" halign="left">学号</th>    </tr>    <tr>      <th>性别</th>      <th>女</th>      <th>男</th>    </tr>    <tr>      <th>开设</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>不必要</th>      <td>6</td>      <td>5</td>    </tr>    <tr>      <th>不清楚</th>      <td>9</td>      <td>3</td>    </tr>    <tr>      <th>有必要</th>      <td>10</td>      <td>19</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt13.plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070138329.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt13.plot(kind=<span class="string">&#x27;bar&#x27;</span>,stacked=<span class="literal">True</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070139167.png" alt="png"></p><h4 id="4-3-3-2-计量数据透视表与图"><a href="#4-3-3-2-计量数据透视表与图" class="headerlink" title="4.3.3.2 计量数据透视表与图"></a>4.3.3.2 计量数据透视表与图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt21=BSdata.pivot_table(index=[<span class="string">&#x27;性别&#x27;</span>], values=[<span class="string">&quot;身高&quot;</span>], aggfunc=np.mean);pt21</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>身高</th>    </tr>    <tr>      <th>性别</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>女</th>      <td>165.360000</td>    </tr>    <tr>      <th>男</th>      <td>171.444444</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt21.plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070139444.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pt22=BSdata.pivot_table(index=[<span class="string">&#x27;性别&#x27;</span>], values=[<span class="string">&quot;身高&quot;</span>], aggfunc=[np.mean,np.std]);</span><br><span class="line">pt22</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th>mean</th>      <th>std</th>    </tr>    <tr>      <th></th>      <th>身高</th>      <th>身高</th>    </tr>    <tr>      <th>性别</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>女</th>      <td>165.360000</td>      <td>5.179125</td>    </tr>    <tr>      <th>男</th>      <td>171.444444</td>      <td>9.103395</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt22.iloc[:,<span class="number">0</span>].plot(kind=<span class="string">&#x27;bar&#x27;</span>,yerr=pt22.iloc[:,<span class="number">1</span>]); <span class="comment">#标准差条图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070139267.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt23=BSdata.pivot_table(index=[<span class="string">&quot;性别&quot;</span>], values=[<span class="string">&quot;身高&quot;</span>,<span class="string">&quot;体重&quot;</span>]);pt23 <span class="comment"># 默认计算均值 </span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>体重</th>      <th>身高</th>    </tr>    <tr>      <th>性别</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>女</th>      <td>66.240000</td>      <td>165.360000</td>    </tr>    <tr>      <th>男</th>      <td>70.592593</td>      <td>171.444444</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt23.plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070139241.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt23.plot(kind=<span class="string">&#x27;bar&#x27;</span>,subplots=<span class="literal">True</span>,layout=(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070139627.png" alt="png"></p><h4 id="4-3-3-3-复合数据透视表与图"><a href="#4-3-3-3-复合数据透视表与图" class="headerlink" title="4.3.3.3 复合数据透视表与图"></a>4.3.3.3 复合数据透视表与图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BSdata.pivot_table(<span class="string">&#x27;学号&#x27;</span>, [<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;开设&#x27;</span>], <span class="string">&#x27;课程&#x27;</span>, aggfunc=<span class="built_in">len</span>,  </span><br><span class="line">                   margins=<span class="literal">True</span>, margins_name=<span class="string">&#x27;合计&#x27;</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>课程</th>      <th>概率统计</th>      <th>统计方法</th>      <th>编程技术</th>      <th>都学习过</th>      <th>都未学过</th>      <th>合计</th>    </tr>    <tr>      <th>性别</th>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="3" valign="top">女</th>      <th>不必要</th>      <td>1.0</td>      <td>1.0</td>      <td>NaN</td>      <td>1.0</td>      <td>3.0</td>      <td>6</td>    </tr>    <tr>      <th>不清楚</th>      <td>2.0</td>      <td>1.0</td>      <td>3.0</td>      <td>2.0</td>      <td>1.0</td>      <td>9</td>    </tr>    <tr>      <th>有必要</th>      <td>NaN</td>      <td>5.0</td>      <td>3.0</td>      <td>2.0</td>      <td>NaN</td>      <td>10</td>    </tr>    <tr>      <th rowspan="3" valign="top">男</th>      <th>不必要</th>      <td>2.0</td>      <td>1.0</td>      <td>1.0</td>      <td>NaN</td>      <td>1.0</td>      <td>5</td>    </tr>    <tr>      <th>不清楚</th>      <td>1.0</td>      <td>2.0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>3</td>    </tr>    <tr>      <th>有必要</th>      <td>5.0</td>      <td>5.0</td>      <td>3.0</td>      <td>5.0</td>      <td>1.0</td>      <td>19</td>    </tr>    <tr>      <th>合计</th>      <th></th>      <td>11.0</td>      <td>15.0</td>      <td>10.0</td>      <td>10.0</td>      <td>6.0</td>      <td>52</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pt31=BSdata.pivot_table(<span class="string">&#x27;学号&#x27;</span>,[<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;开设&#x27;</span>],<span class="string">&#x27;课程&#x27;</span>,aggfunc=<span class="built_in">len</span>)</span><br><span class="line">pt31</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>课程</th>      <th>概率统计</th>      <th>统计方法</th>      <th>编程技术</th>      <th>都学习过</th>      <th>都未学过</th>    </tr>    <tr>      <th>性别</th>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="3" valign="top">女</th>      <th>不必要</th>      <td>1.0</td>      <td>1.0</td>      <td>NaN</td>      <td>1.0</td>      <td>3.0</td>    </tr>    <tr>      <th>不清楚</th>      <td>2.0</td>      <td>1.0</td>      <td>3.0</td>      <td>2.0</td>      <td>1.0</td>    </tr>    <tr>      <th>有必要</th>      <td>NaN</td>      <td>5.0</td>      <td>3.0</td>      <td>2.0</td>      <td>NaN</td>    </tr>    <tr>      <th rowspan="3" valign="top">男</th>      <th>不必要</th>      <td>2.0</td>      <td>1.0</td>      <td>1.0</td>      <td>NaN</td>      <td>1.0</td>    </tr>    <tr>      <th>不清楚</th>      <td>1.0</td>      <td>2.0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>有必要</th>      <td>5.0</td>      <td>5.0</td>      <td>3.0</td>      <td>5.0</td>      <td>1.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt31.plot(kind=<span class="string">&#x27;bar&#x27;</span>,stacked=<span class="literal">False</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070139609.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt32=BSdata.pivot_table([<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>],[<span class="string">&#x27;性别&#x27;</span>,<span class="string">&quot;开设&quot;</span>],aggfunc=[<span class="built_in">len</span>,np.mean,np.std]);pt32</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th></th>      <th colspan="2" halign="left">len</th>      <th colspan="2" halign="left">mean</th>      <th colspan="2" halign="left">std</th>    </tr>    <tr>      <th></th>      <th></th>      <th>体重</th>      <th>身高</th>      <th>体重</th>      <th>身高</th>      <th>体重</th>      <th>身高</th>    </tr>    <tr>      <th>性别</th>      <th>开设</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="3" valign="top">女</th>      <th>不必要</th>      <td>6</td>      <td>6</td>      <td>67.333333</td>      <td>165.166667</td>      <td>3.326660</td>      <td>2.786874</td>    </tr>    <tr>      <th>不清楚</th>      <td>9</td>      <td>9</td>      <td>64.666667</td>      <td>164.555556</td>      <td>6.000000</td>      <td>6.502136</td>    </tr>    <tr>      <th>有必要</th>      <td>10</td>      <td>10</td>      <td>67.000000</td>      <td>166.200000</td>      <td>5.333333</td>      <td>5.308274</td>    </tr>    <tr>      <th rowspan="3" valign="top">男</th>      <th>不必要</th>      <td>5</td>      <td>5</td>      <td>79.200000</td>      <td>180.200000</td>      <td>4.438468</td>      <td>4.147288</td>    </tr>    <tr>      <th>不清楚</th>      <td>3</td>      <td>3</td>      <td>72.666667</td>      <td>173.333333</td>      <td>5.033223</td>      <td>5.686241</td>    </tr>    <tr>      <th>有必要</th>      <td>19</td>      <td>19</td>      <td>68.000000</td>      <td>168.842105</td>      <td>9.165151</td>      <td>9.124224</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt32.iloc[:,:<span class="number">2</span>].plot(kind=<span class="string">&#x27;bar&#x27;</span>); </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070139188.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt32.iloc[:,<span class="number">2</span>:<span class="number">4</span>].plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070139534.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt32.iloc[:,<span class="number">4</span>:<span class="number">6</span>].plot(kind=<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070139939.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt32.iloc[:,<span class="number">2</span>].plot(kind=<span class="string">&#x27;bar&#x27;</span>, yerr=pt32.iloc[:,<span class="number">4</span>]); <span class="comment">#基于性别和开设的体重标准差条图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070139298.png" alt="png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第4章-数据的探索性分析&quot;&gt;&lt;a href=&quot;#第4章-数据的探索性分析&quot; class=&quot;headerlink&quot; title=&quot;第4章 数据的探索性分析&quot;&gt;&lt;/a&gt;第4章 数据的探索性分析&lt;/h2&gt;&lt;h3 id=&quot;4-1-数据的描述分析&quot;&gt;&lt;a href=&quot;#4-</summary>
      
    
    
    
    <category term="《数据可视化》——基于Python的应用" scheme="https://zhangkh.top/categories/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%8B%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="《数据可视化》——基于Python的应用" scheme="https://zhangkh.top/tags/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%8B%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>第2章-数据的收集与整理第3章-Python编程基础</title>
    <link href="https://zhangkh.top/2004cd38.html"/>
    <id>https://zhangkh.top/2004cd38.html</id>
    <published>2021-12-06T17:18:36.000Z</published>
    <updated>2021-12-06T17:32:47.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第2章-数据的收集与整理"><a href="#第2章-数据的收集与整理" class="headerlink" title="第2章  数据的收集与整理"></a>第2章  数据的收集与整理</h2><p><img src="https://gitee.com/cit_k/pictures/raw/master/picture/202112070132206.png" alt="img"></p><h2 id="2-1-数据的类型"><a href="#2-1-数据的类型" class="headerlink" title="2.1  数据的类型"></a>2.1  数据的类型</h2><h3 id="2-1-1-按度量尺度分"><a href="#2-1-1-按度量尺度分" class="headerlink" title="2.1.1  按度量尺度分"></a>2.1.1  按度量尺度分</h3><p>2.1.1.1 定性数据</p><p>性别:女,男,男,女,男,男,女,男,女,男,女,男,女,女,男</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">性别=[<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;男&#x27;</span>];性别</span><br></pre></td></tr></table></figure><pre><code>[&#39;女&#39;, &#39;男&#39;, &#39;男&#39;, &#39;女&#39;, &#39;男&#39;, &#39;男&#39;, &#39;女&#39;, &#39;男&#39;, &#39;女&#39;, &#39;男&#39;, &#39;女&#39;, &#39;男&#39;, &#39;女&#39;, &#39;女&#39;, &#39;男&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sex=[<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;男&#x27;</span>];sex</span><br></pre></td></tr></table></figure><pre><code>[&#39;女&#39;, &#39;男&#39;, &#39;男&#39;, &#39;女&#39;, &#39;男&#39;, &#39;男&#39;, &#39;女&#39;, &#39;男&#39;, &#39;女&#39;, &#39;男&#39;, &#39;女&#39;, &#39;男&#39;, &#39;女&#39;, &#39;女&#39;, &#39;男&#39;]</code></pre><p>2.1.1.2 定量数据</p><p>体重:67,66,83,68,70,90,70,58,63,72,65,76,71,66,77</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">体重=[<span class="number">67</span>,<span class="number">66</span>,<span class="number">83</span>,<span class="number">68</span>,<span class="number">70</span>,<span class="number">90</span>,<span class="number">70</span>,<span class="number">58</span>,<span class="number">63</span>,<span class="number">72</span>,<span class="number">65</span>,<span class="number">76</span>,<span class="number">71</span>,<span class="number">66</span>];体重</span><br></pre></td></tr></table></figure><pre><code>[67, 66, 83, 68, 70, 90, 70, 58, 63, 72, 65, 76, 71, 66]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weight=[<span class="number">67</span>,<span class="number">66</span>,<span class="number">83</span>,<span class="number">68</span>,<span class="number">70</span>,<span class="number">90</span>,<span class="number">70</span>,<span class="number">58</span>,<span class="number">63</span>,<span class="number">72</span>,<span class="number">65</span>,<span class="number">76</span>,<span class="number">71</span>,<span class="number">66</span>];weight</span><br></pre></td></tr></table></figure><pre><code>[67, 66, 83, 68, 70, 90, 70, 58, 63, 72, 65, 76, 71, 66]</code></pre><h3 id="2-1-2-按时间状况分"><a href="#2-1-2-按时间状况分" class="headerlink" title="2.1.2  按时间状况分"></a>2.1.2  按时间状况分</h3><p>2.1.2.1 纵向数据</p><p>2.1.2.2 面板数据</p><h2 id="2-2-数据的收集"><a href="#2-2-数据的收集" class="headerlink" title="2.2  数据的收集"></a>2.2  数据的收集</h2><h3 id="2-2-1-横向数据的收集"><a href="#2-2-1-横向数据的收集" class="headerlink" title="2.2.1 横向数据的收集"></a>2.2.1 横向数据的收集</h3><p>使用问卷星设计网络化调查问卷，进入问卷星 <a href="https://www.wjx.cn/">https://www.wjx.cn</a> 网站可快速设计。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_rows&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">pd.read_excel(<span class="string">&#x27;DaPy_data.xlsx&#x27;</span>,<span class="string">&#x27;BSdata&#x27;</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1510248008</td>      <td>女</td>      <td>167</td>      <td>71</td>      <td>46.0</td>      <td>不清楚</td>      <td>都未学过</td>      <td>No</td>    </tr>    <tr>      <th>1</th>      <td>1510229019</td>      <td>男</td>      <td>171</td>      <td>68</td>      <td>10.4</td>      <td>有必要</td>      <td>概率统计</td>      <td>Matlab</td>    </tr>    <tr>      <th>2</th>      <td>1512108019</td>      <td>女</td>      <td>175</td>      <td>73</td>      <td>21.0</td>      <td>有必要</td>      <td>统计方法</td>      <td>SPSS</td>    </tr>    <tr>      <th>3</th>      <td>1512332010</td>      <td>男</td>      <td>169</td>      <td>74</td>      <td>4.9</td>      <td>有必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>    <tr>      <th>4</th>      <td>1512331015</td>      <td>男</td>      <td>154</td>      <td>55</td>      <td>25.9</td>      <td>有必要</td>      <td>都学习过</td>      <td>Python</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>47</th>      <td>1538319004</td>      <td>男</td>      <td>175</td>      <td>68</td>      <td>44.4</td>      <td>不清楚</td>      <td>统计方法</td>      <td>SAS</td>    </tr>    <tr>      <th>48</th>      <td>1538254010</td>      <td>女</td>      <td>166</td>      <td>65</td>      <td>5.3</td>      <td>不清楚</td>      <td>编程技术</td>      <td>Python</td>    </tr>    <tr>      <th>49</th>      <td>1540294017</td>      <td>女</td>      <td>159</td>      <td>58</td>      <td>71.4</td>      <td>不清楚</td>      <td>都学习过</td>      <td>SPSS</td>    </tr>    <tr>      <th>50</th>      <td>1540365026</td>      <td>女</td>      <td>169</td>      <td>73</td>      <td>5.5</td>      <td>有必要</td>      <td>统计方法</td>      <td>Excel</td>    </tr>    <tr>      <th>51</th>      <td>1540388036</td>      <td>女</td>      <td>165</td>      <td>67</td>      <td>56.8</td>      <td>不必要</td>      <td>概率统计</td>      <td>SAS</td>    </tr>  </tbody></table><p>52 rows × 8 columns</p></div><h3 id="2-2-2-纵向数据的收集"><a href="#2-2-2-纵向数据的收集" class="headerlink" title="2.2.2 纵向数据的收集"></a>2.2.2 纵向数据的收集</h3><p>例2.2 季节数据：经济数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.read_excel(<span class="string">&#x27;DaPy_data.xlsx&#x27;</span>,<span class="string">&#x27;YQdata&#x27;</span>) <span class="comment">#横向表</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Year</th>      <th>Q1</th>      <th>Q2</th>      <th>Q3</th>      <th>Q4</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2001</td>      <td>2.330</td>      <td>2.565</td>      <td>2.687</td>      <td>3.384</td>    </tr>    <tr>      <th>1</th>      <td>2002</td>      <td>2.536</td>      <td>2.797</td>      <td>2.972</td>      <td>3.728</td>    </tr>    <tr>      <th>2</th>      <td>2003</td>      <td>2.886</td>      <td>3.101</td>      <td>3.346</td>      <td>4.249</td>    </tr>    <tr>      <th>3</th>      <td>2004</td>      <td>3.342</td>      <td>3.699</td>      <td>3.956</td>      <td>4.991</td>    </tr>    <tr>      <th>4</th>      <td>2005</td>      <td>3.912</td>      <td>4.280</td>      <td>4.474</td>      <td>5.828</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>10</th>      <td>2011</td>      <td>9.748</td>      <td>10.901</td>      <td>11.586</td>      <td>15.076</td>    </tr>    <tr>      <th>11</th>      <td>2012</td>      <td>10.837</td>      <td>11.963</td>      <td>12.574</td>      <td>16.573</td>    </tr>    <tr>      <th>12</th>      <td>2013</td>      <td>11.886</td>      <td>12.916</td>      <td>13.908</td>      <td>20.092</td>    </tr>    <tr>      <th>13</th>      <td>2014</td>      <td>12.821</td>      <td>14.083</td>      <td>15.086</td>      <td>21.656</td>    </tr>    <tr>      <th>14</th>      <td>2015</td>      <td>14.067</td>      <td>17.351</td>      <td>17.316</td>      <td>18.937</td>    </tr>  </tbody></table><p>15 rows × 5 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.read_excel(<span class="string">&#x27;DaPy_data.xlsx&#x27;</span>,<span class="string">&#x27;QTdata&#x27;</span>) <span class="comment">#纵向表</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>YQ</th>      <th>GDP</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2001Q1</td>      <td>2.330</td>    </tr>    <tr>      <th>1</th>      <td>2001Q2</td>      <td>2.565</td>    </tr>    <tr>      <th>2</th>      <td>2001Q3</td>      <td>2.687</td>    </tr>    <tr>      <th>3</th>      <td>2001Q4</td>      <td>3.384</td>    </tr>    <tr>      <th>4</th>      <td>2002Q1</td>      <td>2.536</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>55</th>      <td>2014Q4</td>      <td>21.656</td>    </tr>    <tr>      <th>56</th>      <td>2015Q1</td>      <td>14.067</td>    </tr>    <tr>      <th>57</th>      <td>2015Q2</td>      <td>17.351</td>    </tr>    <tr>      <th>58</th>      <td>2015Q3</td>      <td>17.316</td>    </tr>    <tr>      <th>59</th>      <td>2015Q4</td>      <td>18.937</td>    </tr>  </tbody></table><p>60 rows × 2 columns</p></div><p>例2.3  日期数据：股票数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.read_excel(<span class="string">&#x27;DaPy_data.xlsx&#x27;</span>,<span class="string">&#x27;Stock&#x27;</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>date</th>      <th>Open</th>      <th>High</th>      <th>Low</th>      <th>Close</th>      <th>Volume</th>      <th>Adjusted</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2005-01-03</td>      <td>0.70247</td>      <td>0.71728</td>      <td>0.70247</td>      <td>0.71296</td>      <td>0.0</td>      <td>0.618499</td>    </tr>    <tr>      <th>1</th>      <td>2005-01-04</td>      <td>0.70988</td>      <td>0.72145</td>      <td>0.69414</td>      <td>0.69599</td>      <td>10958717.0</td>      <td>0.603777</td>    </tr>    <tr>      <th>2</th>      <td>2005-01-05</td>      <td>0.69506</td>      <td>0.70818</td>      <td>0.69506</td>      <td>0.70525</td>      <td>6165072.0</td>      <td>0.611810</td>    </tr>    <tr>      <th>3</th>      <td>2005-01-06</td>      <td>0.70231</td>      <td>0.70648</td>      <td>0.69614</td>      <td>0.69676</td>      <td>9845971.0</td>      <td>0.604445</td>    </tr>    <tr>      <th>4</th>      <td>2005-01-07</td>      <td>0.69599</td>      <td>0.70957</td>      <td>0.69460</td>      <td>0.70201</td>      <td>13667162.0</td>      <td>0.608999</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>3175</th>      <td>2017-12-25</td>      <td>12.73000</td>      <td>12.74000</td>      <td>12.25000</td>      <td>12.38000</td>      <td>65681626.0</td>      <td>12.380000</td>    </tr>    <tr>      <th>3176</th>      <td>2017-12-26</td>      <td>12.46000</td>      <td>12.54000</td>      <td>12.37000</td>      <td>12.52000</td>      <td>30913299.0</td>      <td>12.520000</td>    </tr>    <tr>      <th>3177</th>      <td>2017-12-27</td>      <td>12.54000</td>      <td>12.57000</td>      <td>12.10000</td>      <td>12.18000</td>      <td>53813380.0</td>      <td>12.180000</td>    </tr>    <tr>      <th>3178</th>      <td>2017-12-28</td>      <td>12.20000</td>      <td>12.28000</td>      <td>12.06000</td>      <td>12.18000</td>      <td>33692919.0</td>      <td>12.180000</td>    </tr>    <tr>      <th>3179</th>      <td>2017-12-29</td>      <td>12.18000</td>      <td>12.33000</td>      <td>12.14000</td>      <td>12.29000</td>      <td>25372331.0</td>      <td>12.290000</td>    </tr>  </tbody></table><p>3180 rows × 7 columns</p></div><h2 id="2-3-数据的管理"><a href="#2-3-数据的管理" class="headerlink" title="2.3  数据的管理"></a>2.3  数据的管理</h2><h3 id="2-3-1-表格管理数据"><a href="#2-3-1-表格管理数据" class="headerlink" title="2.3.1 表格管理数据"></a>2.3.1 表格管理数据</h3><h3 id="2-3-2-数据库管理数据"><a href="#2-3-2-数据库管理数据" class="headerlink" title="2.3.2 数据库管理数据"></a>2.3.2 数据库管理数据</h3><h3 id="2-3-3-Python数据管理"><a href="#2-3-3-Python数据管理" class="headerlink" title="2.3.3 Python数据管理"></a>2.3.3 Python数据管理</h3><h2 id="第3章-Python-编程基础"><a href="#第3章-Python-编程基础" class="headerlink" title="第3章 Python 编程基础"></a>第3章 Python 编程基础</h2><ul><li>网上有大量的Python编程基础知识介绍，如 <a href="http://www.runoob.com/Python/Python-dictionary.html">http://www.runoob.com/Python/Python-dictionary.html</a> </li></ul><blockquote><p>由于本书重点介绍Python的数据分析，所以对Python编程的基础知识将不展开讨论。</p></blockquote><h2 id="3-1-Python-编程运算"><a href="#3-1-Python-编程运算" class="headerlink" title="3.1 Python 编程运算"></a>3.1 Python 编程运算</h2><h3 id="3-1-1-基本运算"><a href="#3-1-1-基本运算" class="headerlink" title="3.1.1 基本运算"></a>3.1.1 基本运算</h3><h3 id="3-1-2-控制语句"><a href="#3-1-2-控制语句" class="headerlink" title="3.1.2 控制语句"></a>3.1.2 控制语句</h3><ul><li>3.1.2.1 循环语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]: <span class="comment">#range(1,n)表示1到n-1的列表</span></span><br><span class="line">    print(i) </span><br></pre></td></tr></table></figure><pre><code>1234</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>)]  <span class="comment">#循环的简洁写法</span></span><br></pre></td></tr></table></figure><pre><code>[1, 2, 3, 4]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#fruits = [&#x27;banana&#x27;, &#x27;apple&#x27;, &#x27;mango&#x27;] </span></span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> [<span class="string">&#x27;banana&#x27;</span>,<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;mango&#x27;</span>]:  <span class="comment">#fruits: </span></span><br><span class="line">    print(<span class="string">&#x27;当前水果 :&#x27;</span>, fruit)</span><br></pre></td></tr></table></figure><pre><code>当前水果 : banana当前水果 : apple当前水果 : mango</code></pre><ul><li>3.1.2.2 条件语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = -<span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> a &lt; <span class="number">100</span>:</span><br><span class="line">    print(<span class="string">&quot;a的数值小于 100&quot;</span>) </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    print(<span class="string">&quot;a的数值大于 100&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>a的数值小于 100</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a <span class="keyword">if</span> a&lt;<span class="number">0</span> <span class="keyword">else</span> a   <span class="comment">#ifelse的简洁语法</span></span><br></pre></td></tr></table></figure><pre><code>-100</code></pre><h3 id="3-1-3-函数定义"><a href="#3-1-3-函数定义" class="headerlink" title="3.1.3 函数定义"></a>3.1.3 函数定义</h3><ul><li><p>3.1.3.1 内置函数</p></li><li><p>3.1.3.2 自定义函数</p></li></ul><p>def 函数名(参数1, 参数2, …)：<br>      函数体<br>    return</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xbar</span>(<span class="params">x</span>):</span> </span><br><span class="line">    n=<span class="built_in">len</span>(x) </span><br><span class="line">    S=<span class="built_in">sum</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> x])    </span><br><span class="line">    xbar=S/n              <span class="comment">#sum(x)/n</span></span><br><span class="line">    <span class="keyword">return</span>(xbar) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">2</span>]; X </span><br></pre></td></tr></table></figure><pre><code>[1, 3, 6, 4, 9, 7, 5, 8, 2]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xbar(X)</span><br></pre></td></tr></table></figure><pre><code>5.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.mean(X)         <span class="comment">#Python已内建这些函数命令，可直接使用</span></span><br></pre></td></tr></table></figure><pre><code>5.0</code></pre><h3 id="3-1-4-面向对象"><a href="#3-1-4-面向对象" class="headerlink" title="3.1.4 面向对象"></a>3.1.4 面向对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SS1</span>(<span class="params">x</span>):</span>                       <span class="comment">#计算离均差平方和函数</span></span><br><span class="line">    n=<span class="built_in">len</span>(x) </span><br><span class="line">    S1=<span class="built_in">sum</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> x])        <span class="comment">#计算列表的和</span></span><br><span class="line">    S2x=<span class="built_in">sum</span>([i*i <span class="keyword">for</span> i <span class="keyword">in</span> x])     <span class="comment">#计算列表的平方和</span></span><br><span class="line">    Sx2=<span class="built_in">sum</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> x])**<span class="number">2</span>    <span class="comment">#计算列表和的平方</span></span><br><span class="line">    SS=S2x-Sx2/n     </span><br><span class="line">    <span class="keyword">return</span>(SS)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">2</span>]</span><br><span class="line">SS1(X) </span><br></pre></td></tr></table></figure><pre><code>60.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SS2</span>(<span class="params">x</span>):</span>                       <span class="comment">#返回多个值函数</span></span><br><span class="line">    n=<span class="built_in">len</span>(x) </span><br><span class="line">    S1=<span class="built_in">sum</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> x])        <span class="comment">#计算列表的和</span></span><br><span class="line">    xbar=S1/n</span><br><span class="line">    S2x=<span class="built_in">sum</span>([i*i <span class="keyword">for</span> i <span class="keyword">in</span> x])     <span class="comment">#计算列表的平方和</span></span><br><span class="line">    Sx2=<span class="built_in">sum</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> x])**<span class="number">2</span>    <span class="comment">#计算列表和的平方</span></span><br><span class="line">    SS=S2x-Sx2/n     </span><br><span class="line">    <span class="keyword">return</span>[n,S1,xbar,S2x,Sx2,SS]  </span><br><span class="line">    <span class="comment">#返回例数、均值、平方和、和的平方、离均差平方和的列表</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SS2(X)  </span><br></pre></td></tr></table></figure><pre><code>[9, 45, 5.0, 285, 2025, 60.0]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SS2(X)[<span class="number">0</span>] <span class="comment">#取第 1 个对象 </span></span><br></pre></td></tr></table></figure><pre><code>9</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SS2(X)[<span class="number">1</span>] <span class="comment">#取第 2 个对象 </span></span><br></pre></td></tr></table></figure><pre><code>45</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SS2(X)[<span class="number">2</span>] <span class="comment">#取第 3 个对象 </span></span><br></pre></td></tr></table></figure><pre><code>5.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SS2(X)[<span class="number">3</span>] <span class="comment">#取第 4 个对象 </span></span><br></pre></td></tr></table></figure><pre><code>285</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SS2(X)[<span class="number">4</span>] <span class="comment">#取第 5 个对象</span></span><br></pre></td></tr></table></figure><pre><code>2025</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SS2(X)[<span class="number">5</span>] <span class="comment">#取第 6 个对象</span></span><br></pre></td></tr></table></figure><pre><code>60.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以使用 type 函数来查看数据或对象的类型</span></span><br><span class="line"><span class="built_in">type</span>(SS2(X)) </span><br></pre></td></tr></table></figure><pre><code>list</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>(SS2(X)[<span class="number">3</span>]) </span><br></pre></td></tr></table></figure><pre><code>int</code></pre><h2 id="3-2-数值分析库-numpy"><a href="#3-2-数值分析库-numpy" class="headerlink" title="3.2 数值分析库 numpy"></a>3.2 数值分析库 numpy</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell <span class="keyword">as</span> IS</span><br><span class="line">IS.ast_node_interactivity = <span class="string">&quot;all&quot;</span>            <span class="comment">#多行命令一次输出</span></span><br></pre></td></tr></table></figure><h2 id="3-2-1-一维数组"><a href="#3-2-1-一维数组" class="headerlink" title="3.2.1 一维数组"></a>3.2.1 一维数组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np         <span class="comment">#加载数组包</span></span><br><span class="line">np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])      <span class="comment">#一维数组</span></span><br></pre></td></tr></table></figure><pre><code>array([1, 2, 3, 4, 5])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,np.nan,<span class="number">5</span>]) <span class="comment">#包含缺失值的数</span></span><br></pre></td></tr></table></figure><pre><code>array([ 1.,  2.,  3., nan,  5.])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">9</span>)               <span class="comment">#数组序列 </span></span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">1</span>,<span class="number">19</span>,<span class="number">0.5</span>)         <span class="comment">#等差数列 </span></span><br></pre></td></tr></table></figure><pre><code>array([ 1. ,  1.5,  2. ,  2.5,  3. ,  3.5,  4. ,  4.5,  5. ,  5.5,  6. ,        6.5,  7. ,  7.5,  8. ,  8.5,  9. ,  9.5, 10. , 10.5, 11. , 11.5,       12. , 12.5, 13. , 13.5, 14. , 14.5, 15. , 15.5, 16. , 16.5, 17. ,       17.5, 18. , 18.5])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linspace(<span class="number">1</span>,<span class="number">19</span>,<span class="number">5</span>)         <span class="comment">#等距数列</span></span><br></pre></td></tr></table></figure><pre><code>array([ 1. ,  5.5, 10. , 14.5, 19. ])</code></pre><h3 id="3-2-2-二维数组"><a href="#3-2-2-二维数组" class="headerlink" title="3.2.2 二维数组"></a>3.2.2 二维数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B=np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">7</span>]]);B   <span class="comment">#二维数组</span></span><br></pre></td></tr></table></figure><pre><code>array([[1, 2],       [3, 4],       [5, 7]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>]])   <span class="comment">#二维数组</span></span><br></pre></td></tr></table></figure><pre><code>array([[1, 2, 3],       [3, 4, 5],       [5, 6, 6]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A=np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>,<span class="number">3</span>));A <span class="comment">#形成 3×3 矩阵</span></span><br></pre></td></tr></table></figure><pre><code>array([[0, 1, 2],       [3, 4, 5],       [6, 7, 8]])</code></pre><h3 id="3-2-3-数组的操作"><a href="#3-2-3-数组的操作" class="headerlink" title="3.2.3 数组的操作"></a>3.2.3 数组的操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.shape            <span class="comment">#数组的维度</span></span><br></pre></td></tr></table></figure><pre><code>(3, 3)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.shape[<span class="number">0</span>]        <span class="comment">#数组的行数</span></span><br></pre></td></tr></table></figure><pre><code>3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.shape[<span class="number">1</span>]        <span class="comment">#数组的列数</span></span><br></pre></td></tr></table></figure><pre><code>3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B.shape</span><br></pre></td></tr></table></figure><pre><code>(3, 2)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.diag(A)         <span class="comment">#对角阵    </span></span><br></pre></td></tr></table></figure><pre><code>array([0, 4, 8])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Z=np.zeros((<span class="number">3</span>,<span class="number">3</span>));Z    <span class="comment">#零矩阵 </span></span><br></pre></td></tr></table></figure><pre><code>array([[0., 0., 0.],       [0., 0., 0.],       [0., 0., 0.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">J=np.ones((<span class="number">3</span>,<span class="number">3</span>));J     <span class="comment">#1矩阵</span></span><br></pre></td></tr></table></figure><pre><code>array([[1., 1., 1.],       [1., 1., 1.],       [1., 1., 1.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I=np.eye(<span class="number">3</span>);I          <span class="comment">#单位阵</span></span><br></pre></td></tr></table></figure><pre><code>array([[1., 0., 0.],       [0., 1., 0.],       [0., 0., 1.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Z+J+I</span><br></pre></td></tr></table></figure><pre><code>array([[2., 1., 1.],       [1., 2., 1.],       [1., 1., 2.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I*J</span><br></pre></td></tr></table></figure><pre><code>array([[1., 0., 0.],       [0., 1., 0.],       [0., 0., 1.]])</code></pre><h2 id="3-3-数据分析库-pandas"><a href="#3-3-数据分析库-pandas" class="headerlink" title="3.3 数据分析库 pandas"></a>3.3 数据分析库 pandas</h2><h3 id="3-3-1-序列：Series"><a href="#3-3-1-序列：Series" class="headerlink" title="3.3.1 序列：Series"></a>3.3.1 序列：Series</h3><p>（1）创建序列（向量、一维数组）</p><p>（2）生成序列 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd   <span class="comment">#加载数据分析包</span></span><br><span class="line"><span class="comment">#pd.Series()           #生成空序列 </span></span><br></pre></td></tr></table></figure><p>（3）根据列表构建序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>];X</span><br><span class="line">weight=[<span class="number">67</span>,<span class="number">66</span>,<span class="number">83</span>,<span class="number">68</span>,<span class="number">70</span>]; weight</span><br><span class="line">sex=[<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;男&#x27;</span>]; sex</span><br></pre></td></tr></table></figure><pre><code>[1, 3, 6, 4, 9][67, 66, 83, 68, 70][&#39;女&#39;, &#39;男&#39;, &#39;男&#39;, &#39;女&#39;, &#39;男&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S1=pd.Series(X);S1 </span><br></pre></td></tr></table></figure><pre><code>0    11    32    63    44    9dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S2=pd.Series(weight);S2 </span><br></pre></td></tr></table></figure><pre><code>0    671    662    833    684    70dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S3=pd.Series(sex);S3</span><br></pre></td></tr></table></figure><pre><code>0    女1    男2    男3    女4    男dtype: object</code></pre><p>（4）序列合并 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([S2,S3],axis=<span class="number">0</span>)   <span class="comment">#按行合并</span></span><br></pre></td></tr></table></figure><pre><code>0    671    662    833    684    700     女1     男2     男3     女4     男dtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([S1,S3],axis=<span class="number">1</span>)  <span class="comment">#按列合并</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>女</td>    </tr>    <tr>      <th>1</th>      <td>3</td>      <td>男</td>    </tr>    <tr>      <th>2</th>      <td>6</td>      <td>男</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>女</td>    </tr>    <tr>      <th>4</th>      <td>9</td>      <td>男</td>    </tr>  </tbody></table></div><p>（5）序列切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S1[<span class="number">2</span>] </span><br></pre></td></tr></table></figure><pre><code>6</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S3[<span class="number">1</span>:<span class="number">4</span>]</span><br></pre></td></tr></table></figure><pre><code>1    男2    男3    女dtype: object</code></pre><h3 id="3-3-2-数据框：DataFrame"><a href="#3-3-2-数据框：DataFrame" class="headerlink" title="3.3.2 数据框：DataFrame"></a>3.3.2 数据框：DataFrame</h3><p>（1）生成数据框 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame()      <span class="comment">#生成空数据框</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>    </tr>  </thead>  <tbody>  </tbody></table></div><p>（2）根据列表创建数据框</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(X) </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>6</td>    </tr>    <tr>      <th>3</th>      <td>4</td>    </tr>    <tr>      <th>4</th>      <td>9</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(weight,columns=[<span class="string">&#x27;weight&#x27;</span>], index=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>])</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>weight</th>    </tr>  </thead>  <tbody>    <tr>      <th>A</th>      <td>67</td>    </tr>    <tr>      <th>B</th>      <td>66</td>    </tr>    <tr>      <th>C</th>      <td>83</td>    </tr>    <tr>      <th>D</th>      <td>68</td>    </tr>    <tr>      <th>E</th>      <td>70</td>    </tr>  </tbody></table></div><p>（3）根据字典创建数据框</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1=pd.DataFrame(&#123;<span class="string">&#x27;S1&#x27;</span>:S1,<span class="string">&#x27;S2&#x27;</span>:S2,<span class="string">&#x27;S3&#x27;</span>:S3&#125;); df1 </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>S1</th>      <th>S2</th>      <th>S3</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>67</td>      <td>女</td>    </tr>    <tr>      <th>1</th>      <td>3</td>      <td>66</td>      <td>男</td>    </tr>    <tr>      <th>2</th>      <td>6</td>      <td>83</td>      <td>男</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>68</td>      <td>女</td>    </tr>    <tr>      <th>4</th>      <td>9</td>      <td>70</td>      <td>男</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2=pd.DataFrame(&#123;<span class="string">&#x27;sex&#x27;</span>:sex,<span class="string">&#x27;weight&#x27;</span>:weight&#125;,index=X);df2 </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>sex</th>      <th>weight</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>女</td>      <td>67</td>    </tr>    <tr>      <th>3</th>      <td>男</td>      <td>66</td>    </tr>    <tr>      <th>6</th>      <td>男</td>      <td>83</td>    </tr>    <tr>      <th>4</th>      <td>女</td>      <td>68</td>    </tr>    <tr>      <th>9</th>      <td>男</td>      <td>70</td>    </tr>  </tbody></table></div><p>（4）增加数据框列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2[<span class="string">&#x27;weight2&#x27;</span>]=df2[<span class="string">&#x27;weight&#x27;</span>]**<span class="number">2</span>; df2 </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>sex</th>      <th>weight</th>      <th>weight2</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>女</td>      <td>67</td>      <td>4489</td>    </tr>    <tr>      <th>3</th>      <td>男</td>      <td>66</td>      <td>4356</td>    </tr>    <tr>      <th>6</th>      <td>男</td>      <td>83</td>      <td>6889</td>    </tr>    <tr>      <th>4</th>      <td>女</td>      <td>68</td>      <td>4624</td>    </tr>    <tr>      <th>9</th>      <td>男</td>      <td>70</td>      <td>4900</td>    </tr>  </tbody></table></div><p>（5）删除数据框列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> df2[<span class="string">&#x27;weight2&#x27;</span>]; df2</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>sex</th>      <th>weight</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>女</td>      <td>67</td>    </tr>    <tr>      <th>3</th>      <td>男</td>      <td>66</td>    </tr>    <tr>      <th>6</th>      <td>男</td>      <td>83</td>    </tr>    <tr>      <th>4</th>      <td>女</td>      <td>68</td>    </tr>    <tr>      <th>9</th>      <td>男</td>      <td>70</td>    </tr>  </tbody></table></div><p>（6）缺失值处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3=pd.DataFrame(&#123;<span class="string">&#x27;S2&#x27;</span>:S2,<span class="string">&#x27;S3&#x27;</span>:S3&#125;,index=S1);df3 </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>S2</th>      <th>S3</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>66.0</td>      <td>男</td>    </tr>    <tr>      <th>3</th>      <td>68.0</td>      <td>女</td>    </tr>    <tr>      <th>6</th>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>4</th>      <td>70.0</td>      <td>男</td>    </tr>    <tr>      <th>9</th>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3.isnull()        <span class="comment">#是缺失值则返回 True，否则返回 False </span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>S2</th>      <th>S3</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>False</td>      <td>False</td>    </tr>    <tr>      <th>3</th>      <td>False</td>      <td>False</td>    </tr>    <tr>      <th>6</th>      <td>True</td>      <td>True</td>    </tr>    <tr>      <th>4</th>      <td>False</td>      <td>False</td>    </tr>    <tr>      <th>9</th>      <td>True</td>      <td>True</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3.isnull().<span class="built_in">sum</span>()  <span class="comment">#返回每列包含的缺失值的个数 </span></span><br></pre></td></tr></table></figure><pre><code>S2    2S3    2dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3.dropna()       <span class="comment">#直接删除含有缺失值的行，多变量谨慎使用 </span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>S2</th>      <th>S3</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>66.0</td>      <td>男</td>    </tr>    <tr>      <th>3</th>      <td>68.0</td>      <td>女</td>    </tr>    <tr>      <th>4</th>      <td>70.0</td>      <td>男</td>    </tr>  </tbody></table></div><p>（7）数据框排序 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df3</span><br><span class="line">df3.sort_index()         <span class="comment">#按index排序 </span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>S2</th>      <th>S3</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>66.0</td>      <td>男</td>    </tr>    <tr>      <th>3</th>      <td>68.0</td>      <td>女</td>    </tr>    <tr>      <th>6</th>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>4</th>      <td>70.0</td>      <td>男</td>    </tr>    <tr>      <th>9</th>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>S2</th>      <th>S3</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>66.0</td>      <td>男</td>    </tr>    <tr>      <th>3</th>      <td>68.0</td>      <td>女</td>    </tr>    <tr>      <th>4</th>      <td>70.0</td>      <td>男</td>    </tr>    <tr>      <th>6</th>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>9</th>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3.sort_values(by=<span class="string">&#x27;S3&#x27;</span>) <span class="comment">#按S3列值排序 </span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>S2</th>      <th>S3</th>    </tr>  </thead>  <tbody>    <tr>      <th>3</th>      <td>68.0</td>      <td>女</td>    </tr>    <tr>      <th>1</th>      <td>66.0</td>      <td>男</td>    </tr>    <tr>      <th>4</th>      <td>70.0</td>      <td>男</td>    </tr>    <tr>      <th>6</th>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>9</th>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table></div><h3 id="3-3-3-数据框的读写"><a href="#3-3-3-数据框的读写" class="headerlink" title="3.3.3 数据框的读写"></a>3.3.3 数据框的读写</h3><ul><li>3.3.3.1 pandas 读取数据集 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_rows&#x27;</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#BSdata=pd.read_clipboard(); #从剪切板上复制数据 </span></span><br><span class="line"><span class="comment">#BSdata   #BSdata.head() 见下节</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BSdata=pd.read_csv(<span class="string">&quot;DaPy_BS.csv&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment">#GBK </span></span><br><span class="line">BSdata</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1510248008</td>      <td>女</td>      <td>167</td>      <td>71</td>      <td>46.0</td>      <td>不清楚</td>      <td>都未学过</td>      <td>No</td>    </tr>    <tr>      <th>1</th>      <td>1510229019</td>      <td>男</td>      <td>171</td>      <td>68</td>      <td>10.4</td>      <td>有必要</td>      <td>概率统计</td>      <td>Matlab</td>    </tr>    <tr>      <th>2</th>      <td>1512108019</td>      <td>女</td>      <td>175</td>      <td>73</td>      <td>21.0</td>      <td>有必要</td>      <td>统计方法</td>      <td>SPSS</td>    </tr>    <tr>      <th>3</th>      <td>1512332010</td>      <td>男</td>      <td>169</td>      <td>74</td>      <td>4.9</td>      <td>有必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>    <tr>      <th>4</th>      <td>1512331015</td>      <td>男</td>      <td>154</td>      <td>55</td>      <td>25.9</td>      <td>有必要</td>      <td>都学习过</td>      <td>Python</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>47</th>      <td>1538319004</td>      <td>男</td>      <td>175</td>      <td>68</td>      <td>44.4</td>      <td>不清楚</td>      <td>统计方法</td>      <td>SAS</td>    </tr>    <tr>      <th>48</th>      <td>1538254010</td>      <td>女</td>      <td>166</td>      <td>65</td>      <td>5.3</td>      <td>不清楚</td>      <td>编程技术</td>      <td>Python</td>    </tr>    <tr>      <th>49</th>      <td>1540294017</td>      <td>女</td>      <td>159</td>      <td>58</td>      <td>71.4</td>      <td>不清楚</td>      <td>都学习过</td>      <td>SPSS</td>    </tr>    <tr>      <th>50</th>      <td>1540365026</td>      <td>女</td>      <td>169</td>      <td>73</td>      <td>5.5</td>      <td>有必要</td>      <td>统计方法</td>      <td>Excel</td>    </tr>    <tr>      <th>51</th>      <td>1540388036</td>      <td>女</td>      <td>165</td>      <td>67</td>      <td>56.8</td>      <td>不必要</td>      <td>概率统计</td>      <td>SAS</td>    </tr>  </tbody></table><p>52 rows × 8 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata=pd.read_excel(<span class="string">&#x27;DaPy_data.xlsx&#x27;</span>,<span class="string">&#x27;BSdata&#x27;</span>);<span class="comment"># BSdata</span></span><br></pre></td></tr></table></figure><p>3.3.3.2 pandas 数据集的保存 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.to_csv(<span class="string">&#x27;BSdata1.csv&#x27;</span>)    <span class="comment">#将数据框BSdata保存到BSdata.csv文档中</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将数据框 BSdata 保存到BSdata1.xlsx 文档中</span></span><br><span class="line">BSdata.to_excel(<span class="string">&#x27;BSdata.xlsx&#x27;</span>,index=<span class="literal">False</span>)  <span class="comment">#index=False表示不保存行标签</span></span><br></pre></td></tr></table></figure><h3 id="3-3-4-数据框的操作"><a href="#3-3-4-数据框的操作" class="headerlink" title="3.3.4 数据框的操作"></a>3.3.4 数据框的操作</h3><ul><li>（1）基本信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.info()     <span class="comment">#数据框信息</span></span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 52 entries, 0 to 51Data columns (total 8 columns): #   Column  Non-Null Count  Dtype  ---  ------  --------------  -----   0   学号      52 non-null     int64   1   性别      52 non-null     object  2   身高      52 non-null     int64   3   体重      52 non-null     int64   4   支出      52 non-null     float64 5   开设      52 non-null     object  6   课程      52 non-null     object  7   软件      52 non-null     object dtypes: float64(1), int64(3), object(4)memory usage: 3.4+ KB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.head(<span class="number">10</span>)     <span class="comment">#显示前5行 </span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1510248008</td>      <td>女</td>      <td>167</td>      <td>71</td>      <td>46.0</td>      <td>不清楚</td>      <td>都未学过</td>      <td>No</td>    </tr>    <tr>      <th>1</th>      <td>1510229019</td>      <td>男</td>      <td>171</td>      <td>68</td>      <td>10.4</td>      <td>有必要</td>      <td>概率统计</td>      <td>Matlab</td>    </tr>    <tr>      <th>2</th>      <td>1512108019</td>      <td>女</td>      <td>175</td>      <td>73</td>      <td>21.0</td>      <td>有必要</td>      <td>统计方法</td>      <td>SPSS</td>    </tr>    <tr>      <th>3</th>      <td>1512332010</td>      <td>男</td>      <td>169</td>      <td>74</td>      <td>4.9</td>      <td>有必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>    <tr>      <th>4</th>      <td>1512331015</td>      <td>男</td>      <td>154</td>      <td>55</td>      <td>25.9</td>      <td>有必要</td>      <td>都学习过</td>      <td>Python</td>    </tr>    <tr>      <th>5</th>      <td>1516248014</td>      <td>男</td>      <td>183</td>      <td>76</td>      <td>85.6</td>      <td>不必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>    <tr>      <th>6</th>      <td>1516352030</td>      <td>女</td>      <td>169</td>      <td>71</td>      <td>9.1</td>      <td>有必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>    <tr>      <th>7</th>      <td>1516171019</td>      <td>女</td>      <td>166</td>      <td>66</td>      <td>2.5</td>      <td>不必要</td>      <td>都未学过</td>      <td>Excel</td>    </tr>    <tr>      <th>8</th>      <td>1516391008</td>      <td>女</td>      <td>165</td>      <td>69</td>      <td>35.6</td>      <td>不必要</td>      <td>都未学过</td>      <td>Excel</td>    </tr>    <tr>      <th>9</th>      <td>1520395019</td>      <td>男</td>      <td>173</td>      <td>63</td>      <td>22.8</td>      <td>有必要</td>      <td>统计方法</td>      <td>R</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.tail(<span class="number">10</span>)     <span class="comment">#显示后5行</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>42</th>      <td>1537288004</td>      <td>女</td>      <td>173</td>      <td>70</td>      <td>19.1</td>      <td>不清楚</td>      <td>编程技术</td>      <td>Python</td>    </tr>    <tr>      <th>43</th>      <td>1537359035</td>      <td>女</td>      <td>174</td>      <td>71</td>      <td>17.6</td>      <td>不清楚</td>      <td>概率统计</td>      <td>No</td>    </tr>    <tr>      <th>44</th>      <td>1438391022</td>      <td>女</td>      <td>164</td>      <td>62</td>      <td>10.3</td>      <td>有必要</td>      <td>编程技术</td>      <td>Python</td>    </tr>    <tr>      <th>45</th>      <td>1538399025</td>      <td>男</td>      <td>169</td>      <td>65</td>      <td>9.5</td>      <td>有必要</td>      <td>统计方法</td>      <td>SAS</td>    </tr>    <tr>      <th>46</th>      <td>1438120022</td>      <td>男</td>      <td>166</td>      <td>70</td>      <td>35.6</td>      <td>有必要</td>      <td>统计方法</td>      <td>R</td>    </tr>    <tr>      <th>47</th>      <td>1538319004</td>      <td>男</td>      <td>175</td>      <td>68</td>      <td>44.4</td>      <td>不清楚</td>      <td>统计方法</td>      <td>SAS</td>    </tr>    <tr>      <th>48</th>      <td>1538254010</td>      <td>女</td>      <td>166</td>      <td>65</td>      <td>5.3</td>      <td>不清楚</td>      <td>编程技术</td>      <td>Python</td>    </tr>    <tr>      <th>49</th>      <td>1540294017</td>      <td>女</td>      <td>159</td>      <td>58</td>      <td>71.4</td>      <td>不清楚</td>      <td>都学习过</td>      <td>SPSS</td>    </tr>    <tr>      <th>50</th>      <td>1540365026</td>      <td>女</td>      <td>169</td>      <td>73</td>      <td>5.5</td>      <td>有必要</td>      <td>统计方法</td>      <td>Excel</td>    </tr>    <tr>      <th>51</th>      <td>1540388036</td>      <td>女</td>      <td>165</td>      <td>67</td>      <td>56.8</td>      <td>不必要</td>      <td>概率统计</td>      <td>SAS</td>    </tr>  </tbody></table></div><ul><li>（2）数据框列名（变量名） </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.columns    <span class="comment">#查看列名称 </span></span><br></pre></td></tr></table></figure><pre><code>Index([&#39;学号&#39;, &#39;性别&#39;, &#39;身高&#39;, &#39;体重&#39;, &#39;支出&#39;, &#39;开设&#39;, &#39;课程&#39;, &#39;软件&#39;], dtype=&#39;object&#39;)</code></pre><ul><li>（3）数据框行名（样品名） </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.index      <span class="comment">#数据框行名 </span></span><br></pre></td></tr></table></figure><pre><code>RangeIndex(start=0, stop=52, step=1)</code></pre><ul><li>（4）数据框维度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.shape      <span class="comment">#显示数据框的行数和列数</span></span><br></pre></td></tr></table></figure><pre><code>(52, 8)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.shape[<span class="number">0</span>]   <span class="comment">#数据框行数 </span></span><br></pre></td></tr></table></figure><pre><code>52</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.shape[<span class="number">1</span>]   <span class="comment">#数据框列数</span></span><br></pre></td></tr></table></figure><pre><code>8</code></pre><ul><li>（5）数据框值（数组） </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.values[:<span class="number">5</span>] <span class="comment">#数据框值数组 </span></span><br></pre></td></tr></table></figure><pre><code>array([[1510248008, &#39;女&#39;, 167, 71, 46.0, &#39;不清楚&#39;, &#39;都未学过&#39;, &#39;No&#39;],       [1510229019, &#39;男&#39;, 171, 68, 10.4, &#39;有必要&#39;, &#39;概率统计&#39;, &#39;Matlab&#39;],       [1512108019, &#39;女&#39;, 175, 73, 21.0, &#39;有必要&#39;, &#39;统计方法&#39;, &#39;SPSS&#39;],       [1512332010, &#39;男&#39;, 169, 74, 4.9, &#39;有必要&#39;, &#39;编程技术&#39;, &#39;Excel&#39;],       [1512331015, &#39;男&#39;, 154, 55, 25.9, &#39;有必要&#39;, &#39;都学习过&#39;, &#39;Python&#39;]],      dtype=object)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BSdata.head()</span><br><span class="line">BSdata.tail()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1510248008</td>      <td>女</td>      <td>167</td>      <td>71</td>      <td>46.0</td>      <td>不清楚</td>      <td>都未学过</td>      <td>No</td>    </tr>    <tr>      <th>1</th>      <td>1510229019</td>      <td>男</td>      <td>171</td>      <td>68</td>      <td>10.4</td>      <td>有必要</td>      <td>概率统计</td>      <td>Matlab</td>    </tr>    <tr>      <th>2</th>      <td>1512108019</td>      <td>女</td>      <td>175</td>      <td>73</td>      <td>21.0</td>      <td>有必要</td>      <td>统计方法</td>      <td>SPSS</td>    </tr>    <tr>      <th>3</th>      <td>1512332010</td>      <td>男</td>      <td>169</td>      <td>74</td>      <td>4.9</td>      <td>有必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>    <tr>      <th>4</th>      <td>1512331015</td>      <td>男</td>      <td>154</td>      <td>55</td>      <td>25.9</td>      <td>有必要</td>      <td>都学习过</td>      <td>Python</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>47</th>      <td>1538319004</td>      <td>男</td>      <td>175</td>      <td>68</td>      <td>44.4</td>      <td>不清楚</td>      <td>统计方法</td>      <td>SAS</td>    </tr>    <tr>      <th>48</th>      <td>1538254010</td>      <td>女</td>      <td>166</td>      <td>65</td>      <td>5.3</td>      <td>不清楚</td>      <td>编程技术</td>      <td>Python</td>    </tr>    <tr>      <th>49</th>      <td>1540294017</td>      <td>女</td>      <td>159</td>      <td>58</td>      <td>71.4</td>      <td>不清楚</td>      <td>都学习过</td>      <td>SPSS</td>    </tr>    <tr>      <th>50</th>      <td>1540365026</td>      <td>女</td>      <td>169</td>      <td>73</td>      <td>5.5</td>      <td>有必要</td>      <td>统计方法</td>      <td>Excel</td>    </tr>    <tr>      <th>51</th>      <td>1540388036</td>      <td>女</td>      <td>165</td>      <td>67</td>      <td>56.8</td>      <td>不必要</td>      <td>概率统计</td>      <td>SAS</td>    </tr>  </tbody></table></div><ul><li>3.3.4.2 选取变量</li></ul><p>（1）[‘ ‘]或“.”法或：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[<span class="string">&#x27;身高&#x27;</span>].head()          <span class="comment">#取一列数据，一列时也可用BSdata.身高</span></span><br></pre></td></tr></table></figure><pre><code>0    1671    1712    1753    1694    154Name: 身高, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.身高.head()</span><br></pre></td></tr></table></figure><pre><code>0    1671    1712    1753    1694    154Name: 身高, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[[<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>]].head() <span class="comment">#取两列数据 </span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>性别</th>      <th>身高</th>      <th>体重</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>女</td>      <td>167</td>      <td>71</td>    </tr>    <tr>      <th>1</th>      <td>男</td>      <td>171</td>      <td>68</td>    </tr>    <tr>      <th>2</th>      <td>女</td>      <td>175</td>      <td>73</td>    </tr>    <tr>      <th>3</th>      <td>男</td>      <td>169</td>      <td>74</td>    </tr>    <tr>      <th>4</th>      <td>男</td>      <td>154</td>      <td>55</td>    </tr>  </tbody></table></div><p>（2）下标法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.iloc[<span class="number">1</span>:<span class="number">3</span>,<span class="number">2</span>:<span class="number">4</span>]      <span class="comment">#取第1列 </span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>身高</th>      <th>体重</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>171</td>      <td>68</td>    </tr>    <tr>      <th>2</th>      <td>175</td>      <td>73</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.iloc[<span class="number">1</span>:<span class="number">10</span>,<span class="number">2</span>:<span class="number">4</span>]   <span class="comment">#取3、4列 </span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>身高</th>      <th>体重</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>171</td>      <td>68</td>    </tr>    <tr>      <th>2</th>      <td>175</td>      <td>73</td>    </tr>    <tr>      <th>3</th>      <td>169</td>      <td>74</td>    </tr>    <tr>      <th>4</th>      <td>154</td>      <td>55</td>    </tr>    <tr>      <th>5</th>      <td>183</td>      <td>76</td>    </tr>    <tr>      <th>6</th>      <td>169</td>      <td>71</td>    </tr>    <tr>      <th>7</th>      <td>166</td>      <td>66</td>    </tr>    <tr>      <th>8</th>      <td>165</td>      <td>69</td>    </tr>    <tr>      <th>9</th>      <td>173</td>      <td>63</td>    </tr>  </tbody></table></div><ul><li>3.3.4.3 提取样品 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.loc[<span class="number">3</span>]        <span class="comment">#取第4行 </span></span><br></pre></td></tr></table></figure><pre><code>学号    1512332010性别             男身高           169体重            74支出           4.9开设           有必要课程          编程技术软件         ExcelName: 3, dtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.loc[<span class="number">3</span>:<span class="number">5</span>]      <span class="comment">#取3至5行 </span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>3</th>      <td>1512332010</td>      <td>男</td>      <td>169</td>      <td>74</td>      <td>4.9</td>      <td>有必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>    <tr>      <th>4</th>      <td>1512331015</td>      <td>男</td>      <td>154</td>      <td>55</td>      <td>25.9</td>      <td>有必要</td>      <td>都学习过</td>      <td>Python</td>    </tr>    <tr>      <th>5</th>      <td>1516248014</td>      <td>男</td>      <td>183</td>      <td>76</td>      <td>85.6</td>      <td>不必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>  </tbody></table></div><ul><li>3.3.4.4  选取观测与变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.loc[<span class="number">1</span>:<span class="number">3</span>,[<span class="string">&#x27;身高&#x27;</span>,<span class="string">&#x27;体重&#x27;</span>]] <span class="comment"># 按照标签</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>身高</th>      <th>体重</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>171</td>      <td>68</td>    </tr>    <tr>      <th>2</th>      <td>175</td>      <td>73</td>    </tr>    <tr>      <th>3</th>      <td>169</td>      <td>74</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.iloc[<span class="number">1</span>:<span class="number">3</span>,<span class="number">1</span>:<span class="number">5</span>]  <span class="comment">#0至2行和1至5列数据</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>男</td>      <td>171</td>      <td>68</td>      <td>10.4</td>    </tr>    <tr>      <th>2</th>      <td>女</td>      <td>175</td>      <td>73</td>      <td>21.0</td>    </tr>  </tbody></table></div><ul><li>3.3.4.5 条件选取 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[BSdata[<span class="string">&#x27;身高&#x27;</span>]&gt;<span class="number">180</span>] </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>5</th>      <td>1516248014</td>      <td>男</td>      <td>183</td>      <td>76</td>      <td>85.6</td>      <td>不必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>    <tr>      <th>10</th>      <td>1520100029</td>      <td>男</td>      <td>184</td>      <td>82</td>      <td>10.3</td>      <td>有必要</td>      <td>都学习过</td>      <td>SAS</td>    </tr>    <tr>      <th>21</th>      <td>1525352033</td>      <td>男</td>      <td>185</td>      <td>83</td>      <td>5.1</td>      <td>有必要</td>      <td>都学习过</td>      <td>SPSS</td>    </tr>    <tr>      <th>32</th>      <td>1530243029</td>      <td>男</td>      <td>186</td>      <td>87</td>      <td>9.5</td>      <td>不必要</td>      <td>都未学过</td>      <td>No</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[(BSdata[<span class="string">&#x27;身高&#x27;</span>]&gt;<span class="number">180</span>) &amp; (BSdata[<span class="string">&#x27;体重&#x27;</span>]&gt;<span class="number">80</span>)] </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>10</th>      <td>1520100029</td>      <td>男</td>      <td>184</td>      <td>82</td>      <td>10.3</td>      <td>有必要</td>      <td>都学习过</td>      <td>SAS</td>    </tr>    <tr>      <th>21</th>      <td>1525352033</td>      <td>男</td>      <td>185</td>      <td>83</td>      <td>5.1</td>      <td>有必要</td>      <td>都学习过</td>      <td>SPSS</td>    </tr>    <tr>      <th>32</th>      <td>1530243029</td>      <td>男</td>      <td>186</td>      <td>87</td>      <td>9.5</td>      <td>不必要</td>      <td>都未学过</td>      <td>No</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata[(BSdata[<span class="string">&#x27;身高&#x27;</span>]&gt;<span class="number">180</span>) | (BSdata[<span class="string">&#x27;体重&#x27;</span>]&gt;<span class="number">80</span>)] </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>    </tr>  </thead>  <tbody>    <tr>      <th>5</th>      <td>1516248014</td>      <td>男</td>      <td>183</td>      <td>76</td>      <td>85.6</td>      <td>不必要</td>      <td>编程技术</td>      <td>Excel</td>    </tr>    <tr>      <th>10</th>      <td>1520100029</td>      <td>男</td>      <td>184</td>      <td>82</td>      <td>10.3</td>      <td>有必要</td>      <td>都学习过</td>      <td>SAS</td>    </tr>    <tr>      <th>15</th>      <td>1523376027</td>      <td>男</td>      <td>180</td>      <td>81</td>      <td>64.1</td>      <td>有必要</td>      <td>统计方法</td>      <td>Excel</td>    </tr>    <tr>      <th>21</th>      <td>1525352033</td>      <td>男</td>      <td>185</td>      <td>83</td>      <td>5.1</td>      <td>有必要</td>      <td>都学习过</td>      <td>SPSS</td>    </tr>    <tr>      <th>32</th>      <td>1530243029</td>      <td>男</td>      <td>186</td>      <td>87</td>      <td>9.5</td>      <td>不必要</td>      <td>都未学过</td>      <td>No</td>    </tr>  </tbody></table></div><ul><li>3.3.4.6 数据框的运算 </li></ul><p>（1）生成新的数据框 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BSdata[<span class="string">&#x27;体重指数&#x27;</span>]=BSdata[<span class="string">&#x27;体重&#x27;</span>]/(BSdata[<span class="string">&#x27;身高&#x27;</span>]/<span class="number">100</span>)**<span class="number">2</span></span><br><span class="line"><span class="built_in">round</span>(BSdata[:<span class="number">5</span>],<span class="number">2</span>) </span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>学号</th>      <th>性别</th>      <th>身高</th>      <th>体重</th>      <th>支出</th>      <th>开设</th>      <th>课程</th>      <th>软件</th>      <th>体重指数</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1510248008</td>      <td>女</td>      <td>167</td>      <td>71</td>      <td>46.0</td>      <td>不清楚</td>      <td>都未学过</td>      <td>No</td>      <td>25.46</td>    </tr>    <tr>      <th>1</th>      <td>1510229019</td>      <td>男</td>      <td>171</td>      <td>68</td>      <td>10.4</td>      <td>有必要</td>      <td>概率统计</td>      <td>Matlab</td>      <td>23.26</td>    </tr>    <tr>      <th>2</th>      <td>1512108019</td>      <td>女</td>      <td>175</td>      <td>73</td>      <td>21.0</td>      <td>有必要</td>      <td>统计方法</td>      <td>SPSS</td>      <td>23.84</td>    </tr>    <tr>      <th>3</th>      <td>1512332010</td>      <td>男</td>      <td>169</td>      <td>74</td>      <td>4.9</td>      <td>有必要</td>      <td>编程技术</td>      <td>Excel</td>      <td>25.91</td>    </tr>    <tr>      <th>4</th>      <td>1512331015</td>      <td>男</td>      <td>154</td>      <td>55</td>      <td>25.9</td>      <td>有必要</td>      <td>都学习过</td>      <td>Python</td>      <td>23.19</td>    </tr>  </tbody></table></div><p>（2）数据框的合并 concat() </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([BSdata.身高, BSdata.体重],axis=<span class="number">0</span>) <span class="comment"># 按行合并 axis=0</span></span><br></pre></td></tr></table></figure><pre><code>0     1671     1712     1753     1694     154     ... 47     6848     6549     5850     7351     67Length: 104, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([BSdata.身高, BSdata.体重],axis=<span class="number">1</span>) <span class="comment">#按列合并 axis=1 </span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>身高</th>      <th>体重</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>167</td>      <td>71</td>    </tr>    <tr>      <th>1</th>      <td>171</td>      <td>68</td>    </tr>    <tr>      <th>2</th>      <td>175</td>      <td>73</td>    </tr>    <tr>      <th>3</th>      <td>169</td>      <td>74</td>    </tr>    <tr>      <th>4</th>      <td>154</td>      <td>55</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>47</th>      <td>175</td>      <td>68</td>    </tr>    <tr>      <th>48</th>      <td>166</td>      <td>65</td>    </tr>    <tr>      <th>49</th>      <td>159</td>      <td>58</td>    </tr>    <tr>      <th>50</th>      <td>169</td>      <td>73</td>    </tr>    <tr>      <th>51</th>      <td>165</td>      <td>67</td>    </tr>  </tbody></table><p>52 rows × 2 columns</p></div><p>（3）数据框转置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSdata.iloc[:<span class="number">5</span>,:<span class="number">8</span>].T       <span class="comment">#数据框转置 .T</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>    </tr>  </thead>  <tbody>    <tr>      <th>学号</th>      <td>1510248008</td>      <td>1510229019</td>      <td>1512108019</td>      <td>1512332010</td>      <td>1512331015</td>    </tr>    <tr>      <th>性别</th>      <td>女</td>      <td>男</td>      <td>女</td>      <td>男</td>      <td>男</td>    </tr>    <tr>      <th>身高</th>      <td>167</td>      <td>171</td>      <td>175</td>      <td>169</td>      <td>154</td>    </tr>    <tr>      <th>体重</th>      <td>71</td>      <td>68</td>      <td>73</td>      <td>74</td>      <td>55</td>    </tr>    <tr>      <th>支出</th>      <td>46.0</td>      <td>10.4</td>      <td>21.0</td>      <td>4.9</td>      <td>25.9</td>    </tr>    <tr>      <th>开设</th>      <td>不清楚</td>      <td>有必要</td>      <td>有必要</td>      <td>有必要</td>      <td>有必要</td>    </tr>    <tr>      <th>课程</th>      <td>都未学过</td>      <td>概率统计</td>      <td>统计方法</td>      <td>编程技术</td>      <td>都学习过</td>    </tr>    <tr>      <th>软件</th>      <td>No</td>      <td>Matlab</td>      <td>SPSS</td>      <td>Excel</td>      <td>Python</td>    </tr>  </tbody></table></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第2章-数据的收集与整理&quot;&gt;&lt;a href=&quot;#第2章-数据的收集与整理&quot; class=&quot;headerlink&quot; title=&quot;第2章  数据的收集与整理&quot;&gt;&lt;/a&gt;第2章  数据的收集与整理&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/</summary>
      
    
    
    
    <category term="《数据可视化》——基于Python的应用" scheme="https://zhangkh.top/categories/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%8B%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="《数据可视化》——基于Python的应用" scheme="https://zhangkh.top/tags/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%8B%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
</feed>
