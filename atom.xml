<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱爬虫与大数据 | 张凯恒的个人博客</title>
  <icon>https://www.gravatar.com/avatar/2e41654fe4ea52b82f9e4f5f11453362</icon>
  
  <link href="https://zhangkh.top/atom.xml" rel="self"/>
  
  <link href="https://zhangkh.top/"/>
  <updated>2021-03-26T12:05:37.000Z</updated>
  <id>https://zhangkh.top/</id>
  
  <author>
    <name>Kit</name>
    <email>2514154656@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>红酒市场需求线上购买需求度调研可视化</title>
    <link href="https://zhangkh.top/a138b51e.html"/>
    <id>https://zhangkh.top/a138b51e.html</id>
    <published>2021-03-26T12:05:37.000Z</published>
    <updated>2021-03-26T12:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="红酒市场需求线上购买需求度调研可视化"><a href="#红酒市场需求线上购买需求度调研可视化" class="headerlink" title="红酒市场需求线上购买需求度调研可视化"></a>红酒市场需求线上购买需求度调研可视化</h1><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210326012940155.png" alt="image-20210326012940155"></p><h2 id="京东"><a href="#京东" class="headerlink" title="京东"></a>京东</h2><p><a href="https://zhangkaiheng.gitee.io/keshihua/j1">红酒线上市场价格销售分析</a></p><p><a href="https://zhangkaiheng.gitee.io/keshihua/j2">线上红酒标题词云图</a></p><p><a href="https://zhangkaiheng.gitee.io/keshihua/j3">线上红酒类型</a></p><h2 id="淘宝"><a href="#淘宝" class="headerlink" title="淘宝"></a>淘宝</h2><p><a href="https://zhangkaiheng.gitee.io/keshihua/t1">红酒线上市场价格销售分析</a></p><p><a href="https://zhangkaiheng.gitee.io/keshihua/t2">线上红酒标题词云图</a></p><h2 id="拼多多"><a href="#拼多多" class="headerlink" title="拼多多"></a>拼多多</h2><p><a href="https://zhangkaiheng.gitee.io/keshihua/p1">红酒线上市场价格销售分析</a></p><p><a href="https://zhangkaiheng.gitee.io/keshihua/p2">线上红酒标题词云图</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;红酒市场需求线上购买需求度调研可视化&quot;&gt;&lt;a href=&quot;#红酒市场需求线上购买需求度调研可视化&quot; class=&quot;headerlink&quot; title=&quot;红酒市场需求线上购买需求度调研可视化&quot;&gt;&lt;/a&gt;红酒市场需求线上购买需求度调研可视化&lt;/h1&gt;&lt;p&gt;&lt;img s</summary>
      
    
    
    
    <category term="数据可视化" scheme="https://zhangkh.top/categories/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="pyecharts" scheme="https://zhangkh.top/tags/pyecharts/"/>
    
    <category term="数据可视化" scheme="https://zhangkh.top/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>师弟面对近10万数据向我求救，我：你学的Python呢？</title>
    <link href="https://zhangkh.top/7c3563b0.html"/>
    <id>https://zhangkh.top/7c3563b0.html</id>
    <published>2021-03-14T10:05:37.000Z</published>
    <updated>2021-03-14T10:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="师弟面对近10万数据向我求救，我：你学的Python呢？"><a href="#师弟面对近10万数据向我求救，我：你学的Python呢？" class="headerlink" title="师弟面对近10万数据向我求救，我：你学的Python呢？"></a>师弟面对近10万数据向我求救，我：你学的Python呢？</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>事情是上星期了发生的了，此时显得没事随时随地记录新鲜事：师弟突然发了一个固定资产增长率的表格，数据近10万，需求是去掉每个股票代码不完整的数据。</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210314175411436.png" alt="image-20210314175411436"></p><p>当时一看，害，这不就是数据清理吗。excel当然也行，但是Python显得更优雅简单快速！</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/Screenshot_20210314_180238.jpg" alt="Screenshot_20210314_180238"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>Python数据清洗当然首选Pandas库了，当时因为刚看到时刚要开班级会议，就提示师弟pandas库。我回到寝室拿到电脑仔细分析一下数据，一会就有了具体思路：需求是去除不完整的数据，只要去除年份少于20101231-20191231即10年数据不就行了吗</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210314180809610.png" alt="image-20210314180809610"></p><h2 id="开干"><a href="#开干" class="headerlink" title="开干"></a>开干</h2><p>使用Pandas的value_counts()函数对股票代码列进行词频统计，去除词频少于10的股票然后保存：</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210314181323735.png" alt="image-20210314181323735"></p><p>具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># 思路：去除年份出现少于40的行</span></span><br><span class="line"></span><br><span class="line">df1 = pd.read_excel(<span class="string">&#x27;/Users/k/Desktop/gogogo/CIT_Teaching/lichuanxi/qu_years/固定资产增长率最新版.xlsx&#x27;</span>) <span class="comment"># 读取数据</span></span><br><span class="line">df = pd.DataFrame(df1.Stkcd.value_counts()) <span class="comment"># 获取频率统计并转化为表格，频率降序排列</span></span><br><span class="line">value = df.index.tolist() <span class="comment"># 股票代码列表</span></span><br><span class="line">value_counts = df.Stkcd.tolist() <span class="comment"># 频率列表</span></span><br><span class="line">removes = value[value_counts.index(<span class="number">39</span>)::] <span class="comment"># 获取要去除的股票代码列表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> removes:</span><br><span class="line">    df1 = df1[~df1[<span class="string">&#x27;Stkcd&#x27;</span>].isin([i])] <span class="comment"># 循环去除，本想一次多行去除，但很难定位到行数</span></span><br><span class="line">df1.to_csv(<span class="string">&#x27;removes_years.csv&#x27;</span>) <span class="comment"># 保存数据</span></span><br></pre></td></tr></table></figure><p>害，还不到10行代码。同时注意到股票代码在csv或excel表格会出现000001变为1的情况，此时我们只需要将股票代码那一列格式改为邮编即可。</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210314182500659.png" alt="image-20210314182500659"></p><p>同时注意到日期列时间显示不全，此时只需拉宽列宽就行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>思路清晰了就容易实现了，花个几分钟写好代码，运行也就十几秒钟，同时以后触类旁通，类似数据清洗的可提高效率。</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210314182800348.png" alt="image-20210314182800348"></p><p>参考：</p><ul><li><a href="https://www.pypandas.cn/docs/">Pandas: 强大的 Python 数据分析支持库</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;师弟面对近10万数据向我求救，我：你学的Python呢？&quot;&gt;&lt;a href=&quot;#师弟面对近10万数据向我求救，我：你学的Python呢？&quot; class=&quot;headerlink&quot; title=&quot;师弟面对近10万数据向我求救，我：你学的Python呢？&quot;&gt;&lt;/a&gt;师弟</summary>
      
    
    
    
    <category term="CIT" scheme="https://zhangkh.top/categories/CIT/"/>
    
    
    <category term="CIT" scheme="https://zhangkh.top/tags/CIT/"/>
    
    <category term="数据清洗" scheme="https://zhangkh.top/tags/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/"/>
    
  </entry>
  
  <entry>
    <title>MagicBook (Pro)修改CFG-Lock和DVMT 64M数值的方法</title>
    <link href="https://zhangkh.top/f50b5182.html"/>
    <id>https://zhangkh.top/f50b5182.html</id>
    <published>2021-03-13T12:05:37.000Z</published>
    <updated>2021-03-13T12:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MagicBook-Pro-修改CFG-Lock和DVMT-64M数值的方法"><a href="#MagicBook-Pro-修改CFG-Lock和DVMT-64M数值的方法" class="headerlink" title="MagicBook (Pro)修改CFG-Lock和DVMT 64M数值的方法"></a>MagicBook (Pro)修改CFG-Lock和DVMT 64M数值的方法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文借助Insyde的官方工具对BIOS进行修改，以下会介绍GUI方法来修改CFG-Lock和DVMT Pre-Allocated数值。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong>以下的所有操作均会涉及BIOS，稍有不慎就会导致主板损坏，无法开机，如果决定跟着做，请务必小心谨慎，不可跳步，漏步！！！</strong></p><h2 id="GUI方法步骤（2019机型）"><a href="#GUI方法步骤（2019机型）" class="headerlink" title="GUI方法步骤（2019机型）"></a>GUI方法步骤（2019机型）</h2><ol><li><p>下载<a href="https://cit.lanzous.com/iPNgMmw5b0f">修改工具文件</a>，密码：cit</p></li><li><p>打开InsydeH2OUVE文件夹，先以管理员身份运行WDFInst.exe安装工具驱动</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210313184924032.png" alt="image-20210313184924032"></p></li><li><p>以管理员身份运行H2OUVE-W-GUIx64.exe程序</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210313184952113.png" alt="image-20210313184952113"></p></li><li><p>选择File – Load runtime读取当前BIOS状态</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210313185024752.png" alt="image-20210313185024752"></p></li><li><p>选择左侧Variable菜单，获取当前BIOS变量</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210313185504599.png" alt="image-20210313185504599"></p></li><li><p>找到名称为<strong>SaSetup</strong>的空间（双击后可看到该空间内的所有变量，可根据最后一个变量所在的偏移地址得出空间大小，与步骤0中的空间大小比对，从而确定找到的空间是正确的），并找到偏移量为<strong>0x107</strong>的数值，修改该数值的<strong>01</strong>为<strong>02</strong>（确认该空间被选中——前方的√打上,此处可以先不着急按左上角的保存按钮）</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210313185533544.png" alt="image-20210313185533544"></p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210313185601806.png" alt="image-20210313185601806"></p></li><li><p>然后找到CpuSetup 003E的位置，双击，修改该数值的<strong>01</strong>为<strong>00</strong></p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210313185620597.png" alt="image-20210313185620597"></p></li><li><p>确保两个√都打上以后，点击左上角的按钮保存（Sastup和CpuSetup的位置可能不在一起，只要确保修改位置正确、√都打上了就没问题，记得保存！）看到提示保存变量成功的提示后，说明已修改成功，此时可重启电脑让其生效。</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210313185631306.png" alt="image-20210313185631306"></p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210313185631306.png"></p></li></ol><h2 id="GUI方法步骤（2018机型）"><a href="#GUI方法步骤（2018机型）" class="headerlink" title="GUI方法步骤（2018机型）"></a>GUI方法步骤（2018机型）</h2><p>方法同上，不同的是：</p><p>Magicbook 2018的Cfg-lock：CPUsetup 0x3c 01改成00</p><p>DVMT：Sasetup 0xDF 01改成 02</p><h2 id="如何测试是否修改成功"><a href="#如何测试是否修改成功" class="headerlink" title="如何测试是否修改成功"></a>如何测试是否修改成功</h2><p>使用对应的config.plist能进入系统的话，即说明修改成功，可结合群文件中的图片加以识别！</p><p>参考：</p><ul><li><a href="https://github.com/GatesYang/Magicbook-Pro-16.1-Hackintosh">Magicbook-(Pro)-16.1-Hackintosh-2019&amp;2020 黑苹果稳定版</a></li><li><a href="https://zhuanlan.zhihu.com/p/266400995">关于笔记本BIOS如何修改dvmt容量为64M和解锁cfg lock</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MagicBook-Pro-修改CFG-Lock和DVMT-64M数值的方法&quot;&gt;&lt;a href=&quot;#MagicBook-Pro-修改CFG-Lock和DVMT-64M数值的方法&quot; class=&quot;headerlink&quot; title=&quot;MagicBook (Pro)修</summary>
      
    
    
    
    <category term="黑苹果" scheme="https://zhangkh.top/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
    
    <category term="黑苹果" scheme="https://zhangkh.top/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>MATLAB R2020b官方v9.8.0Mac/Win原版及安装激活教程</title>
    <link href="https://zhangkh.top/6933ffae.html"/>
    <id>https://zhangkh.top/6933ffae.html</id>
    <published>2021-03-06T12:05:37.000Z</published>
    <updated>2021-03-06T12:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MATLAB-R2020b官方v9-8-0Mac-Win原版及安装激活教程"><a href="#MATLAB-R2020b官方v9-8-0Mac-Win原版及安装激活教程" class="headerlink" title="MATLAB R2020b官方v9.8.0Mac/Win原版及安装激活教程"></a>MATLAB R2020b官方v9.8.0Mac/Win原版及安装激活教程</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>MathWorks MATLAB R2020a v9.8.0.1323502 x64 最新版已经更新;Matlab是matrix&amp;laboratory两个词的组合，意为矩阵工厂（矩阵实验室）。是由美国mathworks公司发布的主要面对科学计算、可视化以及交互式程序设计的高科技计算环境。它将数值分析、矩阵计算、科学数据可视化以及非线性动态系统的建模和仿真等诸多强大功能集成在一个易于使用的视窗环境中，为科学研究、工程设计以及必须进行有效数值计算的众多科学领域提供了一种全面的解决方案，并在很大程度上摆脱了传统非交互式程序设计语言（如C、Fortran）的编辑模式，代表了当今国际科学计算软件的先进水平。<br> MATLAB和Mathematica、Maple并称为三大数学软件。它在数学类科技应用软件中在数值计算方面首屈一指。MATLAB可以进行矩阵运算、绘制函数和数据、实现算法、创建用户界面、连接其他编程语言的程序等，主要应用于工程计算、控制设计、信号处理与通讯、图像处理、信号检测、金融建模设计与分析等领域。</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/E73OEnn4aq6kajdTgg90dxIKjvgp4CMI.png" alt="img"></p><h2 id="Mac环境安装"><a href="#Mac环境安装" class="headerlink" title="Mac环境安装"></a>Mac环境安装</h2><h3 id="Mac版Matlab-R2020b下载"><a href="#Mac版Matlab-R2020b下载" class="headerlink" title="Mac版Matlab R2020b下载"></a>Mac版Matlab R2020b下载</h3><p><a href="https://citpan.herokuapp.com/CITpan/CIT%E5%B0%8F%E7%BB%84%E8%B5%84%E6%BA%90/MatLab/">不限速下载链接</a>，建议NDM等多线程下载，可达到最佳速度</p><h3 id="Mac安装过程"><a href="#Mac安装过程" class="headerlink" title="Mac安装过程"></a>Mac安装过程</h3><p>Mac版本安装包极大,如果出现错误请先对比MD5码;</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/mstsc_e0DVNgGgBV.png" alt="img"></p><p> 1.先断网！之后打开安装包,双击InstallForMacOSX开始安装;(文件太大,安装程序启动很慢,耐心等待) </p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/mstsc_sMyZ9HlHoo.png" alt="img"></p><p> 2.同意一些协之后输入安装Key:<code>09806-07443-53955-64350-21751-41297</code></p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/mstsc_kjyvnpdFgy.png" alt="img"></p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/mstsc_rKaAfFvf03.png" alt="img"></p><p>3.提示选择许可证，解压Matlabr2020_Mac_Patch.zip文件,得到Crack文件夹,选择其中的<code>license_standalone.lic</code>许可证文件,点击下一步;选择安装位置,默认下一步即可</p><p><img src= "/image/loading.gif" data-lazy-src="https://img2.macxin.com/images/2020/04/16/vVJ7BKGuwc.gif"></p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/%E6%88%AA%E5%B1%8F2021-03-04%2001.55.44.png"></p><p>4.选择要安装的组件,自己选择,如果全选也可以,就是安装时间较长;点击下一步开始安装过程,大概半小时左右可以安装完成;(视磁盘性能而定)</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/mstsc_JTFrGviXk9.png"></p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/mstsc_3UOorU2m69.png"></p><p> 5.安装完成后,拷贝Crack文件夹中的<code>libmwlmgrimpl.dylib</code>文件到目录<code>/applications/Polyspace/r2020a/bin/maci64/matlab_startup_plugins/lmgrimpl/</code>替换同名文件即可;</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/mstsc_rEXwPA4h2U.png"></p><p> 6.完成了;关于启动程序,在路径<code>/applications/Polyspace/r2020a/bin/maci64/MATLABWindow</code>中,右键新建一个替身拖到桌面即可;</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/mstsc_7OV80PvUHt.png"></p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/7XCnOGx4Nq.gif"></p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/mstsc_MOtBJE1B9b.png"></p><h2 id="Win安装过程"><a href="#Win安装过程" class="headerlink" title="Win安装过程"></a>Win安装过程</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>如果没有毒盘VIP或者一定手段，不建议用下面链接（由于文件太大手机能打开，电脑网页端等会显示404）</p><p>链接：<a href="https://pan.baidu.com/s/1QFnBlCFjIfOh8ggEudtZXQ">https://pan.baidu.com/s/1QFnBlCFjIfOh8ggEudtZXQ</a> 提取码：sx6r</p><p>建议用下面👇链接</p><p><a href="https://zuaazjueducn-my.sharepoint.com/:f:/g/personal/zy2018_zuaa_zju_edu_cn/EicaBPZ5-uJEjwXrW3w98msBGWFXbT1SUhXVSdIrwRMh2w?e=KBYkCP">Onedrive链接</a>，密码：2020，解压密码：<a href="http://www.macxin.com/">www.macxin.com</a></p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210306025815946.png" alt="image-20210306025815946"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1.断网,右击ISO镜像文件选择挂载(我用了2019的图演示,道理是一样的)这个时候计算机里就会出现一个虚拟光驱,右击打开虚拟光驱之后进入bin文件夹,选择以管理员身份运行Setup.exe启动安装程序(如动图<br><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210306024702234.png" alt="image-20210306024702234"><br> 2.同意一些协议之类的,之后输入安装Key:<code>09806-07443-53955-64350-21751-41297</code><strong>注意:这个时候你的电脑一定要断网!</strong></p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/mstsc_rNaSGia6eR.png"></p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/mstsc_JMPDcASpx4.png"></p><p>3.之后会提示让你选择许可证,解压下载的<code>Matlab R2020a Win64 Crack.zip</code>文件,选择里面的<code>icense_standalone.lic</code>文件,点击下一步,之后选择要安装的位置,安装大概需要30G+的硬盘空间;之后选择安装组件,推荐勾掉第一个Server组件,其他的自己选择就行了,之后就是漫长的等待安装完成;(如图<br> <img src= "/image/loading.gif" data-lazy-src="https://img2.macxin.com/images/2020/03/26/9Ob37kWPRb.gif" alt="img"></p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/mstsc_0a0JTvJrF4.png"></p><p>4.软件激活,替换文件,打开解压好的<code>Matlab R2020a Win64 Crack</code>文件夹复制里面的R2020a文件夹,替换到软件安装目录{如图</p><p><img src= "/image/loading.gif" data-lazy-src="https://img2.macxin.com/images/2020/03/26/RSbCluaTTv.gif"></p><p>5.创建快捷方式,默认软件安装完成只创建一个Polyspace R2020a快捷方式,我们可以进入安装目录再创建一个Matlab的快捷方式,如图</p><p><img src= "/image/loading.gif" data-lazy-src="https://img2.macxin.com/images/2020/03/26/QR1DarNaFx.gif"></p><p> 6.试运行</p><p><img src= "/image/loading.gif" data-lazy-src="https://img2.macxin.com/images/2020/03/27/8jbC6jTTwa.gif"></p><p>参考：</p><ul><li><a href="https://www.macxin.com/archives/18891.html">MATLAB R2020a v9.8.0 Mac/Win/Linux 官方原版+安装激活教程</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MATLAB-R2020b官方v9-8-0Mac-Win原版及安装激活教程&quot;&gt;&lt;a href=&quot;#MATLAB-R2020b官方v9-8-0Mac-Win原版及安装激活教程&quot; class=&quot;headerlink&quot; title=&quot;MATLAB R2020b官方v9.</summary>
      
    
    
    
    <category term="数学建模" scheme="https://zhangkh.top/categories/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
    
    <category term="数学建模" scheme="https://zhangkh.top/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
    <category term="Matlab" scheme="https://zhangkh.top/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg无损快速剪切截取合并视频</title>
    <link href="https://zhangkh.top/fe4b7fcd.html"/>
    <id>https://zhangkh.top/fe4b7fcd.html</id>
    <published>2021-03-05T04:05:37.000Z</published>
    <updated>2021-03-05T04:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FFmpeg无损快速剪切截取合并视频"><a href="#FFmpeg无损快速剪切截取合并视频" class="headerlink" title="FFmpeg无损快速剪切截取合并视频"></a>FFmpeg无损快速剪切截取合并视频</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>市场调研培训的视频时长10个多小时，太大（B站过审限制为10G，超过的要分P），但我只想把其中的广告剪去掉就能满足要求。用Final Cut Pro剪辑视频时导出367G？？？压缩还得好几十G。无奈，只好无损剪切视频。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>很多人都有这样的需求：就是把一部电影中的某一段单独保存下来。或用于编辑或用于保存这样的事情，通常被称为“分割”，或“切割”。其实，说截取比较好一些。就是从一段视频中把一小段截取出来做为已用。视频的截取，分为两种。一种是另存，一种是分割。这二者的区别在于：分割是无损的，速度快，基本上和拷贝的速度差不多；而另存，是重新编码，速度慢，如果你的机器很慢的话，那么就不是一个<em>“</em>慢<em>”</em>字了得了，如果你感情足够脆弱的话，会哭的<em>……</em></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>感谢<a href="https://github.com/FFmpeg/FFmpeg">FFmpeg</a></p><p>Mac安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure><p>其他环境请自行百度谷歌</p><h2 id="截取视频"><a href="#截取视频" class="headerlink" title="截取视频"></a>截取视频</h2><p>截取INPUT视频从START到DURATION的片段输出为OUTPUT：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -y -ss START -t DURATION -i INPUT -c copy OUTPUT</span><br></pre></td></tr></table></figure><p>-y 覆盖已经存在的文件；</p><p>-ss 开始时间，如： 0:5:20，表示从5分20秒开始；</p><p>-t 时长，如： 0:9:39，表示截取4分19秒长的视频；</p><p>-i 输入，后面是空格，紧跟着就是输入视频文件；</p><p>-c copy，拷贝所有流；</p><p>INPUT，输入视频文件；</p><p>OUTPUT，输出视频文件；</p><p>例如截取input.mp4视频从0:5:20到0:9:39的片段输出为output.mp4：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -y -ss 0:5:20 -t 0:9:39 -i input.mp4 -c copy output.mp4</span><br></pre></td></tr></table></figure><h2 id="合并视频"><a href="#合并视频" class="headerlink" title="合并视频"></a>合并视频</h2><p>FFmpeg合并视频有很多方法，但首推使用<strong>FFmpeg concat 分离器</strong></p><p>先在要合并视频的文件夹内新建list.txt，里面编辑格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file &#39;input1.mp4&#39;</span><br><span class="line">file &#39;input2.mp4&#39;</span><br><span class="line">file &#39;input3.mp4&#39;</span><br><span class="line">···</span><br></pre></td></tr></table></figure><p>然后进行读取txt文件里文件名进行concat合并视频：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f concat -i list.txt -c copy output.mp4</span><br></pre></td></tr></table></figure><p>例如：将1.mp4与2.mp4进行合并，先打开终端切换到视频文件路径，在创建list.txt文件后进行编辑保存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file 1.mp4</span><br><span class="line">file 2.mp4</span><br></pre></td></tr></table></figure><p>终端执行下面代码进行合并</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f concat -i list.txt -c copy output.mp4</span><br></pre></td></tr></table></figure><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210305114637107.png" alt="image-20210305114637107"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>我的要传到的B站视频有1.67G，时长10:47:07，按照要求要把视频时长减为10小时以内，这样就只许把里面的广告剪切掉就行：首先利用截取视频提取不是广告的片段，然后利用合并视频将视频片段按照顺序进行合并。全程不到5分钟，而且视频无损，效率远大于视频剪辑。</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210305115405989.png" alt="image-20210305115405989"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>FFmpeg能力不止于此，还是非常强大的，比如视频格式转化、下载You-get不能下载的保护视频等</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;FFmpeg无损快速剪切截取合并视频&quot;&gt;&lt;a href=&quot;#FFmpeg无损快速剪切截取合并视频&quot; class=&quot;headerlink&quot; title=&quot;FFmpeg无损快速剪切截取合并视频&quot;&gt;&lt;/a&gt;FFmpeg无损快速剪切截取合并视频&lt;/h1&gt;&lt;h2 id=&quot;背</summary>
      
    
    
    
    <category term="FFmpeg" scheme="https://zhangkh.top/categories/FFmpeg/"/>
    
    
    <category term="FFmpeg" scheme="https://zhangkh.top/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>Vercel加速GitHub Pages</title>
    <link href="https://zhangkh.top/d746f3f.html"/>
    <id>https://zhangkh.top/d746f3f.html</id>
    <published>2021-03-01T04:05:37.000Z</published>
    <updated>2021-03-01T04:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vercel加速GitHub-Pages"><a href="#Vercel加速GitHub-Pages" class="headerlink" title="Vercel加速GitHub Pages"></a>Vercel加速GitHub Pages</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>CloudFlare加速Github Page国内延迟和速度不是最优的，碰巧了解到Vercel也能加速Github Pages，效果还更好，故在此进行记录总结。</p><h2 id="Vercel是什么"><a href="#Vercel是什么" class="headerlink" title="Vercel是什么"></a>Vercel是什么</h2><p>前身是Zeit now（电信线路极为优秀），后改名改名为 Vercel了（好像被收购了）。相比于Netlify，Vercel（下文全都用此名称）CDN分布广、免费功能较为齐全（Vercel免费用户提供每个月100GB的流量，跟Github Pages是一样的）、在中国大陆访问站点在台湾速度快以及有命令行程序CLI等，但缺点也有许多：不能像Netlify那样插入代码等。但对于我的博客实在够用了，话不多说，开干！！！</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>Github Pages博客</li><li>域名</li><li>电子邮箱（最好谷歌邮箱，QQ邮箱有部分人反应会出错）</li></ul><h2 id="注册Vercel账号"><a href="#注册Vercel账号" class="headerlink" title="注册Vercel账号"></a>注册Vercel账号</h2><p>在<a href="https://zeit.co/">Vercel官方网站</a>用准备好的邮箱注册一个账号，可以用Github/Gitlab登陆，然后点击Sign Up注册一个账号或者点击Login登录。<br><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/format,png.png" alt="在这里插入图片描述"></p><h2 id="导入仓库"><a href="#导入仓库" class="headerlink" title="导入仓库"></a>导入仓库</h2><p>点击<a href="https://vercel.com/dashboard">New Project</a>进入给予github权限选择github账户下的你的博客仓库。</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210301170211828.png" alt="image-20210301170211828"></p><h2 id="部署及域名绑定"><a href="#部署及域名绑定" class="headerlink" title="部署及域名绑定"></a>部署及域名绑定</h2><p>导入之后会发现它已经分配给你一个.verel.app的域名，此时我们只需在上面的输入框输入自己的域名点击add后按照提示绑定就行</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210301171704544.png" alt="image-20210301171704544"></p><h2 id="部署后"><a href="#部署后" class="headerlink" title="部署后"></a>部署后</h2><p>ping一下，几乎都是绿的</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210301172647731.png" alt="image-20210301172647731"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>挺不错的，暂时用它了！</p><p>参考：</p><ul><li><a href="https://www.tangruiping.com/post/zeit-github-pages-hexo-sync.html#Zeit-Github-Cloudflare-Netlify%E9%80%9F%E5%BA%A6%E5%AF%B9%E6%AF%94">Vercel Zeit now自动部署Github为hexo博客加速</a></li><li><a href="https://www.iaia.cc/posts/2418998582.html">优雅的使用Vercel加速GitHub Pages</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vercel加速GitHub-Pages&quot;&gt;&lt;a href=&quot;#Vercel加速GitHub-Pages&quot; class=&quot;headerlink&quot; title=&quot;Vercel加速GitHub Pages&quot;&gt;&lt;/a&gt;Vercel加速GitHub Pages&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="Hexo" scheme="https://zhangkh.top/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://zhangkh.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Namesilo购买解析域名+CloudFlare加速Github Page</title>
    <link href="https://zhangkh.top/a10d2364.html"/>
    <id>https://zhangkh.top/a10d2364.html</id>
    <published>2021-02-25T04:05:37.000Z</published>
    <updated>2021-02-25T04:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Namesilo购买解析域名-CloudFlare加速Github-Page"><a href="#Namesilo购买解析域名-CloudFlare加速Github-Page" class="headerlink" title="Namesilo购买解析域名+CloudFlare加速Github Page"></a>Namesilo购买解析域名+CloudFlare加速Github Page</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在gitee、github双部署后，github pages国内速度太慢，有点强迫症，就套一层 cloudflare CDN加速github page（需要域名，免费版本是有请求次数限制的，每天 10W 次，博客足够了；哪天官方不提供免费套餐了，把 DNS 的 NS 解析记录回去就行）。可又没有域名，无奈，就花点小钱买来玩玩吧。</p><h2 id="域名选择"><a href="#域名选择" class="headerlink" title="域名选择"></a>域名选择</h2><p><strong>如果准备买国内服务器，建议在阿里云或者腾讯云购买域名，虽然要实名认证，但是国内服务器本身也要备案</strong>。如果是准备购买国外服务器，建议在 Namesilo 购买域名。千万 千万 不要在 Godaddy 购买域名，这是个坑！！</p><h2 id="Namesilo"><a href="#Namesilo" class="headerlink" title="Namesilo"></a>Namesilo</h2><p>如果有优惠码，价格不错，虽说可能没 Godaddy 便宜，但是至少比国内域名便宜，而且 Godaddy 的便宜是有代价的。最后域名本身也不贵，也没必要在乎十多块钱的差价。主要还是体验，Namesilo 续费不会留坑，隐私保护的好，Godaddy 如果用信用卡付款，还会被抽到验证身份，这是最坑的，可能需要上传身份证照片，贼恶心。</p><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>namesilo注册视频的话可以看<a href="https://www.bilibili.com/video/BV11E411L7AA?from=search&seid=15025364950076604501">这个</a></p><p>总之邮箱注册+身份填写+域名搜索+选择购买下单，很简单。其中这一步要留意</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/2-2.png" alt="《2019 Namesilo 购买域名 解析域名 图文教程》"></p><p>这里内容比较多，最为重要。第一个箭头和我一样即可。第二个箭头位置 Auto-Renew，设置域名是否自动续费，自行确定，支付宝不虚。第三个箭头位置 Privacy Setting 代表域名隐私保护设置，建议设置成 WHOIS Privacy ，反正是免费的。第四个箭头代表 购买几年。使用优惠码好像第一次只能一年。。。最后箭头代表优惠码，如果填写优惠码会便宜 1 美元。本来我这里是 $6.99 ，优惠会是 $5.99。</p><h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h2><p>通过域名提供商，修改刚刚的域名解析，通过 A 记录分别解析到以下 4 个 IP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure><p>比如我的：</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210224195345660.png" alt="image-20210224195345660"></p><p>设置完之后通过命令行验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig monkeywie.cn +noall +answer</span><br></pre></td></tr></table></figure><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210224184654805.png" alt="image-20210224184654805"></p><p>如果ip是上面的就代表已经生效了。当记录全部解析生效时，就可以通过<code>http://zhangkh.top</code>访问到博客了，这个时候再开启<code>HTTPS</code>，示例图：</p><p><img src= "/image/loading.gif" data-lazy-src="https://monkeywie.cn/2020/08/20/fast-github-page-with-cloudflare/2020-08-20-18-24-13.png" alt="img"></p><p>然后 github 会自动签发提供给<code>zhangkh.top</code>域名使用的 SSL 证书，等待一段时间后，就可以通过<code>HTTPS</code>即<code>https://zhangkh.top</code>访问博客了。</p><h3 id="CloudFlare-CDN配置"><a href="#CloudFlare-CDN配置" class="headerlink" title="CloudFlare CDN配置"></a>CloudFlare CDN配置</h3><p>先通过<a href="https://dash.cloudflare.com/sign-up%E9%93%BE%E6%8E%A5%E8%BF%9B%E8%A1%8C%E6%B3%A8%E5%86%8C%EF%BC%8C%E7%84%B6%E5%90%8E%E6%B7%BB%E5%8A%A0%E7%AB%99%E7%82%B9%EF%BC%88%E6%B3%A8%E6%84%8F%E6%98%AF%E5%A1%AB%E5%86%99%E5%9F%9F%E5%90%8D%EF%BC%89%EF%BC%8C%E6%8F%90%E4%BA%A4%E4%B9%8B%E5%90%8E%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%89%AB%E6%8F%8F%E5%9F%9F%E5%90%8D%E5%AF%B9%E5%BA%94%E7%9A%84%E8%A7%A3%E6%9E%90%E8%AE%B0%E5%BD%95%EF%BC%8C%E4%B8%8B%E4%B8%80%E6%AD%A5%E5%B0%B1%E6%98%AF%E6%BF%80%E6%B4%BB%E4%BA%86%EF%BC%9A%E9%80%9A%E8%BF%87%E5%9F%9F%E5%90%8D%E7%9A%84%E8%BF%90%E8%90%A5%E5%95%86%E4%BF%AE%E6%94%B9%E5%AF%B9%E5%BA%94%E7%9A%84">https://dash.cloudflare.com/sign-up链接进行注册，然后添加站点（注意是填写域名），提交之后会自动扫描域名对应的解析记录，下一步就是激活了：通过域名的运营商修改对应的</a> NS 记录</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210224174816363.png" alt="image-20210224174816363"></p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210224174902676.png" alt="image-20210224174902676"></p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210224175004015.png" alt="image-20210224175004015"></p><p>反正都免费，能开的都开</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210224175126008.png" alt="image-20210224175126008"></p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210224175215210.png" alt="image-20210224175215210"></p><p>这样就设置完毕了，等一段时间再用命令行验证一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig monkeywie.cn +noall +answer</span><br></pre></td></tr></table></figure><p>例如我的</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210224185800492.png" alt="image-20210224185800492"></p><p>可以看到 dns 解析的 ip 已经变了，已经被 cloudflare 接管了，<br>然后清除下浏览器 DNS 缓存，chrome 浏览器输入<code>chrome://net-internals/#dns</code>进入清除页：</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/2020-08-20-18-41-14.png" alt="img"></p><p>再次访问<code>https://monkeywie.cn</code>，F12 打开网络面板可以看到已经用上了 CDN 了：</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-2021022419buibl8404%202.png" alt="image-2021022419buibl8404 2"></p><p>参考：</p><ul><li><a href="https://guozh.net/buy-domain-name-from-namesilo-course/">2019 Namesilo 购买域名 解析域名 图文教程</a></li><li><a href="https://monkeywie.cn/2020/08/20/fast-github-page-with-cloudflare/">使用cloudflare免费加速github page</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Namesilo购买解析域名-CloudFlare加速Github-Page&quot;&gt;&lt;a href=&quot;#Namesilo购买解析域名-CloudFlare加速Github-Page&quot; class=&quot;headerlink&quot; title=&quot;Namesilo购买解析域名+C</summary>
      
    
    
    
    <category term="Hexo" scheme="https://zhangkh.top/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://zhangkh.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Gitee与Github Pages 自动部署站点</title>
    <link href="https://zhangkh.top/d3134430.html"/>
    <id>https://zhangkh.top/d3134430.html</id>
    <published>2021-02-24T04:05:37.000Z</published>
    <updated>2021-02-24T04:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Gitee与Github-Pages-自动部署站点"><a href="#Hexo-Gitee与Github-Pages-自动部署站点" class="headerlink" title="Hexo Gitee与Github Pages 自动部署站点"></a>Hexo Gitee与Github Pages 自动部署站点</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Github在国内访问还是偏慢的，尽管我们将所有能弄的静态资源都移到拥有国内节点的JSDelivr上了。这里决定将博客在Gitee建立一个镜像，这样如果国内访问太慢的话我们可以从Gitee也就是“码云”来访问网站。</p><p>这样博客站点使用了Github作为主站，又使用了Gitee作为镜像站。但是Gitee免费账户是不支持提交后自动部署的，所以有大佬开发了在Github上使用的动作：<code>gitee-pages-action</code>（<a href="https://github.com/yanglbme/gitee-pages-action">点击查看</a>）。只要在某个仓库配置好这个动作就能在往这个仓库提交任何内容时自动让Gitee部署Gitee里面指定仓库的内容。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>我们按照这个仓库的文档往Hexo站点的<code>source</code>目录添加<code>.github\workflows\sync.yml</code>这个文件，并在这个文件里面配置要使用的Gitee站点仓库和用户名。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Sync</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Gitee</span> <span class="string">Pages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">yanglbme/gitee-pages-action@main</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 用户名</span></span><br><span class="line">          <span class="attr">gitee-username:</span> <span class="string">改成你的Gitee用户名</span></span><br><span class="line">          <span class="comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD</span></span><br><span class="line">          <span class="attr">gitee-password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错</span></span><br><span class="line">          <span class="attr">gitee-repo:</span> <span class="string">改成你的Gitee仓库（用户名斜杠仓库名）</span></span><br><span class="line">          <span class="comment"># 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>对于我来说就是</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Sync</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Gitee</span> <span class="string">Pages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">yanglbme/gitee-pages-action@main</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 用户名</span></span><br><span class="line">          <span class="attr">gitee-username:</span> <span class="string">zhangkaiheng</span></span><br><span class="line">          <span class="comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD</span></span><br><span class="line">          <span class="attr">gitee-password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错</span></span><br><span class="line">          <span class="attr">gitee-repo:</span> <span class="string">zhangkaiheng/zhangkaiheng</span></span><br><span class="line">          <span class="comment"># 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>注意Github的部署仓库后台的Settings里面也要按照最上面那个仓库说明中那样配置Secrets（<code>GITEE_RSA_PRIVATE_KEY</code>和<code>GITEE_PASSWORD</code>的两个密钥。其中：<code>GITEE_RSA_PRIVATE_KEY</code>存放<code>id_rsa</code>私钥；<code>GITEE_PASSWORD</code>存放Gitee帐号的密码），这一步不要忘记了。</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/image-20210223225834378.png" alt="image-20210223225834378"></p><p>但是一个比较严重的问题是鄙人要让Github这边部署站点的仓库更新时触发这个动作，鄙人用的是Hexo，如果鄙人在<code>source</code>目录配置了<code>.github</code>目录时使用Hexo的<code>generate</code>命令是不会向Github提交这个动作的配置的。国内也没有一个比较好的解决方案，只好去查Hexo的文档。</p><p>经过查阅<a href="https://hexo.io/zh-cn/docs/configuration">Hexo文档</a>发现，Hexo默认会忽略隐藏文件和文件夹（包括名称以下划线和 <strong><code>.</code>开头的文件和文件夹</strong>，Hexo的<code>_posts</code>和<code>_data</code>等目录除外）。因此需要在后台仓库的<code>_config.yml</code>文件添加这样的配置才能把<code>.github</code>的目录也给带进来。可能已经预留了<code>include</code>属性，建议先搜索这个属性，然后直接往这里面添加。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">include:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;.github/**/*&quot;</span></span><br></pre></td></tr></table></figure><p>但是这样即使配置了添加这些文件，他默认也会把这个源文件也给渲染，所以我们还需要设置忽略这个文件的渲染。继续在<code>_config.yml</code>文件查找<code>skip_render</code>属性，添加这个文件名。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;.github/**/*&quot;</span></span><br></pre></td></tr></table></figure><p>还有一处也需要修改，往远程仓库部署时要设置不能跳过隐藏的文件，因为Git Bash是按Linux设计的，默认会将<code>.</code>开头的文件和文件夹视为隐藏文件。所以要继续在<code>_config.yml</code>文件查找<code>deploy</code>属性，设置里面<code>ignore_hidden</code>为<code>false</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">ignore_hidden:</span> <span class="literal">false</span> <span class="comment"># 添加这个属性值为false</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">git@gitee.com:你的Gitee仓库.git,要使用的分支名</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:你的Github仓库.git,要使用的分支名</span></span><br><span class="line">    <span class="comment"># 可以先提交Gitee然后再提交Github，也就是把这个Gitee的地址放在前面。这样保证Gitee的站点内容能在Github开始动作之前完成提交。</span></span><br></pre></td></tr></table></figure><p>这样设置之后就可以在Github完成部署仓库提交之后通过配置的动作自动使Gitee也部署站点。</p><p>参考：</p><ul><li><a href="https://github.com/yanglbme/gitee-pages-action">gitee-pages-action</a></li><li><a href="https://blog.csdn.net/qq_35977139/article/details/113764322">Hexo Gitee Pages 自动部署站点</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hexo-Gitee与Github-Pages-自动部署站点&quot;&gt;&lt;a href=&quot;#Hexo-Gitee与Github-Pages-自动部署站点&quot; class=&quot;headerlink&quot; title=&quot;Hexo Gitee与Github Pages 自动部署站点&quot;&gt;</summary>
      
    
    
    
    <category term="Hexo" scheme="https://zhangkh.top/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://zhangkh.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Mac 配置多 Git 账户</title>
    <link href="https://zhangkh.top/a3cc4771.html"/>
    <id>https://zhangkh.top/a3cc4771.html</id>
    <published>2021-02-23T04:05:37.000Z</published>
    <updated>2021-02-23T04:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-配置多-Git-账户"><a href="#Mac-配置多-Git-账户" class="headerlink" title="Mac 配置多 Git 账户"></a>Mac 配置多 Git 账户</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我们经常将代码托管到github、gitlab这样的网站上。为了避免每次push代码时都要输入用户名和密码，通常会选择使用ssh协议，将公钥保存到托管网站上。在实际开发中，往往要将代码托管到多个不同的网站上。比如，公司的代码需要托管到coding上，自己的开源代码托管到GitHub上，私有代码托管到gitlab上等等，每个托管网站都对应一个git账户。默认情况下，一台电脑的Git只对应一个账户，只能往一个网站push代码，非常不便。这就需要配置多个 Git 账户，以向不同的网站 push 代码。本文将介绍如何在一个Git终端中配置多个账户，同时管理多个托管网站的代码。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先，需要准备好对Git的全局用户进行配置。在初次安装Git时，往往会使用如下的命令配置全局用户名和邮箱：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;xxx&quot; &#x2F;&#x2F; 配置全局用户名，如Github上注册的用户名</span><br><span class="line">git config --global user.email &quot;yyy@mail.com&quot; &#x2F;&#x2F; 配置全局邮箱，如Github上配置的邮箱</span><br></pre></td></tr></table></figure><p>这个<code>--global</code>选项，是指这里配置的<code>user.name</code>和<code>user.email</code>是相对于全局进行配置的，即不同的Git仓库默认的用户名和邮箱都是这个值。由于需要管理多个账户，所以仅仅使用这个全局值是不够的，<strong>需要在每个仓库中单独配置</strong>。对此，有两种处理方法：</p><p>如果之前已经使用该命令进行配置，则先使用如下命令清除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset user.name</span><br><span class="line">git config --global --unset user.email</span><br></pre></td></tr></table></figure><p>如果不确定是否已经配置过，可以使用下面的命令查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="对每个账户生成一对密钥"><a href="#对每个账户生成一对密钥" class="headerlink" title="对每个账户生成一对密钥"></a>对每个账户生成一对密钥</h3><p>首先进入保存秘钥的目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;.ssh &#x2F;&#x2F; 进入目录，该目录下保存生成的秘钥</span><br></pre></td></tr></table></figure><p>然后，根据账户或者账户邮箱生成秘钥。例如我在GitHub账户是Kit139，账户邮箱是<a href="mailto:&#50;&#x35;&#x31;&#x34;&#49;&#53;&#x34;&#54;&#53;&#x36;&#64;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;">&#50;&#x35;&#x31;&#x34;&#49;&#53;&#x34;&#54;&#53;&#x36;&#64;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;</a>，则命令为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Kit139&quot;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Kit139&quot;</span><br></pre></td></tr></table></figure><p>输入完成后，会有如下提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public&#x2F;private rsa key pair.</span><br><span class="line">Enter file in which to save the key (&#x2F;Users&#x2F;liugui&#x2F;.ssh&#x2F;id_rsa):</span><br></pre></td></tr></table></figure><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/1hiafgblagiqyvglb.jpg" alt="1hiafgblagiqyvglb"></p><p>这里要求对秘钥进行命名，默认的文件名是<code>id_rsa</code>。为了方便区分，我这里命名为<code>id_rsa_github</code>。接下来的提示都直接进行回车，直到秘钥生成。通过<code>ls</code>命令，可以看到刚刚生成的密钥对<code>id_rsa_github</code>和<code>id_rsa_github.pub</code>。其中<code>id_rsa_github.pub</code>是公钥。</p><p>同样，对于GitLab上的账户，我是用另一个邮箱注册的，按照同样的步骤生成<code>id_rsa_gitlab</code>的秘钥对。接下来的步骤，除额外说明外，两个账户的操作完全相同。</p><h3 id="私钥添加到本地"><a href="#私钥添加到本地" class="headerlink" title="私钥添加到本地"></a>私钥添加到本地</h3><p>SSH协议的原理，就是在托管网站上使用公钥，在本地使用私钥，这样本地仓库就可以和远程仓库进行通信。在上一步已经生成了秘钥文件，接下来需要使用秘钥文件，首先是在本地使用秘钥文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~&#x2F;.ssh&#x2F;id_rsa_github &#x2F;&#x2F; 将GitHub私钥添加到本地</span><br><span class="line">ssh-add ~&#x2F;.ssh&#x2F;id_rsa_gitlab &#x2F;&#x2F; 将GitLab私钥添加到本地</span><br></pre></td></tr></table></figure><p>为了检验本地是否添加成功，可以使用<code>ssh-add -l</code>命令进行查看</p><h3 id="对本地秘钥进行配置"><a href="#对本地秘钥进行配置" class="headerlink" title="对本地秘钥进行配置"></a>对本地秘钥进行配置</h3><p>由于添加了多个密钥文件，所以需要对这多个密钥进行管理。在<code>.ssh</code>目录下新建一个config文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch config</span><br></pre></td></tr></table></figure><p>文件中的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Host github &#x2F;&#x2F; 网站的别名，随意取</span><br><span class="line">HostName github.com &#x2F;&#x2F; 托管网站的域名</span><br><span class="line">User liugui &#x2F;&#x2F; 托管网站上的用户名</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_github &#x2F;&#x2F; 使用的密钥文件</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; GitLab的配置相同</span><br><span class="line">Host gitlab</span><br><span class="line">HostName gitlab.com</span><br><span class="line">User liugui</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_gitlab</span><br></pre></td></tr></table></figure><p>例如我的是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User Kit139</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_kit139_mac</span><br><span class="line"></span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">User zhangkaiheng</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_zkh_gitee</span><br></pre></td></tr></table></figure><h3 id="公钥添加到托管网站"><a href="#公钥添加到托管网站" class="headerlink" title="公钥添加到托管网站"></a>公钥添加到托管网站</h3><p>以GitHub为例，先在本地复制公钥。进入<code>.ssh</code>目录，使用<code>cat id_rsa_github.pub</code>或者用vscode打开id_rsa_github.pub文件查看生成的GitHub公钥，全选进行复制。</p><p>登录GitHub，点击右上角头像选择<code>settings</code>，在打开的页面中选择SSH and GPG keys，</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/3250450123-5b8e880ae25ea_articlex.png" alt="图片描述"></p><p>在打开的页面的Key输入框中粘贴刚刚复制的公钥，title的名字自己随便去，然后点击下方的<code>Add SSH key</code>按钮：<br><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/1793513036-5b8e88180ee14_articlex.png" alt="图片描述"></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>至此，托管网站的公钥添加完成。总结来说，就是针对每个托管网站分别生成一对密钥，然后分别添加到本地和托管网站。</p><p>这时候，可以测试一下配置是否成功，测试命令使用别名。例如，对于GitHub，本来应该使用的测试命令是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>在config文件中，给GitHub网站配置的别名就是github，所以直接使用别名，就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github</span><br></pre></td></tr></table></figure><blockquote><p>如果你配置的 Coding ，需要注意 <code>HostName</code> 要填写你的团队的地址，Coding 现在对于新用户都是注册为团队，并为每个团队单独创建了一个二级域名，比如我的账户二级域名：<code>sjzcode.coding.net</code>。直接写 <code>coding.net</code> 无法认证成功。</p></blockquote><p>命令 <code>ssh -T git@别名</code> 验证是否配置成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~&#x2F;.ssh ssh -T git@github.com</span><br><span class="line">Hi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"></span><br><span class="line">~&#x2F;.ssh ssh -T git@sjzcode.coding.net</span><br><span class="line">Coding 提示: Hello xxx, You&#39;ve connected to Coding.net via SSH. This is a personal key.</span><br><span class="line">xx，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥.</span><br><span class="line">公钥指纹：xxxxxxxxx</span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://juejin.cn/post/6844904132990468103">Mac 多 Git 账户配置</a></li><li><a href="https://blog.csdn.net/weixin_34355559/article/details/88748270">Mac下配置多个Git账户</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mac-配置多-Git-账户&quot;&gt;&lt;a href=&quot;#Mac-配置多-Git-账户&quot; class=&quot;headerlink&quot; title=&quot;Mac 配置多 Git 账户&quot;&gt;&lt;/a&gt;Mac 配置多 Git 账户&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot;</summary>
      
    
    
    
    <category term="Hexo" scheme="https://zhangkh.top/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://zhangkh.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客优化——推荐插件</title>
    <link href="https://zhangkh.top/d340ea43.html"/>
    <id>https://zhangkh.top/d340ea43.html</id>
    <published>2021-02-22T04:05:37.000Z</published>
    <updated>2021-02-22T04:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客优化——推荐插件"><a href="#Hexo博客优化——推荐插件" class="headerlink" title="Hexo博客优化——推荐插件"></a>Hexo博客优化——推荐插件</h1><h1 id="Hexo-abbrlink生成唯一永久文章链接"><a href="#Hexo-abbrlink生成唯一永久文章链接" class="headerlink" title="Hexo-abbrlink生成唯一永久文章链接"></a>Hexo-abbrlink生成唯一永久文章链接</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做次优化之前，hexo-next文章链接默认的生成规则是：<code>:year/:month/:day/:title</code>，是按照年、月、日、标题来生成的。<br>比如：<code>https://www.liaofuzhan.com/2019/08/12/hello-world/</code> 这样，如果文章标题是中文的话，URL链接是也会是中文，</p><p><img src= "/image/loading.gif" data-lazy-src="https://gitee.com/cit_k/pictures/raw/master/picture/agdyuaccbslc.png" alt="agdyuaccbslc"></p><p>复制后的链接是一长串，非常不利于阅读，也不简洁。。。😢</p><p><a href="https://links.jianshu.com/go?to=http://localhost:4000/2019/08/13/tech/hexo/Hexo%20Next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%93%88%E6%9E%97%E6%91%87%E7%89%B9%E6%95%88/">http://localhost:4000/2019/08/13/tech/hexo/Hexo%20Next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%93%88%E6%9E%97%E6%91%87%E7%89%B9%E6%95%88/</a></p><p>一种解决方案是：使用**<code>hexo-permalink-pinyin插件</code>**，将中文转英文，参考这篇文章：<a href="https://www.liaofuzhan.com/posts/781435405.html">Hexo NexT中文链接转拼音(关于中文md文件名的问题)</a></p><p>这样方案也存在一定的缺陷，比如修改了文章标题，重新<code>hexo</code>三连后，<code>URL</code>就变了，以前的文章地址变成了<code>404</code>。而且这样生成的URL层级也很深，不利于SEO。</p><p>那能不能生成唯一不变的URl链接呢？答案是可以的，已经有人给我们实现了。这就是我们要说的<code>hexo-abbrlink</code>插件，简单易用</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><blockquote><p>执行此命令可能会不成功，提示你缺少相应的依赖<br>比如<code>babel-eslint</code>、<code>mini-css-extract-plugin</code>、<code>webpack-cli</code>…<br>使用npm命令安装即可，比如<code>npm install eslint@4.x babel-eslint@8 --save-dev</code></p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>修改根目录站点配置文件<code>config.yml</code>，改为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">permalink: posts/:abbrlink.html  # 此处可以自己设置，也可以直接使用 :/abbrlink</span><br><span class="line">abbrlink:</span><br><span class="line">    alg: crc32   #算法： crc16(default) and crc32</span><br><span class="line">    rep: hex     #进制： dec(default) and hex</span><br></pre></td></tr></table></figure><p>生成的链接将会是这样的(官方样例)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">https:<span class="comment">//post.zz173.com/posts/66c8.html</span></span><br><span class="line"></span><br><span class="line">crc16 &amp; dec</span><br><span class="line">https:<span class="comment">//post.zz173.com/posts/65535.html</span></span><br><span class="line">crc32 &amp; hex</span><br><span class="line">https:<span class="comment">//post.zz173.com/posts/8ddf18fb.html</span></span><br><span class="line"></span><br><span class="line">crc32 &amp; dec</span><br><span class="line">https:<span class="comment">//post.zz173.com/posts/1690090958.html</span></span><br></pre></td></tr></table></figure><p>生成完后，原<code>md</code>文件的Front-matter 内会增加<code>abbrlink</code> 字段，值为生成的ID 。这个字段确保了在我们修改了Front-matter 内的博客标题title或创建日期date字段之后而不会改变链接地址。</p><h1 id="hexo-generator-feed生成RSS文件的插件"><a href="#hexo-generator-feed生成RSS文件的插件" class="headerlink" title="hexo-generator-feed生成RSS文件的插件"></a>hexo-generator-feed生成RSS文件的插件</h1><h2 id="安装所需插件"><a href="#安装所需插件" class="headerlink" title="安装所需插件"></a>安装所需插件</h2><p>hexo博客中有一个可以生成RSS的xml文件的插件<code>hexo-generator-feed</code>，使用命令行对其进行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BASH</span><br><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure><h2 id="启用插件"><a href="#启用插件" class="headerlink" title="启用插件"></a>启用插件</h2><p>安装成功之后通过hexo博客根目录下的<code>_config.yml</code>文件的修改来启用插件，修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">YAML</span><br><span class="line"># Extensions</span><br><span class="line">plugins:</span><br><span class="line">    hexo-generator-feed</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">    type: atom # 生成的类型，RSS对应atom</span><br><span class="line">    path: atom.xml # 生成的文件名</span><br><span class="line">    limit: 20 # 选取推送的文章数量</span><br></pre></td></tr></table></figure><h2 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h2><p>通过<code>hexo g</code>生成新的public目录，已经能看到里面有atom.xml文件了。</p><p>发布之后就可以进行正常使用</p><h1 id="Hexo自动为站内链接加上nofollow插件"><a href="#Hexo自动为站内链接加上nofollow插件" class="headerlink" title="Hexo自动为站内链接加上nofollow插件"></a>Hexo自动为站内链接加上nofollow插件</h1><p><a href="https://blog.kaygb.com/go/aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWZpbHRlci1ub2ZvbGxvdw==">hexo-filter-nofollow</a> 是一个自动为 Hexo 博客中的外链添加 <code>rel=&quot;external nofollow noreferrer&quot;</code> 的插件。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://blog.kaygb.com/go/aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWZpbHRlci1ub2ZvbGxvdw==">hexo-filter-nofollow</a> 会为你的博客中的外链自动添加 <code>rel=&quot;external nofollow noreferrer&quot;</code> 属性，从而 <a href="https://blog.kaygb.com/go/aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9MaW5rX3R5cGVz">改善你的网站的安全性和 SEO</a>。</p><p>关于SEO这点，网站内部有大量的外链会影响网站的权重,不利于SEO。</p><p>“nofollow” 标签是Google、Yahoo和微软公司前几年一起提出的一个标签，链接加上这个标签后就不会被计算权值，搜索引擎支持nofollow属性，在很大程度上抑制博客或论坛的垃圾留言。对站长来说是一件大好事。</p><p>nofollow是HTML元标签(meta)的content属性和链接标签(a)的rel属性的一个值，告诉机器(爬虫)无需追踪目标页，为了对抗blogspam(博客垃圾留言信息)，Google推荐使用nofollow，告诉搜索引擎爬虫无需抓取目标页，同时告诉搜索引擎无需将的当前页的Pagerank传递到目标页。但是如果你是通过sitemap直接提交该页面，爬虫还是会爬取，这里的nofollow只是当前页对目标页的一种态度，并不代表其他页对目标页的态度。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i hexo-filter-nofollow --save</span><br></pre></td></tr></table></figure><p>如果你使用 yarn 作为你的 Hexo 的包管理器，你也可以使用下述命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-filter-nofollow</span><br></pre></td></tr></table></figure><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>打开hexo的配置文件_config.yml，注意是hexo而不是主题。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nofollow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;exclude1.com&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;exclude2.com&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><strong>enable</strong> - 是否启用插件，默认值为 <code>true</code></li><li><strong>field</strong> - 插件的处理范围，默认值为 <code>site</code>，可选 <code>post</code> 或 <code>site</code><ul><li><code>post</code> - 仅处理文章内容</li><li><code>site</code> - 处理全站所有页面</li></ul></li><li><strong>exclude</strong> - 域名白名单，不同的子域名视为不同的域名（如 <code>www</code>）<ul><li><code>exclude1.com</code>不包括 <code>www.exclude1.com</code> 或 <code>en.exclude1.com</code></li></ul></li></ul><h2 id="从-hexo-autonofollow-迁移"><a href="#从-hexo-autonofollow-迁移" class="headerlink" title="从 hexo-autonofollow 迁移"></a>从 hexo-autonofollow 迁移</h2><p><a href="https://blog.kaygb.com/go/aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1hdXRvbm9mb2xsb3c=">hexo-autonofollow</a> 是由 liuzc 在 2016 年开发的为 Hexo 所有页面中的外链添加 <code>rel=&quot;external nofollow&quot;</code> 属性的插件。hexo-filter-nofollow 相比 hexo-autonofollow 有以下区别：</p><ul><li><code>enable</code> 配置 默认值为 <code>true</code>，默认启用插件</li><li>新增 <code>field</code> 配置，支持设置插件处理范围</li><li>移除 cheerio 依赖，使用正则表达式匹配</li><li>已加入 Hexo 官方插件，由 Hexo 官方团队维护</li></ul><p>如果你之前已经安装了 hexo-autonofollow，可以直接卸载 hexo-autonofollow 并安装 hexo-filter-nofollow。hexo-filter-nofollow 的配置和 hexo-autonofollow 的配置完全兼容。</p><p>原文链接：<a href="https://blog.kaygb.com/go/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpZ2JlYXIwMDAwNy9hcnRpY2xlL2RldGFpbHMvODA3NTgyNzk=">https://blog.csdn.net/bigbear00007/article/details/80758279</a></p><p>原文链接：<a href="https://blog.kaygb.com/go/aHR0cHM6Ly9ibG9nLnNray5tb2UvcG9zdC9oZXhvLWZpbHRlci1ub2ZvbGxvdy1qb2luZWQtaGV4by1vZmZpY2lhbC1wbHVnaW4v">https://blog.skk.moe/post/hexo-filter-nofollow-joined-hexo-official-plugin/</a></p><h1 id="hexo-generator-sitemap等插件生成sitemap"><a href="#hexo-generator-sitemap等插件生成sitemap" class="headerlink" title="hexo-generator-sitemap等插件生成sitemap"></a>hexo-generator-sitemap等插件生成sitemap</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>为了让博文被google或百度检索</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>sitemap:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>baidusitemap:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><h2 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h2><p>sitemap: You can configure this plugin in <code>_config.yml</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">  template: .&#x2F;sitemap_template.xml</span><br><span class="line">  rel: false</span><br><span class="line">  tags: true</span><br><span class="line">  categories: true</span><br></pre></td></tr></table></figure><p>baidusitemap: You can configure this plugin in <code>_config.yml</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">baidusitemap: </span><br><span class="line">path: baidusitemap.xml</span><br></pre></td></tr></table></figure><h1 id="添加-robots-txt"><a href="#添加-robots-txt" class="headerlink" title="添加 robots.txt"></a>添加 robots.txt</h1><p><code>robots.txt</code>是搜索引擎蜘蛛协议，告诉引擎哪些要收录，哪些禁止收录，这样显得更规范一些。<br><code>source</code>文件夹下新建 robots.txt，内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: &#x2F;</span><br><span class="line">Allow: &#x2F;home&#x2F;</span><br><span class="line">Allow: &#x2F;about&#x2F;</span><br><span class="line">Allow: &#x2F;archives&#x2F;</span><br><span class="line">Allow: &#x2F;categories&#x2F;</span><br><span class="line">Allow: &#x2F;tags&#x2F;</span><br><span class="line">Disallow: &#x2F;js&#x2F;</span><br><span class="line">Disallow: &#x2F;css&#x2F;</span><br><span class="line">Disallow: &#x2F;fonts&#x2F;</span><br><span class="line"></span><br><span class="line">Sitemap: https:&#x2F;&#x2F;zhangkaiheng.gitee.io&#x2F;sitemap.xml</span><br><span class="line">Sitemap: https:&#x2F;&#x2F;zhangkaiheng.gitee.io&#x2F;baidusitemap.xml</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>参考：</p><ul><li><a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a></li><li><a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a></li><li><a href="https://github.com/hexojs/hexo-filter-nofollow">hexo-filter-nofollow</a></li><li><a href="https://github.com/hexojs/hexo-generator-sitemap">hexo-generator-sitemap</a></li><li><a href="https://github.com/coneycode/hexo-generator-baidu-sitemap">hexo-generator-baidu-sitemap</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hexo博客优化——推荐插件&quot;&gt;&lt;a href=&quot;#Hexo博客优化——推荐插件&quot; class=&quot;headerlink&quot; title=&quot;Hexo博客优化——推荐插件&quot;&gt;&lt;/a&gt;Hexo博客优化——推荐插件&lt;/h1&gt;&lt;h1 id=&quot;Hexo-abbrlink生成唯一</summary>
      
    
    
    
    <category term="Hexo" scheme="https://zhangkh.top/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://zhangkh.top/tags/Hexo/"/>
    
  </entry>
  
</feed>
